
Dicas:

Mostra duas colunas, uma hex e outra ASCII
hexdump -C hello.o

Mostra n bytes apenas
hexdump -C -n 20 hello.o


SYNOPSIS
     hexdump [-Cv] [-e format_string] [-n length] [-s skip] file ...

     -C      Canonical hex+ASCII display.

     -e format_string
             Specify a format string to be used for displaying data.

     -n length
             Interpret only length bytes of input.

     -s offset
             Skip offset bytes from the beginning of the input.
             By default, offset is interpreted as a decimal number.
             With a leading 0x offset is interpreted as a hexadecimal number
             Appending the character b, k, or m to offset causes it to be
             interpreted as a multiple of 512, 1024, or 1048576, respectively.

     -v      Cause hexdump to display all input data.  Without the -v option,
             any number of groups of output lines, which would be identical to
             the immediately preceding group of output lines (except for the
             input offsets), are replaced with a line comprised of a single
             asterisk.

   Formats
     A format string contains any number of format units, separated by whitespace.
     A format unit contains up to three items: an iteration count, a byte count, and a format.

     The iteration count is an optional positive integer, which defaults to one.  Each format is applied iteration count times.

     The byte count is an optional positive integer.  If specified it defines the number of bytes to be interpreted by each iteration of the format.

     If an iteration count and/or a byte count is specified, a single slash
     must be placed after the iteration count and/or before the byte count to
     disambiguate them.  Any whitespace before or after the slash is ignored.

     The format is required and must be surrounded by double quote (" ") marks.
     It is interpreted as a fprintf-style format

     single character escape sequences described in the C standard are supported:

                     NUL                  \0
                     <alert character>    \a
                     <backspace>          \b
                     <form-feed>          \f
                     <newline>            \n
                     <carriage return>    \r
                     <tab>                \t
                     <vertical tab>       \v

conversion strings:
     _a[dx]      Display the input offset, cumulative across input files, of
                 the next byte to be displayed.  The appended characters d, o,
                 and x specify the display base as decimal, octal or hexadeci-
                 mal respectively.

     _p          Output characters in the default character set.
                 Nonprinting characters are displayed as a single ``.''.

     _u          Output US ASCII characters, with the exception that control
                 characters are displayed using the following, lower-case,
                 names.  Characters greater than 0xff, hexadecimal, are dis-
                 played as hexadecimal strings.

                 000 NUL  001 SOH  002 STX  003 ETX  004 EOT  005 ENQ
                 006 ACK  007 BEL  008 BS   009 HT   00A LF   00B VT
                 00C FF   00D CR   00E SO   00F SI   010 DLE  011 DC1
                 012 DC2  013 DC3  014 DC4  015 NAK  016 SYN  017 ETB
                 018 CAN  019 EM   01A SUB  01B ESC  01C FS   01D GS
                 01E RS   01F US   0FF DEL

           %_p, %_u     One byte counts only.
           %X, %x       one, two and four byte counts supported.
           %G, %g, %f   four, Eight and twelve byte counts supported.


EXAMPLES
     Display the input in perusal format:
     hexdump -e "12/1 \"%3_u \"" teste.bin
     hexdump -e "8/2  \"%x \" \"\n\" "  teste.bin
     hexdump -e "8/1  \"%_u \" \"\n\" "  teste.bin
     hexdump -e " \"%04.4_ax   \"  4/1  \"%02x \"  \"  \" 4/1  \"%02x \"  \"   \" 4/1  \"%02x \"  \"  \" 4/1  \"%02x \" " -e " \"   |\" 16/1  \"%_p\"  \"|\"   \"\n\" " teste.bin 


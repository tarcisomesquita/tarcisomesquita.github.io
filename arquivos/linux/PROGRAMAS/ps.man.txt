ps works by reading the virtual files in /proc. Not need to be setuid kmem or have any privileges to run.

ps aux
ps -e -o pid,args --sort pid

list all processes
ps -a -x -o ppid,pid,command

PS(1)
July 28, 2004

SYNOPSIS
ps [options]

-e  Select all processes. (every)
   ps -e
   ps -ef
   ps -eF
   ps -ely

To print a process tree:
   ps -ejH
   ps axjf

To get info about threads:
   ps -eLf
   ps axms

To get security info:
   ps -eo euser,ruser,suser,fuser,f,comm,label
   ps axZ
   ps -eM

To see every process running as root (real & effective ID) in user format:
ps -U root -u root u


OUTPUT FORMAT CONTROL
-F   extra full format. See the -f option, which -F implies.


-o pid,format,state,tname,time,command
-o pid,format,tname,time,cmd

ps axf
-f   does full-format listing. See the c option, the format keyword args, and the format keyword comm.

ps -a -L -o ppid,pid,lwp,command
lista threads

-o format   user-defined format. See STANDARD FORMAT SPECIFIERS section below.
            Headers may be renamed (ps -o pid,ruser=RealUser -o comm=Command).


OUTPUT MODIFIERS
c    Show the true command name. This is derived from the name of the executable file, rather than from the argv value. Command
     arguments and any modifications to them (see setproctitle(3)) are thus not shown. This option effectively turns the args format
     keyword into the comm format keyword; it is useful with the -f format option and with the various BSD-style format options, which
     all normally display the command arguments. See the -f option, the format keyword args, and the format keyword comm.


e    Show the environment after the command.


f    ASCII-art process hierarchy (forest)


h    No header. (or, one header per screen in the BSD personality)
     The h option is problematic. Standard BSD ps uses this option to print a header on each page of output, but older Linux ps uses
     this option to totally disable the header. This version of ps follows the Linux usage of not printing the header unless the BSD
     personality has been selected, in which case it prints a header on each page of output. Regardless of the current personality, you
     can use the long options --headers and --no-headers to enable printing headers each page or disable headers entirely,
     respectively.


k spec          specify sorting order. Sorting syntax is [+|-]key[,[+|-]key[,...]] Choose a multi-letter key from the STANDARD FORMAT SPECIFIERS
     section. The "+" is optional since default direction is increasing numerical or lexicographic order. Identical to --sort.
     Examples:
     ps jaxkuid,-ppid,+pid
     ps axk comm o comm,args
     ps kstart_time -ef


-n namelist     set namelist file.
     The namelist file is needed for a proper WCHAN display, and must match the current Linux kernel exactly for correct output.
     Without this option, the default search path for the namelist is:

      $PS_SYSMAP
      $PS_SYSTEM_MAP
      /proc/*/wchan
      /boot/System.map-`uname -r`
      /boot/System.map
      /lib/modules/`uname -r`/System.map
      /usr/src/linux/System.map
      /System.map


n    Numeric output for WCHAN and USER. (including all types of UID and GID)


w    Wide output. Use this option twice for unlimited width.

--sort spec
   specify sorting order. Sorting syntax is [+|-]key[,[+|-]key[,...]]
   Choose a multi-letter key from the STANDARD FORMAT SPECIFIERS section.
   ps jax --sort=uid,-ppid,+pid

THREAD DISPLAY
H    Show threads as if they were processes
-L   Show threads, possibly with LWP and NLWP columns
-T   Show threads, possibly with SPID column
-m   Show threads after processes

CPU usage is currently expressed as the percentage of time spent running during the entire lifetime of a process. This is not ideal, and it does
not conform to the standards that ps otherwise conforms to. CPU usage is unlikely to add up to exactly 100%.

The SIZE and RSS fields don’t count some parts of a process including the page tables, kernel stack, struct thread_info, and struct task_struct.
This is usually at least 20 KiB of memory that is always resident. SIZE is the virtual size of the process (code+data+stack).

Processes marked <defunct> are dead processes (so-called "zombies") that remain because their parent has not destroyed them properly. These
processes will be destroyed by init(8) if the parent process exits.



PROCESS FLAGS
The sum of these values is displayed in the "F" column, which is provided by the flags output specifier.
1    forked but didn’t exec
4    used super-user privileges


PROCESS STATE CODES
Here are the different values that the s, stat and state output specifiers (header "STAT" or "S") will display to describe the state of a process.
D    Uninterruptible sleep (usually IO)
R    Running or runnable (on run queue)
S    Interruptible sleep (waiting for an event to complete)
T    Stopped, either by a job control signal or because it is being traced.
W    paging (not valid since the 2.6.xx kernel)
X    dead (should never be seen)
Z    Defunct ("zombie") process, terminated but not reaped by its parent.

For BSD formats and when the stat keyword is used, additional characters may be displayed:
<    high-priority (not nice to other users)
N    low-priority (nice to other users)
L    has pages locked into memory (for real-time and custom IO)
s    is a session leader
l    is multi-threaded (using CLONE_THREAD, like NPTL pthreads do)
+    is in the foreground process group




STANDARD FORMAT SPECIFIERS

CODE      HEADER DESCRIPTION
%cpu      %CPU   cpu utilization. Is the CPU time used divided by the time the process has been running.
%mem      %MEM   ratio of the process’s resident set size to the physical memory on the machine, expressed as a percentage.

args      COMMAND command with all its arguments as a string.
          A process marked <defunct> is partly dead, waiting to be fully destroyed by its parent.
          If the process args will be unavailable; then, print the executable name in brackets.
          --cols or -w option may be used to exactly determine the output width.

blocked   BLOCKEDmask of the blocked signals, see signal(7). According to the width of the field, a 32-bit or 64-bit mask in hexadecimal format is
      displayed. (alias sig_block, sigmask).

bsdstart  START  time the command started. If the process was started less than 24 hours ago, the output format is " HH:MM", else it is "mmm dd"
      (where mmm is the three letters of the month).

bsdtime   TIME   accumulated cpu time, user + system. The display format is usually "MMM:SS", but can be shifted to the right if the process used more
      than 999 minutes of cpu time.

c         C      processor utilization. Currently, this is the integer value of the percent usage over the lifetime of the process. (see %cpu).

caught    CAUGHT mask of the caught signals, see signal(7). According to the width of the field, a 32 or 64 bits mask in hexadecimal format is
      displayed. (alias sig_catch, sigcatch).

class     CLS    scheduling class of the process. (alias policy, cls). Field’s possible values are:
      -   not reported
      TS  SCHED_OTHER
      FF  SCHED_FIFO
      RR  SCHED_RR
      ?   unknown value

cls       CLS    scheduling class of the process. (alias policy, class). Field’s possible values are:
      -   not reported
      TS  SCHED_OTHER
      FF  SCHED_FIFO
      RR  SCHED_RR
      ?   unknown value

comm      COMMANDcommand name (only the executable name). Modifications to the command name will not be shown. A process marked <defunct> is partly
      dead, waiting to be fully destroyed by its parent. The output in this column may contain spaces. (alias ucmd, ucomm). See also the
      args format keyword, the -f option, and the c option.
      When specified last, this column will extend to the edge of the display. If ps can not determine display width, as when output is
      redirected (piped) into a file or another command, the output width is undefined. (it may be 80, unlimited, determined by the TERM
      variable, and so on) The COLUMNS environment variable or --cols option may be used to exactly determine the width in this case. The w
      or -w option may be also be used to adjust width.

command   COMMANDsee args. (alias args, cmd).

cp        CP     per-mill (tenths of a percent) CPU usage. (see %cpu).

cputime   TIME   cumulative CPU time, "[dd-]hh:mm:ss" format. (alias time).

egid      EGID   effective group ID number of the process as a decimal integer. (alias gid).

egroup    EGROUP effective group ID of the process. This will be the textual group ID, if it can be obtained and the field width permits, or a decimal
      representation otherwise. (alias group).

eip       EIP    instruction pointer.

esp       ESP    stack pointer.


etime     ELAPSEDelapsed time since the process was started, in the form [[dd-]hh:]mm:ss.

euid      EUID   effective user ID. (alias uid).

euser     EUSER  effective user name. This will be the textual user ID, if it can be obtained and the field width permits, or a decimal representation
      otherwise. The n option can be used to force the decimal representation. (alias uname, user).

f         F      flags associated with the process, see the PROCESS FLAGS section. (alias flag, flags).

fgid      FGID   filesystem access group ID. (alias fsgid).

fgroup    FGROUP filesystem access group ID. This will be the textual user ID, if it can be obtained and the field width permits, or a decimal
      representation otherwise. (alias fsgroup).

flag      F      see f. (alias f, flags).

flags     F      see f. (alias f, flag).

fname     COMMANDfirst 8 bytes of the base name of the process’s executable file. The output in this column may contain spaces.

fuid      FUID   filesystem access user ID. (alias fsuid).

fuser     FUSER  filesystem access user ID. This will be the textual user ID, if it can be obtained and the field width permits, or a decimal
      representation otherwise.

gid       GID    see egid. (alias egid).

group     GROUP  see egroup. (alias egroup).

ignored   IGNOREDmask of the ignored signals, see signal(7). According to the width of the field, a 32-bit or 64-bit mask in hexadecimal format is
      displayed. (alias sig_ignore, sigignore).

label     LABEL  security label, most commonly used for SE Linux context data. This is for the Mandatory Access Control ("MAC") found on high-security
      systems.

lstart    STARTEDtime the command started.

lwp       LWP    lwp (light weight process, or thread) ID of the lwp being reported. (alias spid, tid).

ni        NI     nice value. This ranges from 19 (nicest) to -20 (not nice to others), see nice(1). (alias nice).

nice      NI     see ni. (alias ni).

nlwp      NLWP   number of lwps (threads) in the process. (alias thcount).

nwchan    WCHAN  address of the kernel function where the process is sleeping (use wchan if you want the kernel function name). Running tasks will
      display a dash (’-’) in this column.

pcpu      %CPU   see %cpu. (alias %cpu).

pending   PENDINGmask of the pending signals. See signal(7). Signals pending on the process are distinct from signals pending on individual threads.
      Use the m option or the -m option to see both. According to the width of the field, a 32-bit or 64-bit mask in hexadecimal format is
      displayed. (alias sig).

pgid      PGID   process group ID or, equivalently, the process ID of the process group leader. (alias pgrp).

pgrp      PGRP   see pgid. (alias pgid).

pid       PID    process ID number of the process.

pmem      %MEM   see %mem. (alias %mem).

policy    POL    scheduling class of the process. (alias class, cls). Possible values are:
      -   not reported
      TS  SCHED_OTHER
      FF  SCHED_FIFO
      RR  SCHED_RR
      ?   unknown value


ppid      PPID   parent process ID.

pri       PRI    priority of the process. Higher number means lower priority

psr       PSR    processor that process is currently assigned to.

rgid      RGID   real group ID.

rgroup    RGROUP real group name. This will be the textual group ID, if it can be obtained and the field width permits, or a decimal representation
      otherwise.

rss       RSS    resident set size, the non-swapped physical memory that a task has used (in kiloBytes). (alias rssize, rsz).

rssize    RSS    see rss. (alias rss, rsz).

rsz       RSZ    see rss. (alias rss, rssize).

rtprio    RTPRIO realtime priority.

ruid      RUID   real user ID.

ruser     RUSER  real user ID. This will be the textual user ID, if it can be obtained and the field width permits, or a decimal representation
      otherwise.

s         S      minimal state display (one character). See section PROCESS STATE CODES for the different values. See also stat if you want additional
      information displayed. (alias state).

sched     SCH    scheduling policy of the process. The policies sched_other, sched_fifo, and sched_rr are respectively displayed as 0, 1, and 2.

sess      SESS   session ID or, equivalently, the process ID of the session leader. (alias session, sid).

sgi_p     P      processor that the process is currently executing on. Displays "*" if the process is not currently running or runnable.

sgid      SGID   saved group ID. (alias svgid).

sgroup    SGROUP saved group name. This will be the textual group ID, if it can be obtained and the field width permits, or a decimal representation
      otherwise.

sid       SID    see sess. (alias sess, session).

sig       PENDINGsee pending. (alias pending, sig_pend).

sigcatch  CAUGHT see caught. (alias caught, sig_catch).

sigignore IGNOREDsee ignored. (alias ignored, sig_ignore).

sigmask   BLOCKEDsee blocked. (alias blocked, sig_block).

size      SZ     approximate amount of swap space that would be required if the process were to dirty all writable pages and then be swapped out. This
      number is very rough!

spid      SPID   see lwp. (alias lwp, tid).

stackp    STACKP address of the bottom (start) of stack for the process.

start     STARTEDtime the command started. If the process was started less than 24 hours ago, the output format is "HH:MM:SS", else it is "  mmm dd"
      (where mmm is a three-letter month name).

start_timeSTART  starting time or date of the process. Only the year will be displayed if the process was not started the same year ps was invoked,
      or "mmmdd" if it was not started the same day, or "HH:MM" otherwise.

stat      STAT   multi-character process state. See section PROCESS STATE CODES for the different values meaning. See also s and state if you just
      want the first character displayed.

state     S      see s. (alias s).

suid      SUID   saved user ID. (alias svuid).

suser     SUSER  saved user name. This will be the textual user ID, if it can be obtained and the field width permits, or a decimal representation
      otherwise. (alias svuser).


svgid     SVGID  see sgid. (alias sgid).

svuid     SVUID  see suid. (alias suid).

sz        SZ     size in physical pages of the core image of the process. This includes text, data, and stack space. Device mappings are currently
      excluded; this is subject to change. See vsz and rss.

thcount   THCNT  see nlwp. (alias nlwp). number of kernel threads owned by the process.

tid       TID    see lwp. (alias lwp).

time      TIME   cumulative CPU time, "[dd-]hh:mm:ss" format. (alias cputime).

tname     TTY    controlling tty (terminal). (alias tt, tty).

tpgid     TPGID  ID of the foreground process group on the tty (terminal) that the process is connected to, or -1 if the process is not connected to a
      tty.

tt        TT     controlling tty (terminal). (alias tname, tty).

tty       TT     controlling tty (terminal). (alias tname, tt).

ucmd      CMD    see comm. (alias comm, ucomm).

ucomm     COMMANDsee comm. (alias comm, ucmd).

uid       UID    see euid. (alias euid).

uname     USER   see euser. (alias euser, user).

user      USER   see euser. (alias euser, uname).

vsize     VSZ    see vsz. (alias vsz).

vsz       VSZ    virtual memory size of the process in KiB (1024-byte units). Device mappings are currently excluded; this is subject to change.
      (alias vsize).

wchan     WCHAN  name of the kernel function in which the process is sleeping, a "-" if the process is running, or a "*" if the process is
      multi-threaded and ps is not displaying threads.



dpkg(1)

# lists currently installed packages
dpkg -l

dpkg -L ghex                                               # lista arquivos do pacote
dpkg -c /media/SD/pacotes/archives/ghex_2.24.0-1_i386.deb # lists the contents of a binary package. 

dpkg -S stdio.h                                            # procura o pacote que contém o arquivo stdio.h
dpkg -S /bin/netstat
dpkg -s ghex                                               # mostra o arquivo control
dpkg -f /media/SD/pacotes/archives/ghex_2.24.0-1_i386.deb  # shows the control file for a binary package.


SYNOPSIS
dpkg [options] action

DESCRIPTION
dpkg is a tool to install, build, remove and manage Debian packages.

ACTIONS
-i, --install package_file...
   Install  the  package. If --recursive or -R option is specified, package_file must refer to a directory instead.

   Installation consists of the following steps:
   1. Extract the control files of the new package.
   2. If another version of the same package was  installed  before the new installation, execute prerm script of the old package.
   3. Run preinst script, if provided by the package.
   4. Unpack  the  new files, and at the same time back up the old files, so that if something goes wrong, they can be restored.
   5. If another version of the same package was  installed  before the new installation, execute the postrm script of the old package.
      Note that this script is executed after the preinst script of the new package, because new files are written at the same time old files are removed.
   6. Configure the package. See --configure for detailed  information about how this is done.

--unpack package_file...
   Unpack the package, but don't configure it.

--configure package...|-a|--pending
   Configure  a package which has been unpacked but not yet configured.
   If -a or --pending is given instead of package, all unpacked but unconfigured packages are configured.

   Configuring consists of the following steps:
   1. Unpack the conffiles, and at the same time back up the old conffiles, so that they can be restored if something goes wrong.
   2. Run postinst script, if provided by the package.

-r, --remove, -P, --purge package...|-a|--pending
   Remove an installed package.
   -r or --remove remove everything except files listed in the DEBIAN/conffiles
   -P or --purge removes everything, including  conffiles.
   If  -a  or --pending  is given, then all packages marked  to  be  removed or purged   in   file /var/lib/dpkg/status, are removed or purged.

   Removing of a package consists of the following steps:
   1. Run prerm script
   2. Remove the installed files
   3. Run postrm script

 -C, --audit
   Searches for packages that have been installed only partially on your  system.

--print-architecture
   Print  architecture  of packages dpkg installs (for example, "i386").











dpkg-deb actions
   See dpkg-deb(1) for more information about the  following
   actions.

   -b, --build directory [archive|directory]
       Build a deb package.
   -c, --contents archive
       List contents of a deb package.
   -e, --control filename [directory]
       Extract control-information from a package.
   -x, --extract archive directory
       Extract the files contained by package.
   -X, --vextract archive directory
       Extract and display the filenames contained by a
       package.
   -f, --field  archive [control-field...]
       Display control field(s) of a package.
   --fsys-tarfile archive
       Display the filesystem tar-file contained by a
       Debian package.
   -I, --info archive [control-file...]
       Show information about a package.


dpkg-query actions
   See  dpkg-query(1) for more information about the follow‐
   ing actions.


   -l, --list package-name-pattern...
       List packages matching given pattern.
   -s, --status package-name...
       Report status of specified package.
   -L, --listfiles package-name...
       List files installed to your system from package-name.
   -S, --search filename-search-pattern...
       Search for a filename from installed packages.
   -p, --print-avail package-name...
       Display details about package-name, as found in
       /var/lib/dpkg/available. Users of APT-based frontends
       should use apt-cache show package-name instead.

OPTIONS
All options can be specified both on the command line and in the
dpkg  configuration  file /etc/dpkg/dpkg.cfg or the files on the
configuration directory /etc/dpkg/dpkg.cfg.d/. Each line in  the
configuration  file is either an option (exactly the same as the
command line option but without leading dashes) or a comment (if
it starts with a #).

--abort-after=number
   Change after how many errors dpkg will abort. The default
   is 50.

-B, --auto-deconfigure
   When a package is removed, there is  a  possibility  that
   another  installed  package depended on the removed pack‐
   age. Specifying this option will cause  automatic  decon‐
   figuration  of  the package which depended on the removed
   package.

-Doctal, --debug=octal
   Switch debugging on. octal is  formed  by  bitwise-orring
   desired  values  together  from the list below (note that
   these values may  change  in  future  releases).  -Dh  or
   --debug=help display these debugging values.

       Number   Description
            1   Generally helpful progress information
            2   Invocation and status of maintainer scripts
           10   Output for each file processed
          100   Lots of output for each file processed
           20   Output for each configuration file
          200   Lots of output for each configuration file
           40   Dependencies and conflicts
          400   Lots of dependencies/conflicts output
        10000   Trigger activation and processing
        20000   Lots of output regarding triggers
        40000   Silly amounts of output regarding triggers
         1000   Lots of drivel about e.g. the dpkg/info dir
         2000   Insane amounts of drivel

--force-things, --no-force-things, --refuse-things

   Force or refuse (no-force and refuse mean the same thing)
   to do some things. things is a comma  separated  list  of
   things  specified  below. --force-help displays a message
   describing them.  Things marked with (*)  are  forced  by
   default.

   Warning:  These options are mostly intended to be used by
   experts only.  Using  them  without  fully  understanding
   their effects may break your whole system.

   all: Turns on (or off) all force options.

   downgrade(*): Install a package, even if newer version of
   it is already installed.

   Warning: At present  dpkg  does  not  do  any  dependency
   checking on downgrades and therefore will not warn you if
   the downgrade breaks the dependency of some  other  pack‐
   age.  This  can  have  serious  side effects, downgrading
   essential system components can even make your whole sys‐
   tem unusable. Use with care.

   configure-any:  Configure also any unpacked but unconfig‐
   ured packages on which the current package depends.

   hold: Process packages even when marked "hold".

   remove-reinstreq: Remove a package, even if  it's  broken
   and marked to require reinstallation. This may, for exam‐
   ple, cause parts of the package to remain on the  system,
   which will then be forgotten by dpkg.

   remove-essential:  Remove, even if the package is consid‐
   ered essential. Essential packages  contain  mostly  very
   basic  Unix commands. Removing them might cause the whole
   system to stop working, so use with caution.

   depends: Turn all dependency problems into warnings.

   depends-version: Don't care about versions when  checking
   dependencies.

   breaks:  Install,  even if this would break another pack‐
   age.

   conflicts: Install, even if  it  conflicts  with  another
   package.  This  is  dangerous,  for it will usually cause
   overwriting of some files.

   confmiss: Always install a missing conffile. This is dan‐
   gerous, since it means not preserving a change (removing)
   made to the file.

   confnew: If a conffile has been modified  always  install
   the   new   version   without   prompting,   unless   the
   --force-confdef is also  specified,  in  which  case  the
   default action is preferred.

   confold:  If a conffile has been modified always keep the
   old version without prompting, unless the --force-confdef
   is  also  specified,  in which case the default action is
   preferred.

   confdef: If a conffile has been  modified  always  choose
   the default action. If there is no default action it will
   stop  to  ask  the   user   unless   --force-confnew   or
   --force-confold is also been given, in which case it will
   use that to decide the final action.

   confask: If a conffile has been modified always offer  to
   replace  it  with the version in the package, even if the
   version  in  the  package  did  not  change.  If  any  of
   --force-confmiss,  --force-confnew,  --force-confold,  or
   --force-confdef is also given, it will be used to  decide
   the final action.

   overwrite:  Overwrite  one  package's file with another's
   file.

   overwrite-dir  Overwrite  one  package's  directory  with
   another's file.

   overwrite-diverted:  Overwrite  a  diverted  file with an
   undiverted version.

   unsafe-io:  Do  not  perform  safe  I/O  operations  when
   unpacking.  Currently  this  implies  not performing file
   system syncs before file renames, which is known to cause
   substantial performance degradation on some file systems,
   unfortunately the ones that require the safe I/O  on  the
   first  place  due  to  their unreliable behaviour causing
   zero-length files on abrupt system crashes.

   Note: For ext4, the main offender, consider using instead
   the mount option nodelalloc, which will fix both the per‐
   formance degradation and the data safety issues, the lat‐
   ter  by  making  the  file system not produce zero-length
   files on abrupt system  crashes  with  any  software  not
   doing syncs before atomic renames.

   Warning:  Using  this option might improve performance at
   the cost of losing data, use with care.

   architecture: Process even  packages  with  wrong  or  no
   architecture.

   bad-path: PATH is missing important programs, so problems
   are likely.

   not-root: Try to (de)install things even when not root.

   bad-verify: Install a package even if it fails authentic‐
   ity check.


--ignore-depends=package,...
   Ignore  dependency-checking for specified packages (actu‐
   ally, checking is performed, but only warnings about con‐
   flicts are given, nothing else).

--new, --old
   Select  new  or  old  binary  package  format.  This is a
   dpkg-deb(1) option.

--nocheck
   Don't read or check contents of control file while build‐
   ing a package.  This is a dpkg-deb(1) option.

--no-act, --dry-run, --simulate
   Do  everything  which  is  supposed to be done, but don't
   write any changes. This is used to see what would  happen
   with  the  specified  action,  without actually modifying
   anything.

   Be sure to give --no-act before the action-parameter,  or
   you  might  end  up  with undesirable results. (e.g. dpkg
   --purge foo --no-act will first  purge  package  foo  and
   then try to purge package --no-act, even though you prob‐
   ably expected it to actually do nothing)

-R, --recursive
   Recursively handle all  regular  files  matching  pattern
   *.deb  found at specified directories and all of its sub‐
   directories. This can be used  with  -i,  -A,  --install,
   --unpack and --avail actions.

-G     Don't  install  a  package if a newer version of the same
   package  is  already  installed.  This  is  an  alias  of
   --refuse-downgrade.

--admindir=dir
   Change  default  administrative directory, which contains
   many  files  that  give  information  about   status   of
   installed  or  uninstalled  packages,  etc.  (Defaults to
   /var/lib/dpkg)

--instdir=dir
   Change default installation directory which refers to the
   directory  where packages are to be installed. instdir is
   also the directory passed  to  chroot(2)  before  running
   package's  installation  scripts,  which  means  that the
   scripts see instdir as a root directory.  (Defaults to /)

--root=dir
   Changing root changes instdir  to  dir  and  admindir  to
   dir/var/lib/dpkg.

-O, --selected-only
   Only process the packages that are selected for installa‐
   tion. The actual marking is done with dselect or by dpkg,
   when  it handles packages. For example, when a package is
   removed, it will be marked selected for deinstallation.

-E, --skip-same-version
   Don't install the package if  the  same  version  of  the
   package is already installed.

--pre-invoke=command
--post-invoke=command
   Set  an  invoke hook command to be run via “sh -c” before
   or after the dpkg run for the unpack, configure, install,
   triggers-only, remove and purge dpkg actions. This option
   can be specified multiple times. The  order  the  options
   are  specified  is preserved, with the ones from the con‐
   figuration  files  taking  precedence.   The  environment
   variable  DPKG_HOOK_ACTION  is  set  for the hooks to the
   current dpkg action. Note:  front-ends  might  call  dpkg
   several  times  per invocation, which might run the hooks
   more times than expected.

--path-exclude=glob-pattern
--path-include=glob-pattern
   Set glob-pattern as a path filter, either by excluding or
   re-including previously excluded paths matching the spec‐
   ified patterns during install.

   Warning: take into account that depending on the excluded
   paths  you  might  completely break your system, use with
   caution.

   The glob patterns use the  same  wildcards  used  in  the
   shell,  were  '*'  matches  any  sequence  of characters,
   including the empty string and  also  '/'.  For  example,
   '/usr/*/READ*'  matches  '/usr/share/doc/package/README'.
   As  usual,  '?'  matches  any  single  character  (again,
   including  '/').  And '[' starts a character class, which
   can contain a list of characters, ranges and complementa‐
   tions.  See  glob(7) for detailed information about glob‐
   bing. Note: the current implementation  might  re-include
   more  directories  and symlinks than needed, to be on the
   safe side and avoid possible unpack failures, future work
   might fix this.

   This can be used to remove all paths except some particu‐
   lar ones; a typical case is:

   --path-exclude=/usr/share/doc/*
   --path-include=/usr/share/doc/*/copyright

   to remove all documentation files  except  the  copyright
   files.

   These  two  options  can be specified multiple times, and
   interleaved with each other. Both are  processed  in  the
   given  order, with the last rule that matches a file name
   making the decision.

--status-fd n
   Send machine-readable package status and progress  infor‐
   mation to file descriptor n. This option can be specified
   multiple times. The information is generally  one  record
   per line, in one of the following forms:

   status: package: status
          Package status changed; status is as in the status
          file.

   status: package : error : extended-error-message
          An  error  occurred.  Any  possible  newlines   in
          extended-error-message will be converted to spaces
          before output.

   status: file : conffile-prompt  :  'real-old'  'real-new'
   useredited distedited
          User is being asked a conffile question.

   processing: stage: package
          Sent  just before a processing stage starts. stage
          is one  of  upgrade,  install  (both  sent  before
          unpacking),    configure,   trigproc,   disappear,
          remove, purge.

--status-logger=command
   Send machine-readable package status and progress  infor‐
   mation to the shell command's standard input. This option
   can be specified multiple times. The output  format  used
   is the same as in --status-fd.

--log=filename
   Log  status  change  updates  and  actions  to  filename,
   instead of the default /var/log/dpkg.log. If this  option
   is  given  multiple times, the last filename is used. Log
   messages are of  the  form  `YYYY-MM-DD  HH:MM:SS  status
   <state>  <pkg>  <installed-version>'  for  status  change
   updates; `YYYY-MM-DD HH:MM:SS <action> <pkg>  <installed-
   version>  <available-version>' for actions where <action>
   is one of install, upgrade, remove, purge; and  `YYYY-MM-
   DD  HH:MM:SS conffile <filename> <decision>' for conffile
   changes where <decision> is either install or keep.

--no-debsig
   Do not try to verify package signatures.

--no-triggers
   Do not run any triggers in  this  run  (activations  will
   still  be recorded).  If used with --configure package or
   --triggers-only package then the named  package  postinst
   will  still be run even if only a triggers run is needed.
   Use of this option may leave  packages  in  the  improper
   triggers-awaited and triggers-pending states. This can be
   fixed later by running: dpkg --configure --pending.

--triggers
   Cancels a previous --no-triggers.

INFORMATION ABOUT PACKAGES
   PACKAGE STATES
not-installed
   The package is not installed on your system.

config-files
   Only the configuration files of the package exist on the system.

half-installed
   The installation of the package has been started, but  not  com‐
   pleted for some reason.

unpacked
   The package is unpacked, but not configured.

half-configured
   The  package is unpacked and configuration has been started, but
   not yet completed for some reason.

triggers-awaited
   The package awaits trigger processing by another package.

triggers-pending
   The package has been triggered.

installed
   The package is unpacked and configured OK.

   PACKAGE SELECTION STATES
install
   The package is selected for installation.

hold   A package marked to be on hold is not handled  by  dpkg,  unless
   forced to do that with option --force-hold.

deinstall
   The  package  is  selected  for  deinstallation (i.e. we want to
   remove all files, except configuration files).

purge  The package is selected to be purged (i.e.  we  want  to  remove
   everything from system directories, even configuration files).

   PACKAGE FLAGS
reinst-required
   A  package  marked  reinst-required is broken and requires rein‐
   stallation. These packages cannot be removed, unless forced with
   option --force-remove-reinstreq.


FILES
/etc/dpkg/dpkg.cfg
   Configuration file with default options.

/var/log/dpkg.log
   Default log file (see  /etc/dpkg/dpkg.cfg(5)  and  option
   --log).

The  other  files listed below are in their default directories,
see option --admindir to see how to change  locations  of  these
files.

/var/lib/dpkg/available
   List of available packages.

/var/lib/dpkg/status
   Statuses of available packages. This file contains infor‐
   mation about whether a package is marked for removing  or
   not,  whether  it  is  installed or not, etc. See section
   INFORMATION ABOUT PACKAGES for more info.

   The status file is backed up daily  in  /var/backups.  It
   can  be  useful if it's lost or corrupted due to filesys‐
   tems troubles.

The following files are components  of  a  binary  package.  See
deb(5) for more information about them:

control

conffiles

preinst

postinst

prerm

postrm

ENVIRONMENT
HOME   If  set,  dpkg will use it as the directory from which to
   read the user specific configuration file.

TMPDIR If set, dpkg will use it as the  directory  in  which  to
   create temporary files and directories.

PAGER  The  program  dpkg will execute when displaying the conf‐
   files.

SHELL  The program dpkg will execute when starting a new shell.

COLUMNS
   Sets the number of columns dpkg should use when  display‐
   ing formatted text. Currently only used by -l.

DPKG_SHELL_REASON
   Defined  by  dpkg  on  the  shell spawned on the conffile
   prompt to examine the  situation.  Current  valid  value:
   conffile-prompt.

DPKG_CONFFILE_OLD
   Defined  by  dpkg  on  the  shell spawned on the conffile
   prompt to examine the situation. Contains the path to the
   old conffile.

DPKG_CONFFILE_NEW
   Defined  by  dpkg  on  the  shell spawned on the conffile
   prompt to examine the situation. Contains the path to the
   new conffile.

DPKG_RUNNING_VERSION
   Defined  by  dpkg on the maintainer script environment to
   the version of the currently running dpkg instance.

DPKG_MAINTSCRIPT_PACKAGE
   Defined by dpkg on the maintainer script  environment  to
   the package name being handled.

DPKG_MAINTSCRIPT_ARCH
   Defined  by  dpkg on the maintainer script environment to
   the architecture the package got built for.

DPKG_MAINTSCRIPT_NAME
   Defined by dpkg on the maintainer script  environment  to
   the name of the script running (preinst, postinst, prerm,
   postrm).

EXAMPLES
To list packages related to the editor vi(1):
     dpkg -l '*vi*'

To see the entries in /var/lib/dpkg/available of two packages:
     dpkg --print-avail elvis vim | less

To search the listing of packages yourself:
     less /var/lib/dpkg/available

To remove an installed elvis package:
     dpkg -r elvis

To install a package, you first need to find it in an archive or
CDROM.  The  "available"  file  shows that the vim package is in
section "editors":
     cd /media/cdrom/pool/main/v/vim
     dpkg -i vim_4.5-3.deb

To make a local copy of the package selection states:
     dpkg --get-selections >myselections

You might transfer this file to another computer, and install it
there with:
     dpkg --clear-selections
     dpkg --set-selections <myselections

Note that this will not actually install or remove anything, but
just set the selection state on the requested packages. You will
need some other application to actually download and install the
requested packages. For example, run apt-get dselect-upgrade.

Ordinarily, you will find that dselect(1) provides a more conve‐
nient way to modify the package selection states.

ADDITIONAL FUNCTIONALITY
Additional  functionality can be gained by installing any of the
following packages: apt, aptitude and debsums.

SEE ALSO
aptitude(1),  apt(1),  dselect(1),  dpkg-deb(1),  dpkg-query(1),
deb(5), deb-control(5), dpkg.cfg(5), and dpkg-reconfigure(8).

BUGS
--no-act usually gives less information than might be helpful.

AUTHORS
See  /usr/share/doc/dpkg/THANKS  for the list of people who have
contributed to dpkg.



Debian Project                    2011-02-05                           dpkg(1)

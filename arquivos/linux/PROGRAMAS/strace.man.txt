STRACE(1)
2003-01-21

$ nc localhost 1234
retorna um erro.

$ strace nc localhost 1234
retorna todas as funções que foram chamadas
não precisamos do código-fonte da aplicação, nem de símbolos no arquivo binário. Tudo isso funciona através de uma funcionalidade fornecida pelo kernel, chamada de ptrace (http://en.wikipedia.org/wiki/Ptrace)

Análise de performance:
$ strace -c du /home/ubuntu

To monitor a specific program's activity, use strace. Either start the program with strace
strace <program name> <options>

Or, attach strace to an already running process
strace -p <pid of the running process>


NAME
strace - trace system calls and signals

SYNOPSIS
strace [ -ffhiqrtttTvxx ] [ -acolumn ] [ -eexpr ] ... [ -ofile ] [ -ppid ] ... [ -sstrsize ] [ -uusername ] [ -Evar=val ] ... [ -Evar ] ... [ command [ arg ... ] ]

strace -c [ -eexpr ] ... [ -Ooverhead ] [ -Ssortby ] [ command [ arg ... ] ]

DESCRIPTION
It intercepts and records the system calls which are called by a process and the signals which are received by a process.

System call name, its arguments and its return value are printed on standard error or to the file specified with the -o option.
Each line in the trace contains the system call name, followed by its arguments in parentheses and its return value.

Structures are annotated using curly braces.
Structure pointers are dereferenced and the members are displayed as appropriate.
For example, the essence of the command "ls -l /dev/null" is captured as:
lstat("/dev/null", {st_mode=S_IFCHR|0666, st_rdev=makedev(1, 3), ...}) = 0
Notice how the ‘struct stat’ argument is dereferenced and how each member is displayed symbolically. In particular, observe how the st_mode member is carefully decoded into a bitwise-OR of symbolic and numeric values.

Character pointers are dereferenced and printed as C strings. Non-printing characters in strings are normally represented by ordinary C escape
codes. Only the first strsize (32 by default) bytes of strings are printed; longer strings have an ellipsis appended following the closing quote.
Here is a line from "ls -l" where the getpwuid library routine is reading the password file:
read(3, "root::0:0:System Administrator:/"..., 1024) = 422

Arrays are printed using square brackets with commas separating elements.
Here is an example from the command "id" on a system with supplementary group ids:
getgroups(32, [100, 0]) = 2

Bit-sets are shown using square brackets but set elements are separated only by a space.
Here is the shell preparing to execute an external command:
sigprocmask(SIG_BLOCK, [CHLD TTOU], []) = 0
The second argument is a bit-set of two signals, SIGCHLD and SIGTTOU.
In some cases the bit-set is so full that printing out the unset elements is more valuable.
In that case, the bit-set is prefixed by a tilde like this:
sigprocmask(SIG_UNBLOCK, ~[], NULL) = 0
Here the second argument represents the full set of all signals.

OPTIONS
-c
Count time, calls, and errors for each system call and report a summary on program exit.
If -c is used with -f, only aggregate totals for all traced processes are kept.

-f
Trace child processes as they are created by currently traced processes as a result of the fork(2) system call.

-ff
If the -o filename option is in effect, each processes trace is written to filename.pid.

-h
Print the help summary.

-i
Print the instruction pointer at the time of the system call.

-q
Suppress messages about attaching, detaching etc.
This happens automatically when output is redirected to a file and the command is run directly instead of attaching.

-r
Print a relative timestamp upon entry to each system call.
This records the time difference between the beginning of successive system calls.

-t
Prefix each line of the trace with the time of day.

-tt
If given twice, the time printed will include the microseconds.

-ttt
If given thrice, the time printed will include the microseconds and the leading portion will be printed as the number of seconds since the epoch.

-T
Show the time spent in system calls. This records the time difference between the beginning and the end of each system call.

-v
Print unabbreviated versions of environment, stat, termios, etc. calls. These structures are very common in calls and so the default behavior displays a reasonable subset of structure members. Use this option to get all of the gory details.

-V
Print the version number of strace.

-x
Print all non-ASCII strings in hexadecimal string format.

-xx
Print all strings in hexadecimal string format.

-a column
Align return values in a specific column (default column 40).

-e trace=set
Trace only the specified set of system calls.
Ex.:
trace=open,close,read,write
default is trace=all

-e trace=file
Trace all system calls which take a file name as an argument.
You can think of this as an abbreviation for -e trace=open,stat,chmod,unlink,...

-e trace=process
Trace all system calls which involve process management.
This is useful for watching the fork, wait, and exec steps of a process.

-e trace=network
Trace all the network related system calls.

-e trace=signal
Trace all signal related system calls.

-p pid
Attach to the process with the process ID pid and begin tracing.
The trace may be terminated at any time by a keyboard interrupt signal (CTRL-C).
Multiple -p options can be used to attach to up to 32 processes in addition to command.

-s strsize
Specify the maximum string size to print (the default is 32).
Note that filenames are not considered strings and are always printed in full.

SEE ALSO
ltrace(1), ptrace(2)


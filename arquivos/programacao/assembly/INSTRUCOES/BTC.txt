
 BTC – Bit Test and Complement
B-10 Vol. 2B
                                                    INSTRUCTION FORMATS AND ENCODINGS
            Table B-13. General Purpose Instruction Formats and Encodings
                               for Non-64-Bit Modes (Contd.)
             Instruction and Format                            Encoding
 register, immediate                           0000 1111 : 1011 1010 : 11 111 reg: imm8
                                               data
 memory, immediate                             0000 1111 : 1011 1010 : mod 111 r/m : imm8
                                               data
 register1, register2                          0000 1111 : 1011 1011 : 11 reg2 reg1
 memory, reg                                   0000 1111 : 1011 1011 : mod reg r/m
BTR – Bit Test and Reset


BTC—Bit Test and Complement
 Opcode                 Instruction       64-Bit   Compat/       Description
                                          Mode     Leg Mode
 0F BB                  BTC r/m16, r16    Valid    Valid         Store selected bit in CF flag
                                                                 and complement.
 0F BB                  BTC r/m32, r32    Valid    Valid         Store selected bit in CF flag
                                                                 and complement.
 REX.W + 0F BB          BTC r/m64, r64    Valid    N.E.          Store selected bit in CF flag
                                                                 and complement.
 0F BA /7 ib            BTC r/m16, imm8   Valid    Valid         Store selected bit in CF flag
                                                                 and complement.
 0F BA /7 ib            BTC r/m32, imm8   Valid    Valid         Store selected bit in CF flag
                                                                 and complement.
 REX.W + 0F BA /7 ib    BTC r/m64, imm8   Valid    N.E.          Store selected bit in CF flag
                                                                 and complement.
Description
Selects the bit in a bit string (specified with the first operand, called the bit base) at
the bit-position designated by the bit offset operand (second operand), stores the
value of the bit in the CF flag, and complements the selected bit in the bit string. The
bit base operand can be a register or a memory location; the bit offset operand can
be a register or an immediate value:
•   If the bit base operand specifies a register, the instruction takes the modulo 16,
    32, or 64 of the bit offset operand (modulo size depends on the mode and
    register size; 64-bit operands are available only in 64-bit mode). This allows any
    bit position to be selected.
•   If the bit base operand specifies a memory location, the operand represents the
    address of the byte in memory that contains the bit base (bit 0 of the specified
    byte) of the bit string. The range of the bit position that can be referenced by the
    offset operand depends on the operand size.
See also: Bit(BitBase, BitOffset) on page 3-10.
Some assemblers support immediate bit offsets larger than 31 by using the imme-
diate bit offset field in combination with the displacement field of the memory
operand. See “BT—Bit Test” in this chapter for more information on this addressing
mechanism.
This instruction can be used with a LOCK prefix to allow the instruction to be
executed atomically.
In 64-bit mode, the instruction’s default operation size is 32 bits. Using a REX prefix
in the form of REX.R permits access to additional registers (R8-R15). Using a REX
3-96 Vol. 2A                                                      BTC—Bit Test and Complement
                                                             INSTRUCTION SET REFERENCE, A-M
 prefix in the form of REX.W promotes operation to 64 bits. See the summary chart at
 the beginning of this section for encoding data and limits.
 Operation
 CF ←Bit(BitBase, BitOffset);
 Bit(BitBase, BitOffset) ←NOT Bit(BitBase, BitOffset);
 Flags Affected
 The CF flag contains the value of the selected bit before it is complemented. The OF,
 SF, ZF, AF, and PF flags are undefined.
 Protected Mode Exceptions
 #GP(0)                   If the destination operand points to a non-writable segment.
                          If a memory operand effective address is outside the CS, DS,
                          ES, FS, or GS segment limit.
                          If the DS, ES, FS, or GS register contains a NULL segment
                          selector.
 #SS(0)                   If a memory operand effective address is outside the SS
                          segment limit.
 #PF(fault-code)          If a page fault occurs.
 #AC(0)                   If alignment checking is enabled and an unaligned memory
                          reference is made while the current privilege level is 3.
 #UD                      If the LOCK prefix is used but the destination is not a memory
                          operand.
 Real-Address Mode Exceptions
 #GP                      If a memory operand effective address is outside the CS, DS,
                          ES, FS, or GS segment limit.
 #SS                      If a memory operand effective address is outside the SS
                          segment limit.
 #UD                      If the LOCK prefix is used but the destination is not a memory
                          operand.
 Virtual-8086 Mode Exceptions
 #GP(0)                   If a memory operand effective address is outside the CS, DS,
                          ES, FS, or GS segment limit.
 #SS(0)                   If a memory operand effective address is outside the SS
                          segment limit.
 #PF(fault-code)          If a page fault occurs.
BTC—Bit Test and Complement                                                       Vol. 2A 3-97
INSTRUCTION SET REFERENCE, A-M
#AC(0)              If alignment checking is enabled and an unaligned memory
                    reference is made.
#UD                 If the LOCK prefix is used but the destination is not a memory
                    operand.
Compatibility Mode Exceptions
Same exceptions as in protected mode.
64-Bit Mode Exceptions
#SS(0)              If a memory address referencing the SS segment is in a non-
                    canonical form.
#GP(0)              If the memory address is in a non-canonical form.
#PF(fault-code)     If a page fault occurs.
#AC(0)              If alignment checking is enabled and an unaligned memory
                    reference is made while the current privilege level is 3.
#UD                 If the LOCK prefix is used but the destination is not a memory
                    operand.


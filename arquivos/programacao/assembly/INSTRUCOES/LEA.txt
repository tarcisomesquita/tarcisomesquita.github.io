
LEA – Load Effective Address    1000 1101 : mod reg r/m

1000 1101 b = 8D h

8D742600          lea esi,[esi+0x00]
8d7600            lea esi,[esi+0x00]
8DB600000000      lea esi,[esi+0x00]
8D0401            lea eax,[ecx+eax]
8D0417            lea eax,[edi+edx]


mov di,0x7BFF
mov bx,0x0001
lea ax,[di+bx]

ax = 0x7C00


MOV SI,OFFSET VAR1  Eh equivalente a  LEA SI,VAR1


LEA—Load Effective Address

Opcode           Instruction   64-Bit     Compat/      Description
                               Mode       Leg Mode

8D /r            LEA r16,m     Valid      Valid        Store effective address for m in register r16.
8D /r            LEA r32,m     Valid      Valid        Store effective address for m in register r32.
REX.W + 8D /r    LEA r64,m     Valid      N.E.         Store effective address for m in register r64.


Description

Computes the effective address of the second operand (the source operand) and stores it in the first operand (destination operand).

The address-size and operand-size attributes affect the action performed by this instruction, as shown in the following table.

The operand-size attribute of the instruction is determined by the chosen register; the address-size attribute is determined by the attribute of the code segment.


      Table 3-66. Non-64-bit Mode LEA Operation with Address and Operand Size
                                             
   Operand Size       Address Size     Attributes                    Action Performed
                                       16-bit effective address is calculated and stored in
        16                  16
                                       requested 16-bit register destination.
                                       32-bit effective address is calculated. The lower 16 bits of
        16                  32
                                       the address are stored in the requested 16-bit register
                                       destination.
                                       16-bit effective address is calculated. The 16-bit address is
        32                  16
                                       zero-extended and stored in the requested 32-bit register
                                       destination.
                                       32-bit effective address is calculated and stored in the
        32                  32
                                       requested 32-bit register destination.
 Different assemblers may use different algorithms based on the size attribute and
 symbolic reference of the source operand.
 In 64-bit mode, the instruction’s destination operand is governed by operand size
 attribute, the default operand size is 32 bits. Address calculation is governed by
 address size attribute, the default address size is 64-bits. In 64-bit mode, address
 size of 16 bits is not encodable. See Table 3-67.
LEA—Load Effective Address                                                              Vol. 2A 3-575
INSTRUCTION SET REFERENCE, A-M
  Table 3-67. 64-bit Mode LEA Operation with Address and Operand Size Attributes
   Operand Size     Address Size                          Action Performed
                                    32-bit effective address is calculated (using 67H prefix). The
        16                32
                                    lower 16 bits of the address are stored in the requested
                                    16-bit register destination (using 66H prefix).
                                    64-bit effective address is calculated (default address size).
        16                64
                                    The lower 16 bits of the address are stored in the requested
                                    16-bit register destination (using 66H prefix).
                                    32-bit effective address is calculated (using 67H prefix) and
        32                32
                                    stored in the requested 32-bit register destination.
                                    64-bit effective address is calculated (default address size)
        32                64
                                    and the lower 32 bits of the address are stored in the
                                    requested 32-bit register destination.
                                    32-bit effective address is calculated (using 67H prefix),
        64                32
                                    zero-extended to 64-bits, and stored in the requested 64-
                                    bit register destination (using REX.W).
                                    64-bit effective address is calculated (default address size)
        64                64
                                    and all 64-bits of the address are stored in the requested
                                    64-bit register destination (using REX.W).


Operation

IF OperandSize = 16 and AddressSize = 16
    THEN
        DEST ←EffectiveAddress(SRC); (* 16-bit address *)
    ELSE IF OperandSize = 16 and AddressSize = 32
        THEN
             temp ←EffectiveAddress(SRC); (* 32-bit address *)
             DEST ←temp[0:15]; (* 16-bit address *)
        FI;
    ELSE IF OperandSize = 32 and AddressSize = 16
        THEN
             temp ←EffectiveAddress(SRC); (* 16-bit address *)
             DEST ←ZeroExtend(temp); (* 32-bit address *)
        FI;
    ELSE IF OperandSize = 32 and AddressSize = 32
        THEN
             DEST ←EffectiveAddress(SRC); (* 32-bit address *)
        FI;
    ELSE IF OperandSize = 16 and AddressSize = 64
        THEN
             temp ←EffectiveAddress(SRC); (* 64-bit address *)
3-576 Vol. 2A                                                            LEA—Load Effective Address
                                                                INSTRUCTION SET REFERENCE, A-M
              DEST ←temp[0:15]; (* 16-bit address *)
         FI;
     ELSE IF OperandSize = 32 and AddressSize = 64
         THEN
              temp ←EffectiveAddress(SRC); (* 64-bit address *)
              DEST ←temp[0:31]; (* 16-bit address *)
         FI;
     ELSE IF OperandSize = 64 and AddressSize = 64
         THEN
              DEST ←EffectiveAddress(SRC); (* 64-bit address *)
         FI;
 FI;
 Flags Affected
 None.
 Protected Mode Exceptions
 #UD                     If source operand is not a memory location.
                         If the LOCK prefix is used.
 Real-Address Mode Exceptions
 Same exceptions as in protected mode.
 Virtual-8086 Mode Exceptions
 Same exceptions as in protected mode.
 Compatibility Mode Exceptions
 Same exceptions as in protected mode.
 64-Bit Mode Exceptions
 Same exceptions as in protected mode.
LEA—Load Effective Address




10001101    8D3408          LEA ESI,[ECX+EAX]

10001101    8D049B          LEA EAX,[EBX*4+EBX]

10001101 00110100   8D340A          LEA ESI,[ECX+EDX]

10001101    8D3CC1          LEA EDI,[EAX*8+ECX]


10001101 01000110   8D 46 18         LEA EAX,[ESI+18]

10001101 01000101   8D 45 0C         LEA EAX,[EBP+0C]

10001101 01000110   8D 46 14         LEA EAX,[ESI+14]

10001101 01000100 00110000  8D 44 30 18       LEA EAX,[ESI+EAX+18]


10001101 01000100   8D 44 30 02       LEA EAX,[ESI+EAX+2]


10001101 01000100 00100100 8D 44 24 04       LEA EAX,[ESP+4]

10001101 01000100 00001000 8D 44 08 D0       LEA EAX,[ECX+EAX-30]

10001101 01000100 01101101 8D 44 6D 00       LEA EAX,[EBP*2+EBP]

10001101 01000100 10111000 8D 44 B8 44       LEA EAX,[EDI*4+EAX+44]

10001101 01000100 8D 44 90 44       LEA EAX,[EDX*4+EAX+44]

10001101 01000100 8D 44 32 FC       LEA EAX,[ESI+EDX-4]


8D 4C 24 04       LEA ECX,[ESP+4]

8D 4C 02 04       LEA ECX,[EAX+EDX+4]



10001101 01111101   8D 7D 08        LEA EDI,[EBP+8]


10001101    8D8E 4C010000   LEA ECX,[ESI+14C]

10001101    8D85 58F9FFFF   LEA EAX,[EBP-6A8]

10001101    8D85 58F9FFFF   LEA EAX,[EBP-6A8]

10001101    8D85 7CF9FFFF   LEA EAX,[EBP-684]

10001101    8D86 00000880   LEA EAX,[ESI+80080000]

10001101 10000110   8D86 0000F87F   LEA EAX,[ESI+7FF80000]

10001101 10001000   8D88 E0 FF 00 00   LEA ECX,[EAX+0FFE0]


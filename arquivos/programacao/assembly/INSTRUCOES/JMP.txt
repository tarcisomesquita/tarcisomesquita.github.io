
JMP

Sintaxe:
JMP destino

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

JMP – Unconditional Jump (to same segment)
  short                                     1110 1011 : 8-bit displacement
  direct                                    1110 1001 : full displacement
  register indirect                         1111 1111 : 11 100 reg
  memory indirect                           1111 1111 : mod 100 r/m

JMP – Unconditional Jump (to other segment)
  direct intersegment                       1110 1010 : unsigned full offset, selector
  indirect intersegment                     1111 1111 : mod 101 r/m

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =


EXEMPLOS 1110 1011 b = EB h :

8-bit displacement é um signed byte que é somado ao número que está no registrador IP.

Offset   Opcode      Instrucao
7C00     EB48        JMP short  0x7C4A  (48 h = 72 d)
7C0A     EBF4        JMP short  0x7C00  (F4 h = -12 d)

EB FE Forma um loop infinito (tem que reiniciar o computador para sair dele).


EXEMPLOS 1110 1010 b = EA h :

full offset são dois bytes com o endereço
selector são dois bytes com o segmento

Offset   Opcode      Instrucao
7C4B     EA507C0000  JMP word   0x0000:0x7C50


EXEMPLOS 1110 1001 b = E9 h :

Offset   Opcode      Instrucao
7C00     E9FDFF      JMP word  0x7C00

FFFDh = -3 d


EXEMPLOS 1111 1111 b = FF h :

Offset   Opcode      Instrucao
7C00     FF26047C    JMP word near [x7c04]
x7c04: 0x7c00

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

This instruction can be used to execute four different types of jumps:
> Near jump — A jump to an instruction within the current code segment (the
segment currently pointed to by the CS register), sometimes referred to as an
intrasegment jump.
> Short jump — A near jump where the jump range is limited to –128 to +127 from
the current EIP value.
> Far jump — A jump to an instruction located in a different segment than the
current code segment but at the same privilege level, sometimes referred to as
an intersegment jump.
> Task switch — A jump to an instruction located in a different task.
A task switch can only be executed in protected mode


 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

JMP—Jump

Opcode Instruction 64-Bit Mode Compat/   Description
                               Leg Mode
EB cb  JMP rel8    Valid       Valid     Jump short, RIP = RIP + 8-bit displa_
                                         cement sign extended to 64-bits

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Flags Affected
All flags are affected if a task switch occurs;
no flags are affected if a task switch does not occur

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

OPERATION

IF near jump
   IF 64-bit Mode
      THEN
      IF near relative jump
         THEN
         tempRIP ←RIP +DEST; (* RIP is instruction following JMP instruction*)
      ELSE (* Near absolute jump *)
         tempRIP ←DEST;
      FI:
   ELSE
      IF near relative jump
         THEN
         tempEIP ←EIP +DEST; (* EIP is instruction following JMP instruction*)
      ELSE (* Near absolute jump *)
         tempEIP ←DEST;
      FI:
   FI;
   
   IF (IA32_EFER.LMA = 0 or target mode = Compatibility mode) and te0xmpEIP outside code segment limit
      THEN #GP(0);
   FI
   
   IF 64-bit mode and tempRIP is not canonical
      THEN #GP(0);
   FI;
   
   IF OperandSize = 32
      THEN
      EIP ←tempEIP;
   ELSE
      IF OperandSize = 16
         THEN (* OperandSize = 16 *)
         EIP ←tempEIP AND 0000FFFFH;
      ELSE (* OperandSize = 64)
         RIP ←tempRIP;
      FI;
   FI;
FI;

IF far jump and (PE = 0 or (PE = 1 AND VM = 1)) (* Real-address or virtual-8086 mode *)
THEN
   tempEIP ←DEST(Offset); (* DEST is ptr16:32 or [m16:32] *)
   IF tempEIP is beyond code segment limit
   THEN #GP(0);
   FI;
   CS ←DEST(segment selector); (* DEST is ptr16:32 or [m16:32] *)
   IF OperandSize = 32
   THEN
      EIP ←tempEIP; (* DEST is ptr16:32 or [m16:32] *)
   ELSE (* OperandSize = 16 *)
      EIP ←tempEIP AND 0000FFFFH; (* Clear upper 16 bits *)
   FI;
FI;

IF far jump and (PE = 1 and VM = 0)(* IA-32e mode or protected mode, not virtual-8086 mode *)
THEN
   IF effective address in the CS, DS, ES, FS, GS, or SS segment is illegal
       or segment selector in target operand NULL
   THEN #GP(0);
   FI;
   IF segment selector index not within descriptor table limits
   THEN #GP(new selector);
   FI;
   Read type and access rights of segment descriptor;
   IF (EFER.LMA = 0)
   THEN
      IF segment type is not a conforming or nonconforming code
                segment, call gate, task gate, or TSS
      THEN #GP(segment selector);
      FI;
   ELSE
      IF segment type is not a conforming or nonconforming code segment
                    call gate
      THEN #GP(segment selector);
      FI;
   FI;
   Depending on type and access rights:
   GO TO CONFORMING-CODE-SEGMENT;
   GO TO NONCONFORMING-CODE-SEGMENT;
   GO TO CALL-GATE;
   GO TO TASK-GATE;
   GO TO TASK-STATE-SEGMENT;
ELSE
   #GP(segment selector);
FI;

CONFORMING-CODE-SEGMENT:
   IF L-Bit = 1 and D-BIT = 1 and IA32_EFER.LMA = 1
   THEN GP(new code segment selector);
   FI;
   IF DPL > CPL
   THEN #GP(segment selector);
   FI;
   IF segment not present
   THEN #NP(segment selector);
   FI;
   tempEIP ←DEST(Offset);
   IF OperandSize = 16
   THEN tempEIP ←tempEIP AND 0000FFFFH;
   FI;
   IF (IA32_EFER.LMA = 0 or target mode = Compatibility mode) and
       tempEIP outside code segment limit
   THEN #GP(0);
   FI
   IF tempEIP is non-canonical
   THEN #GP(0);
   FI;
   CS ←DEST[segment selector]; (* Segment descriptor information also loaded *)
   CS(RPL) ←CPL
   EIP ←tempEIP;
END;

NONCONFORMING-CODE-SEGMENT:
   IF L-Bit = 1 and D-BIT = 1 and IA32_EFER.LMA = 1
   THEN GP(new code segment selector);
   FI;
   IF (RPL > CPL) OR (DPL ≠ CPL)
   THEN #GP(code segment selector);
   FI;
   IF segment not present
   THEN #NP(segment selector);
   FI;
   tempEIP ←DEST(Offset);
   IF OperandSize = 16
   THEN tempEIP ←tempEIP AND 0000FFFFH;
   FI;
   IF (IA32_EFER.LMA = 0 OR target mode = Compatibility mode)
    and tempEIP outside code segment limit
   THEN #GP(0);
   FI
   IF tempEIP is non-canonical THEN #GP(0);
   FI;
   CS ←DEST[segment selector]; (* Segment descriptor information also loaded *)
   CS(RPL) ←CPL;
   EIP ←tempEIP;
END;

CALL-GATE:
   IF call gate DPL < CPL
    or call gate DPL < call gate segment-selector RPL
   THEN #GP(call gate selector);
   FI;
   IF call gate not present
   THEN #NP(call gate selector);
   FI;
    IF call gate code-segment selector is NULL
         THEN #GP(0); FI;
   IF call gate code-segment selector index outside descriptor table limits
         THEN #GP(code segment selector); FI;
   Read code segment descriptor;
   IF code-segment segment descriptor does not indicate a code segment
   or code-segment segment descriptor is conforming and DPL > CPL
   or code-segment segment descriptor is non-conforming and DPL ≠ CPL
              THEN #GP(code segment selector); FI;
   IF IA32_EFER.LMA = 1 and (code-segment descriptor is not a 64-bit code segment
   or code-segment segment descriptor has both L-Bit and D-bit set)
              THEN #GP(code segment selector); FI;
   IF code segment is not present
         THEN #NP(code-segment selector); FI;
    IF instruction pointer is not within code-segment limit
         THEN #GP(0); FI;
    tempEIP ←DEST(Offset);
    IF GateSize = 16
          THEN tempEIP ←tempEIP AND 0000FFFFH; FI;
   IF (IA32_EFER.LMA = 0 OR target mode = Compatibility mode) AND tempEIP
   outside code segment limit
         THEN #GP(0); FI
   CS ←DEST[SegmentSelector); (* Segment descriptor information also loaded *)
   CS(RPL) ←CPL;
   EIP ←tempEIP;
END;

TASK-GATE:
   IF task gate DPL < CPL
   or task gate DPL < task gate segment-selector RPL
         THEN #GP(task gate selector); FI;
   IF task gate not present
         THEN #NP(gate selector); FI;
   Read the TSS segment selector in the task-gate descriptor;
   IF TSS segment selector local/global bit is set to local
   or index not within GDT limits
   or TSS descriptor specifies that the TSS is busy
         THEN #GP(TSS selector); FI;
    IF TSS not present
         THEN #NP(TSS selector); FI;
    SWITCH-TASKS to TSS;
    IF EIP not within code segment limit
         THEN #GP(0); FI;
END;

TASK-STATE-SEGMENT:
   IF TSS DPL < CPL
    or TSS DPL < TSS segment-selector RPL
    or TSS descriptor indicates TSS not available
         THEN #GP(TSS selector); FI;
    IF TSS is not present
         THEN #NP(TSS selector); FI;
    SWITCH-TASKS to TSS;
    IF EIP not within code segment limit
         THEN #GP(0); FI;
END;


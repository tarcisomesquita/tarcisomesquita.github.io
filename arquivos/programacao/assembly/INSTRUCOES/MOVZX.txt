
MOVZX – Move with Zero-Extend
 register2 to register1       0000 1111 : 1011 011w : 11 reg1 reg2
 memory to register           0000 1111 : 1011 011w : mod reg r/m


 MOVZX—Move with Zero-Extend
  Opcode              Instruction          64-Bit    Compat/         Description
                                           Mode      Leg Mode
  0F B6 /r            MOVZX r16, r/m8      Valid     Valid           Move byte to word with zero-
                                                                     extension.
  0F B6 /r            MOVZX r32, r/m8      Valid     Valid           Move byte to doubleword,
                                                                     zero-extension.
  REX.W + 0F B6 /r    MOVZX r64, r/m8*     Valid     N.E.            Move byte to quadword, zero-
                                                                     extension.
  0F B7 /r            MOVZX r32, r/m16     Valid     Valid           Move word to doubleword,
                                                                     zero-extension.
  REX.W + 0F B7 /r    MOVZX r64, r/m16     Valid     N.E.            Move word to quadword, zero-
                                                                     extension.
  NOTES:
  * In 64-bit mode, r/m8 can not be encoded to access the following byte registers if the REX prefix
    is used: AH, BH, CH, DH.
 Description
 Copies the contents of the source operand (register or memory location) to the desti-
 nation operand (register) and zero extends the value. The size of the converted value
 depends on the operand-size attribute.
 In 64-bit mode, the instruction’s default operation size is 32 bits. Use of the REX.R
 prefix permits access to additional registers (R8-R15). Use of the REX.W prefix
 promotes operation to 64 bit operands. See the summary chart at the beginning of
 this section for encoding data and limits.
 Operation
 DEST ←ZeroExtend(SRC);
 Flags Affected
 None.
 Protected Mode Exceptions
 #GP(0)                   If a memory operand effective address is outside the CS, DS,
                          ES, FS, or GS segment limit.
                          If the DS, ES, FS, or GS register contains a NULL segment
                          selector.
MOVZX—Move with Zero-Extend                                                             Vol. 2A 3-739
INSTRUCTION SET REFERENCE, A-M
#SS(0)              If a memory operand effective address is outside the SS
                    segment limit.
#PF(fault-code)     If a page fault occurs.
#AC(0)              If alignment checking is enabled and an unaligned memory
                    reference is made while the current privilege level is 3.
#UD                 If the LOCK prefix is used.
Real-Address Mode Exceptions
#GP                 If a memory operand effective address is outside the CS, DS,
                    ES, FS, or GS segment limit.
#SS                 If a memory operand effective address is outside the SS
                    segment limit.
#UD                 If the LOCK prefix is used.
Virtual-8086 Mode Exceptions
#GP(0)              If a memory operand effective address is outside the CS, DS,
                    ES, FS, or GS segment limit.
#SS(0)              If a memory operand effective address is outside the SS
                    segment limit.
#PF(fault-code)     If a page fault occurs.
#AC(0)              If alignment checking is enabled and an unaligned memory
                    reference is made.
#UD                 If the LOCK prefix is used.
Compatibility Mode Exceptions
Same exceptions as in protected mode.
64-Bit Mode Exceptions
#SS(0)              If a memory address referencing the SS segment is in a non-
                    canonical form.
#GP(0)              If the memory address is in a non-canonical form.
#PF(fault-code)     If a page fault occurs.
#AC(0)              If alignment checking is enabled and an unaligned memory
                    reference is made while the current privilege level is 3.
#UD                 If the LOCK prefix is used.
3-740 Vol. 2A




Operation

IF near call
   THEN
   IF near relative call ; (indirect?)
      THEN
      IF OperandSize = 64
         THEN
         tempDEST ←SignExtend(DEST); (* DEST is rel32 *)
         tempRIP ←RIP +tempDEST;
         IF stack not large enough for a 8-byte return address
            THEN
            #SS(0);
         FI;
         Push(RIP);
         RIP ←tempRIP;
      FI;
      IF OperandSize = 32
         THEN
         tempEIP ←EIP +DEST; (* DEST is rel32 *)
         IF tempEIP is not within code segment limit
            THEN
            #GP(0);
         FI;
         IF stack not large enough for a 4-byte return address
            THEN
            #SS(0);
         FI;
         Push(EIP);
         EIP ←tempEIP;
      FI;
      IF OperandSize = 16
         THEN
         tempEIP ←(EIP +DEST) AND 0000FFFFH; (* DEST is rel16 *)
         IF tempEIP is not within code segment limit
            THEN
            #GP(0);
         FI;
         IF stack not large enough for a 2-byte return address
            THEN
            #SS(0);
         FI;
         Push(IP);
         EIP ←tempEIP;
      FI;
   ELSE (* Near absolute call *) ; (direct?)
      IF OperandSize = 64
         THEN
         tempRIP ←DEST; (* DEST is r/m64 *)
         IF stack not large enough for a 8-byte return address
            THEN
            #SS(0);
         FI;
         Push(RIP);
         RIP ←tempRIP;
      FI;
      IF OperandSize = 32
         THEN
         tempEIP ←DEST; (* DEST is r/m32 *)
         IF tempEIP is not within code segment limit
            THEN
            #GP(0);
         FI;
         IF stack not large enough for a 4-byte return address
            THEN
            #SS(0);
         FI;
         Push(EIP);
         EIP ←tempEIP;
      FI;
      IF OperandSize = 16
         THEN
         tempEIP ←DEST AND 0000FFFFH; (* DEST is r/m16 *)
         IF tempEIP is not within code segment limit
            THEN
            #GP(0);
         FI;
         IF stack not large enough for a 2-byte return address
            THEN
            #SS(0);
         FI;
         Push(IP);
         EIP ←tempEIP;
      FI;
   FI;rel/abs
FI; near
IF far call and (PE = 0 or (PE = 1 and VM = 1)) (* Real-address or virtual-8086 mode *)
   THEN
   IF OperandSize = 32
      THEN
      IF stack not large enough for a 6-byte return address
         THEN
         #SS(0);
      FI;
      IF DEST[31:16] is not zero
         THEN
         #GP(0);
      FI;
      Push(CS); (* Padded with 16 high-order bits *)
      Push(EIP);
      CS ←DEST[47:32]; (* DEST is ptr16:32 or [m16:32] *)
      EIP ←DEST[31:0]; (* DEST is ptr16:32 or [m16:32] *)
   ELSE (* OperandSize = 16 *)
      IF stack not large enough for a 4-byte return address
         THEN
         #SS(0);
      FI;
      Push(IP);
      CS ←DEST[31:16]; (* DEST is ptr16:16 or [m16:16] *)
      EIP ←DEST[15:0]; (* DEST is ptr16:16 or [m16:16]; clear upper 16 bits *)
   FI;
FI;
IF far call and (PE = 1 and VM = 0) (* Protected mode or IA-32e Mode, not virtual-8086 mode*)
   THEN
   IF segment selector in target operand NULL
      THEN
      #GP(0);
   FI;
   IF segment selector index not within descriptor table limits
      THEN
      #GP(new code segment selector);
   FI;
   Read type and access rights of selected segment descriptor;
   IF IA32_EFER.LMA = 0
      THEN
      IF segment type is not a conforming or nonconforming code segment, call gate, task gate, or TSS
         THEN
         #GP(segment selector);
      FI;
   ELSE
      IF segment type is not a conforming or nonconforming code segment or 64-bit call gate,
         THEN
         #GP(segment selector);
      FI;
   FI;
   Depending on type and access rights: ; (indirect?)
   GO TO CONFORMING-CODE-SEGMENT;
   GO TO NONCONFORMING-CODE-SEGMENT;
   GO TO CALL-GATE;
   GO TO TASK-GATE;
   GO TO TASK-STATE-SEGMENT;
FI;


CONFORMING-CODE-SEGMENT:

 IF L-Bit = 1 and D-BIT = 1 and IA32_EFER.LMA = 1
    THEN
    GP(new code segment selector);
 FI;
 IF DPL > CPL
    THEN
    #GP(new code segment selector);
 FI;
 IF segment not present
    THEN
    #NP(new code segment selector);
 FI;
 IF stack not large enough for return address
    THEN
    #SS(0);
 FI;
 tempEIP ←DEST(Offset);
 IF OperandSize = 16
    THEN
    tempEIP ←tempEIP AND 0000FFFFH; FI; (* Clear upper 16 bits *)
 IF (EFER.LMA = 0 or target mode = Compatibility mode) and (tempEIP outside new code segment limit)
    THEN
    #GP(0);
 FI;
 IF tempEIP is non-canonical
    THEN
    #GP(0);
 FI;
 IF OperandSize = 32
    THEN
    Push(CS); (* Padded with 16 high-order bits *)
    Push(EIP);
    CS ←DEST(CodeSegmentSelector);
    (* Segment descriptor information also loaded *)
    CS(RPL) ←CPL;
    EIP ←tempEIP;
 ELSE
    IF OperandSize = 16
       THEN
       Push(CS);
       Push(IP);
       CS ←DEST(CodeSegmentSelector);
       (* Segment descriptor information also loaded *)
       CS(RPL) ←CPL;
       EIP ←tempEIP;
    ELSE (* OperandSize = 64 *)
       Push(CS); (* Padded with 48 high-order bits *)
       Push(RIP);
       CS ←DEST(CodeSegmentSelector);
       (* Segment descriptor information also loaded *)
       CS(RPL) ←CPL;
       RIP ←tempEIP;
    FI;
 FI;
END;


NONCONFORMING-CODE-SEGMENT:

 IF L-Bit = 1 and D-BIT = 1 and IA32_EFER.LMA = 1
    THEN
    GP(new code segment selector);
 FI;
 IF (RPL > CPL) or (DPL 1⁄4 CPL)
    THEN
    #GP(new code segment selector);
 FI;
 IF segment not present
    THEN
    #NP(new code segment selector);
 FI;
 IF stack not large enough for return address
    THEN
    #SS(0);
 FI;
 tempEIP ←DEST(Offset);
 IF OperandSize = 16
    THEN
    tempEIP ←tempEIP AND 0000FFFFH;
 FI; (* Clear upper 16 bits *)
 IF (EFER.LMA = 0 or target mode = Compatibility mode) and (tempEIP outside new code segment limit)
    THEN
    #GP(0);
 FI;
 IF tempEIP is non-canonical
    THEN
    #GP(0);
 FI;
 IF OperandSize = 32
    THEN
    Push(CS); (* Padded with 16 high-order bits *)
    Push(EIP);
    CS ←DEST(CodeSegmentSelector);
    (* Segment descriptor information also loaded *)
    CS(RPL) ←CPL;
    EIP ←tempEIP;
 ELSE
    IF OperandSize = 16
       THEN
       Push(CS);
       Push(IP);
       CS ←DEST(CodeSegmentSelector);
       (* Segment descriptor information also loaded *)
       CS(RPL) ←CPL;
       EIP ←tempEIP;
    ELSE (* OperandSize = 64 *)
       Push(CS); (* Padded with 48 high-order bits *)
       Push(RIP);
       CS ←DEST(CodeSegmentSelector);
       (* Segment descriptor information also loaded *)
       CS(RPL) ←CPL;
       RIP ←tempEIP;
    FI;
 FI;
END;


CALL-GATE:

 IF call gate (DPL < CPL) or (RPL > DPL)
    THEN
    #GP(call gate selector);
 FI;
 IF call gate not present
    THEN
    #NP(call gate selector);
 FI;
 IF call gate code-segment selector is NULL
    THEN
    #GP(0);
 FI;
 IF call gate code-segment selector index is outside descriptor table limits
    THEN
    #GP(code segment selector);
 FI;
 Read code segment descriptor;
 IF code-segment segment descriptor does not indicate a code segment or code-segment segment descriptor DPL > CPL
    THEN
    #GP(code segment selector);
 FI;
 IF IA32_EFER.LMA = 1 AND (code-segment segment descriptor is not a 64-bit code segment or code-segment descriptor has both L-Bit and D-bit set)
    THEN
    #GP(code segment selector);
 FI;
 IF code segment not present
    THEN
    #NP(new code segment selector);
 FI;
 IF code segment is non-conforming and DPL < CPL
    THEN
    go to MORE-PRIVILEGE;
 ELSE
    go to SAME-PRIVILEGE;
 FI;
END;


MORE-PRIVILEGE:

 IF current TSS is 32-bit TSS
    THEN
    TSSstackAddress ←new code segment (DPL ∗ 8) +4;
    IF (TSSstackAddress +7) > TSS limit
       THEN
       #TS(current TSS selector);
    FI;
    newSS ←TSSstackAddress +4;
    newESP ←stack address;
 ELSE
    IF current TSS is 16-bit TSS
       THEN
       TSSstackAddress ←new code segment (DPL ∗ 4) +2;
       IF (TSSstackAddress +4) > TSS limit
          THEN
          #TS(current TSS selector);
       FI;
       newESP ←TSSstackAddress;
       newSS ←TSSstackAddress +2;
    ELSE (* TSS is 64-bit *)
       TSSstackAddress ←new code segment (DPL ∗ 8) +4;
       IF (TSSstackAddress +8) > TSS limit
          THEN
          #TS(current TSS selector);
       FI;
       newESP ←TSSstackAddress;
       newSS ←NULL;
    FI;
 FI;
 IF IA32_EFER.LMA = 0 and stack segment selector = NULL
    THEN
    #TS(stack segment selector);
 FI;
 Read code segment descriptor;
 IF IA32_EFER.LMA = 0 and (stack segment selector's RPL 1⁄4 DPL of code segment or stack segment DPL 1⁄4 DPL of code segment or stack segment is not a writable data segment)
    THEN
    #TS(SS selector);
 FI
 IF IA32_EFER.LMA = 0 and stack segment not present
    THEN
    #SS(SS selector);
 FI;
 IF CallGateSize = 32
    THEN
    IF stack does not have room for parameters plus 16 bytes
       THEN 
       #SS(SS selector);
    FI;
    IF CallGate(InstructionPointer) not within code segment limit
       THEN
       #GP(0);
    FI;
    SS ←newSS;
    (* Segment descriptor information also loaded *)
    ESP ←newESP;
    CS:EIP ←CallGate(CS:InstructionPointer);
    (* Segment descriptor information also loaded *)
    Push(oldSS:oldESP); (* From calling procedure *)
    temp ←parameter count from call gate, masked to 5 bits;
    Push(parameters from calling procedure’s stack, temp)
    Push(oldCS:oldEIP); (* Return address to calling procedure *)
 ELSE
    IF CallGateSize = 16
       THEN
       IF stack does not have room for parameters plus 8 bytes
          THEN
          #SS(SS selector);
       FI;
       IF (CallGate(InstructionPointer) AND FFFFH) not in code segment limit
          THEN
          #GP(0);
       FI;
       SS ←newSS;
       (* Segment descriptor information also loaded *)
       ESP ←newESP;
       CS:IP ←CallGate(CS:InstructionPointer);
       (* Segment descriptor information also loaded *)
       Push(oldSS:oldESP); (* From calling procedure *)
       temp ←parameter count from call gate, masked to 5 bits;
       Push(parameters from calling procedure’s stack, temp)
       Push(oldCS:oldEIP); (* Return address to calling procedure *)
    ELSE (* CallGateSize = 64 *)
       IF pushing 32 bytes on the stack touches non-canonical addresses
          THEN
          #SS(SS selector);
       FI;
       IF (CallGate(InstructionPointer) is non-canonical)
          THEN
          #GP(0);
       FI;
       SS ←newSS; (* New SS is NULL)
       RSP ←newESP;
       CS:IP ←CallGate(CS:InstructionPointer);
       (* Segment descriptor information also loaded *)
       Push(oldSS:oldESP); (* From calling procedure *)
       Push(oldCS:oldEIP); (* Return address to calling procedure *)
    FI;
 FI;
 CPL ←CodeSegment(DPL)
 CS(RPL) ←CPL
END;


SAME-PRIVILEGE:

 IF CallGateSize = 32
    THEN
    IF stack does not have room for 8 bytes
       THEN
       #SS(0);
    FI;
    IF CallGate(InstructionPointer) not within code segment limit
       THEN
       #GP(0);
    FI;
    CS:EIP ←CallGate(CS:EIP) (* Segment descriptor information also loaded *)
    Push(oldCS:oldEIP); (* Return address to calling procedure *)
 ELSE
    IF CallGateSize = 16
       THEN
       IF stack does not have room for 4 bytes
          THEN
          #SS(0);
       FI;
       IF CallGate(InstructionPointer) not within code segment limit
          THEN
          #GP(0);
       FI;
       CS:IP ←CallGate(CS:instruction pointer);
       (* Segment descriptor information also loaded *)
       Push(oldCS:oldIP); (* Return address to calling procedure *)
    ELSE (* CallGateSize = 64)
       IF pushing 16 bytes on the stack touches non-canonical addresses
          THEN
          #SS(0);
       FI;
       IF RIP non-canonical
          THEN
          #GP(0);
       FI;
       CS:IP ←CallGate(CS:instruction pointer);
       (* Segment descriptor information also loaded *)
       Push(oldCS:oldIP); (* Return address to calling procedure *)
    FI;
 FI;
 CS(RPL) ←CPL
END;


TASK-GATE:

 IF task gate DPL < CPL or RPL
    THEN
    #GP(task gate selector);
 FI;
 IF task gate not present
    THEN
    #NP(task gate selector);
 FI;
 Read the TSS segment selector in the task-gate descriptor;
 IF TSS segment selector local/global bit is set to local or index not within GDT limits
    THEN
    #GP(TSS selector);
 FI;
 Access TSS descriptor in GDT;
 IF TSS descriptor specifies that the TSS is busy (low-order 5 bits set to 00001)
    THEN
    #GP(TSS selector);
 FI;
 IF TSS not present
    THEN
    #NP(TSS selector);
 FI;
 SWITCH-TASKS (with nesting) to TSS;
 IF EIP not within code segment limit
    THEN
    #GP(0);
 FI;
END;


TASK-STATE-SEGMENT:

 IF TSS DPL < CPL or RPL or TSS descriptor indicates TSS not available
    THEN
    #GP(TSS selector);
 FI;
 IF TSS is not present
    THEN
    #NP(TSS selector);
 FI;
 SWITCH-TASKS (with nesting) to TSS;
 IF EIP not within code segment limit
    THEN
    #GP(0);
 FI;
END;


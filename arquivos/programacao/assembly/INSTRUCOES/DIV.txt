
DIV – Unsigned Divide
 AL, AX, or EAX by register 1111 011w : 11 110 reg
 AL, AX, or EAX by memory   1111 011w : mod 110 r/m

Exemplo:
66 F734   div dword [si]

48 f7 f3   div    rbx
48 f7 f1   div    rcx
49 f7 f9   idiv   r9

mov    rdx, 0x0000000000000000
mov    rax, 0x401
mov    rcx, 0x2
div    rcx


DIV—Unsigned Divide

  Opcode             Instruction   64-Bit    Compat/         Description
                                   Mode      Leg Mode

  F6 /6              DIV r/m8      Valid     Valid           Unsigned divide AX by r/m8, with
                                                             result stored in AL ←Quotient, AH ←
                                                             Remainder.
  REX + F6 /6        DIV r/m8*     Valid     N.E.            Unsigned divide AX by r/m8, with
                                                             result stored in AL ←Quotient, AH ←
                                                             Remainder.
  F7 /6              DIV r/m16     Valid     Valid           Unsigned divide DX:AX by r/m16, with
                                                             result stored in AX ←Quotient, DX ←
                                                             Remainder.
  F7 /6              DIV r/m32     Valid     Valid           Unsigned divide EDX:EAX by r/m32,
                                                             with result stored in EAX ←Quotient,
                                                             EDX ←Remainder.
  REX.W + F7 /6      DIV r/m64     Valid     N.E.            Unsigned divide RDX:RAX by r/m64,
                                                             with result stored in RAX ←Quotient,
                                                             RDX ←Remainder.
  NOTES:
  * In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is
    used: AH, BH, CH, DH.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Description

   Divides unsigned the value in the AX, DX:AX, EDX:EAX, or RDX:RAX registers (dividend) by the source operand (divisor) and stores the result in the AX (AH:AL), DX:AX, EDX:EAX, or RDX:RAX registers. The source operand can be a general-purpose register or a memory location. The action of this instruction depends on the operand size (dividend/divisor). Division using 64-bit operand is available only in 64-bit mode.
   Non-integral results are truncated (chopped) towards 0. The remainder is always less than the divisor in magnitude. Overflow is indicated with the #DE (divide error) exception rather than with the CF flag.
   In 64-bit mode, the instruction’s default operation size is 32 bits. Use of the REX.R prefix permits access to additional registers (R8-R15). Use of the REX.W prefix promotes operation to 64 bits. In 64-bit mode when REX.W is applied, the instruction divides the unsigned value in RDX:RAX by the source operand and stores the quotient in RAX, the remainder in RDX.
   See the summary chart at the beginning of this section for encoding data and limits.
   See Table 3-28.

                                     Table 3-28. DIV Action
                                                                              Maximum
 Operand Size                Dividend     Divisor   Quotient     Remainder    Quotient
 Word/byte                   AX           r/m8      AL           AH           255
 Doubleword/word             DX:AX        r/m16     AX           DX           65,535
 Quadword/doubleword         EDX:EAX      r/m32     EAX          EDX          2^32 - 1
 Doublequadword/             RDX:RAX      r/m64     RAX          RDX          2^64 - 1
 quadword

Exemplo:
mov	eax, 14
mov	ecx, 4
mov	edx, 0
div	ecx

divide 14 por 4, guarda o resultado em eax e o resto em edx. Após a divisão temos eax = 3; ecx = 4 ; edx = 2;

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Operation

// Divide Error
IF SRC = 0; THEN #DE; FI;

// Word/Byte Operation
IF OperandSize = 8; THEN
   temp ←AX / SRC;
   // Divide error
   IF temp > FFH; THEN #DE;
   ELSE
      AL ←temp;
      AH ←AX MOD SRC;
   FI;
ELSE IF OperandSize = 16 (* Doubleword/word operation *)
   THEN
   temp ←DX:AX / SRC;
   IF temp > FFFFH
      THEN
      #DE; (* Divide error *)
   ELSE
      AX ←temp;
      DX ←DX:AX MOD SRC;
   FI;
ELSE IF Operandsize = 32 (* Quadword/doubleword operation *)
   THEN
   temp ←EDX:EAX / SRC;
   IF temp > FFFFFFFFH
      THEN
      #DE; (* Divide error *)
   ELSE
      EAX ←temp;
      EDX ←EDX:EAX MOD SRC;
   FI;
ELSE IF 64-Bit Mode and Operandsize = 64 (* Doublequadword/quadword operation *)
   THEN
   temp ←RDX:RAX / SRC;
   // Divide Error
   IF temp > FFFFFFFFFFFFFFFFH; THEN #DE;
   ELSE
      RAX ←temp;
      RDX ←RDX:RAX MOD SRC;
   FI;
FI;

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

 Flags Affected

 The CF, OF, SF, ZF, AF, and PF flags are undefined.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

 Protected Mode Exceptions

 #DE                     If the source operand (divisor) is 0
                         If the quotient is too large for the designated register.
 #GP(0)                  If a memory operand effective address is outside the CS, DS,
                         ES, FS, or GS segment limit.
                         If the DS, ES, FS, or GS register contains a NULL segment
                         selector.
 #SS(0)                  If a memory operand effective address is outside the SS
                         segment limit.
 #PF(fault-code)         If a page fault occurs.
 #AC(0)                  If alignment checking is enabled and an unaligned memory
                         reference is made while the current privilege level is 3.
 #UD                     If the LOCK prefix is used.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

 Real-Address Mode Exceptions

 #DE                     If the source operand (divisor) is 0.
                         If the quotient is too large for the designated register.
 #GP                     If a memory operand effective address is outside the CS, DS,
                         ES, FS, or GS segment limit.
                         If the DS, ES, FS, or GS register contains a NULL segment
                         selector.
 #SS(0)                  If a memory operand effective address is outside the SS
                         segment limit.
 #UD                     If the LOCK prefix is used.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Virtual-8086 Mode Exceptions

#DE                 If the source operand (divisor) is 0.
                    If the quotient is too large for the designated register.
#GP(0)              If a memory operand effective address is outside the CS, DS,
                    ES, FS, or GS segment limit.
#SS                 If a memory operand effective address is outside the SS
                    segment limit.
#PF(fault-code)     If a page fault occurs.
#AC(0)              If alignment checking is enabled and an unaligned memory
                    reference is made.
#UD                 If the LOCK prefix is used.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Compatibility Mode Exceptions

Same exceptions as in protected mode.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

64-Bit Mode Exceptions

#SS(0)              If a memory address referencing the SS segment is in a non-
                    canonical form.
#GP(0)              If the memory address is in a non-canonical form.
#DE                 If the source operand (divisor) is 0
                    If the quotient is too large for the designated register.
#PF(fault-code)     If a page fault occurs.
#AC(0)              If alignment checking is enabled and an unaligned memory
                    reference is made while the current privilege level is 3.
#UD                 If the LOCK prefix is used.


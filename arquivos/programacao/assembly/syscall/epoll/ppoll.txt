
#include <poll.h>
int ppoll(struct pollfd *fds, nfds_t nfds, const struct timespec *timeout_ts, const sigset_t *sigmask);

ppoll() allows an application to safely wait until either a file descriptor becomes ready or until a signal is caught.
See also pselect(2).

// #include<signal.h>
// Get and/or change the set of blocked signals.
extern int sigprocmask (int __how, __const sigset_t *__restrict __set, sigset_t *__restrict __oset) __THROW;

ready = ppoll(&fds, nfds, timeout_ts, &sigmask);
is equivalent to atomically executing the following calls:
sigset_t origmask;
int timeout;

timeout = (timeout_ts == NULL) ? -1 : (timeout_ts.tv_sec * 1000 + timeout_ts.tv_nsec / 1000000);
sigprocmask(SIG_SETMASK, &sigmask, &origmask);
ready = poll(&fds, nfds, timeout);
sigprocmask(SIG_SETMASK, &origmask, NULL);

If the sigmask argument is specified as NULL, then no signal mask manipulation is performed (and thus ppoll() differs from poll() only in the precision of the timeout argument).

The timeout_ts argument specifies an upper limit on the amount of time that ppoll() will block.  This argument is a pointer to a structure of the following form:

struct timespec {
   long tv_sec;         /* seconds */
   long tv_nsec;        /* nanoseconds */
};

If timeout_ts is specified as NULL, then ppoll() can block indefinitely.

RETURN VALUE
       On success, a positive number is returned; this is the number of structures which have nonzero revents fields (in other words, those descriptors with events or errors reported).  A value of 0 indicates that the call timed out and no file descriptors were ready.  On error, -1 is returned, and errno is set appropriately.

ERRORS
       EFAULT The array given as argument was not contained in the calling program's address space.
       EINTR  A signal occurred before any requested event; see signal(7).
       EINVAL The nfds value exceeds the RLIMIT_NOFILE value.
       ENOMEM There was no space to allocate file descriptor tables.


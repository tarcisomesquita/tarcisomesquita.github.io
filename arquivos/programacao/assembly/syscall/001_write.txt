# . 001_write.txt > 001_write.elf && chmod +x 001_write.elf && strace -f -i -X verbose ./001_write.elf

# bytes                                           # label                # offset Comentário

                                                  # ehdr:
echo -n -e '\x7FELF'                              # e_ident_0_3:         # 0x0000
echo -n -e '\x02'                                 # e_ident_4:           # 0x0004 64-bit objects
echo -n -e '\x01'                                 # e_ident_5:           # 0x0005 Litle Endian
echo -n -e '\x01'                                 # e_ident_6:           # 0x0006 Current version
echo -n -e '\x03'                                 # e_ident_7:           # 0x0007 OS Linux
echo -n -e '\x00\x00\x00\x00\x00\x00\x00\x00'     # e_ident_8_15:        # 0x0008 não é usado
echo -n -e '\x02\x00'                             # e_type:              # 0x0010 Executable file
echo -n -e '\x3E\x00'                             # e_machine:           # 0x0012 x86-64
echo -n -e '\x01\x00\x00\x00'                     # e_version:           # 0x0014 Current version
echo -n -e '\xB0\x00\x40\x00\x00\x00\x00\x00'     # e_entry:             # 0x0018 Entry point          # 0x00000000004000B0
echo -n -e '\x40\x00\x00\x00\x00\x00\x00\x00'     # e_phoff:             # 0x0020 Program Header table # 0x0000000000000040
echo -n -e '\x00\x00\x00\x00\x00\x00\x00\x00'     # e_shoff:             # 0x0028 Section Header table # 0x0000000000000000
echo -n -e '\x00\x00\x00\x00'                     # e_flags:             # 0x0030 no flags
echo -n -e '\x40\x00'                             # e_ehsize:            # 0x0034 Tamanho do Elf Header
echo -n -e '\x38\x00'                             # e_phentsize:         # 0x0036 Tamanho de uma linha da tabela Program Header
echo -n -e '\x02\x00'                             # e_phnum:             # 0x0038 Quantas linhas tem a tabela Program Header
echo -n -e '\x40\x00'                             # e_shentsize:         # 0x003A Tamanho de uma linha da tabela Section Header
echo -n -e '\x00\x00'                             # e_shnum:             # 0x003C Quantas linhas tem a tabela Section Header.
echo -n -e '\x00\x00'                             # e_shstrndx:          # 0x003E Linha da tabela Section Header com o offset da Section .shstrtab


                                                  # phdr:

                                                                         # .text
echo -n -e '\x01\x00\x00\x00'                     # p_type____00:        # 0x0040 Loadable segment
echo -n -e '\x05\x00\x00\x00'                     # p_flags___00:        # 0x0044 Permissions to segment (1=executar, 2=escrever, 4=ler)
echo -n -e '\x00\x00\x00\x00\x00\x00\x00\x00'     # p_offset__00:        # 0x0048 Segment file offset
echo -n -e '\x00\x00\x40\x00\x00\x00\x00\x00'     # p_vaddr___00:        # 0x0050 Segment virtual address
echo -n -e '\x00\x00\x40\x00\x00\x00\x00\x00'     # p_paddr___00:        # 0x0058 Segment physical address
echo -n -e '\x00\x10\x00\x00\x00\x00\x00\x00'     # p_filesz__00:        # 0x0060 Segment size in file     # 0x0000000000001000
echo -n -e '\x00\x10\x00\x00\x00\x00\x00\x00'     # p_memsz___00:        # 0x0068 Segment size in memory   # 0x0000000000001000
echo -n -e '\x00\x10\x00\x00\x00\x00\x00\x00'     # p_align___00:        # 0x0070 Segment alignment, file & memory

                                                                         # .data
echo -n -e '\x01\x00\x00\x00'                     # p_type____01:        # 0x0078 Loadable segment
echo -n -e '\x06\x00\x00\x00'                     # p_flags___01:        # 0x007C Permissions to segment (1=executar, 2=escrever, 4=ler)
echo -n -e '\x00\x10\x00\x00\x00\x00\x00\x00'     # p_offset__01:        # 0x0080 Segment file offset
echo -n -e '\x00\x10\x40\x00\x00\x00\x00\x00'     # p_vaddr___01:        # 0x0088 Segment virtual address
echo -n -e '\x00\x10\x40\x00\x00\x00\x00\x00'     # p_paddr___01:        # 0x0090 Segment physical address
echo -n -e '\x10\x00\x00\x00\x00\x00\x00\x00'     # p_filesz__01:        # 0x0098 Segment size in file     # 0x0000000000000010
echo -n -e '\x10\x00\x00\x00\x00\x00\x00\x00'     # p_memsz___01:        # 0x00A0 Segment size in memory   # 0x0000000000000010
echo -n -e '\x00\x10\x00\x00\x00\x00\x00\x00'     # p_align___01:        # 0x00A8 Segment alignment, file & memory


# .text
echo -n -e '\xba\x0c\x00\x00\x00'  # mov    edx, 0x00000001  # quantidade de bytes da string
echo -n -e '\xbe\x00\x10\x40\x00'  # mov    esi, 0x00000001  # endereço da string
echo -n -e '\xbf\x01\x00\x00\x00'  # mov    edi, 0x00000001  # file descriptor ; stdout = 1 ; err = 2
echo -n -e '\xb8\x01\x00\x00\x00'  # mov    eax, 0x00000001  # syscall write
echo -n -e '\x0f\x05'              # syscall

echo -n -e '\xbf\x01\x00\x00\x00'  # mov    edi, 0x00000001  # valor a ser retornado
echo -n -e '\xb8\xe7\x00\x00\x00'  # mov    eax, 0x000000e7  # syscall exit_group
echo -n -e '\x0f\x05'              # syscall

# o código acima tem 34 bytes
for ((N = 0; N < (0x1000 - 0xB0 - 34); N++)); do echo -n -e '\x90'; done

# .data
echo -n -e 'HEllo world\n\x00\x00\x00\x00'                # 0x00401000 string

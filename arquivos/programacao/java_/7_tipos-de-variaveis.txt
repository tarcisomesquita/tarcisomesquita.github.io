int speed = 0;

the terms "field" and "variable" are both used; both often seem to refer to the same thing.

kinds of variables:

    * Instance Variables (Non-Static Fields): Objects store their individual states in "non-static fields", that is, fields declared without the static keyword. Non-static fields are also known as instance variables because their values are unique to each instance of a class (to each object, in other words); the currentSpeed of one bicycle is independent from the currentSpeed of another.
    * Class Variables (Static Fields): A class variable is any field declared with the static modifier; this tells the compiler that there is exactly one copy of this variable in existence, regardless of how many times the class has been instantiated. A field defining the number of gears for a particular kind of bicycle could be marked as static since conceptually the same number of gears will apply to all instances. The code static int numGears = 6; would create such a static field. Additionally, the keyword final could be added to indicate that the number of gears will never change.
    * Local Variables: Similar to how an object stores its state in fields, a method will often store its temporary state in local variables. The syntax for declaring a local variable is similar to declaring a field (for example, int count = 0;). There is no special keyword designating a variable as local; that determination comes entirely from the location in which the variable is declared — which is between the opening and closing braces of a method. As such, local variables are only visible to the methods in which they are declared; they are not accessible from the rest of the class.
    * Parameters: You've already seen examples of parameters, both in the Bicycle class and in the main method of the "Hello World!" application. Recall that the signature for the main method is public static void main(String[] args). Here, the args variable is the parameter to this method. The important thing to remember is that parameters are always classified as "variables" not "fields". This applies to other parameter-accepting constructs as well (such as constructors and exception handlers) that you'll learn about later in the tutorial.


    * Variable names are case-sensitive. A variable's name can be any legal identifier — an unlimited-length sequence of Unicode letters and digits, beginning with a letter, the dollar sign "$", or the underscore character "_". The convention, however, is to always begin your variable names with a letter, not "$" or "_". Additionally, the dollar sign character, by convention, is never used at all. A similar convention exists for the underscore character. White space is not permitted.
    * When choosing a name for your variables, use full words instead of cryptic abbreviations.
    * If the name you choose consists of only one word, spell that word in all lowercase letters. If it consists of more than one word, capitalize the first letter of each subsequent word. The names gearRatio and currentGear are prime examples of this convention. If your variable stores a constant value, such as static final int NUM_GEARS = 6, the convention changes slightly, capitalizing every letter and separating subsequent words with the underscore character. By convention, the underscore character is never used elsewhere.


all variables must first be declared before they can be used.
int gear = 1;


boolean    valor true ou false
char       16-bit,(caractere UNICODE) faixa: 0 a 65535.
byte       8-bit , complemento de 2,  faixa:-128 até 127
short      16-bit, complemento de 2,  faixa:-32768 até 32767
int        32-bit, complemento de 2,  faixa:-2147483648 até 2147483647
long       64-bit, compl. de 2,       faixa:-9223372036854775808 até 9223372036854775807
float      32-bit  Ponto flutuante  IEEE754  faixa: +/-3.40282347E+38F  ex.: 1.380658e-23
double     64-bit  Ponto flutuante  IEEE754  faixa: +/-1.79769313486231570E+308

Static methods like compareUnsigned, divideUnsigned etc have been added to the Integer class to support the arithmetic operations for unsigned integers.
The Long class also contains methods like compareUnsigned, divideUnsigned etc to support arithmetic operations for unsigned long.

for precise values, such as currency, use java.math.BigDecimal

the compiler never assigns a default value to an uninitialized local variable.

A literal is the source code representation of a fixed value
boolean result = true;


// The number 26, in decimal
int decVal = 26;
//  The number 26, in hexadecimal
int hexVal = 0x1a;
// The number 26, in binary
int binVal = 0b11010;

double d1 = 123.4;
// same value as d1, but in scientific notation
double d2 = 1.234e2;
float f1  = 123.4f;

you can use the underscore in numeric literals:
long creditCardNumber = 1234_5678_9012_3456L

float pi =  3.14_15F;
long hexBytes = 0xFF_EC_DE_5E;
long hexWords = 0xCAFE_BABE;
long maxLong = 0x7fff_ffff_ffff_ffffL;
byte nybbles = 0b0010_0101;
long bytes = 0b11010010_01101001_10010100_10010010;
int x3 = 5_______2;
int x6 = 0x5_2; 


boolean deuCerto;
deuCerto = true;

char umCaracter = 'A';
\b      backspace
\t      tabulação horizontal
\n      newline
\f      form feed
\r      carriage return
\"      aspas
\'      aspas simples
\\      contrabarra
\xxx    caracter com código de valor octal xxx, que pode assumir valores entre 000 e 377 na representação octal
\uxxxx  caracter Unicode com código de valor hexadecimal xxxx, onde xxxx pode assumir valores entre 0000 e ffff na representação hexadecimal.



int idade;
String nome = new String("João");
String teste = "isso é um teste";
String tudo = nome + teste;

comparação:
nome.equals(teste);

Valores literais: Um valor como 299792458 é considerado int como padrão, se você quer atribuir esta constante a um long, faça o "type cast" explicitamente:
long a;
a=(long)299792458; //a recebe PI

long valorQuePodeCrescer = 100L;

octais anteceda-os com um zero: 0444
hexadecimais anteceda-os com 0X ou 0x, exemplo: 0xBCD4

O separador de casas decimais é o ponto.

final double TEMPERATURA = 25.4;
final torna TEMPERATURA uma constante

double y = Math.pow (x, b); // x é elevado a b


int[] vetor = new int[100];
int[] impares = {2,3,5,7,9,11,13}
int[][] matriz = new int[5][6];

i = Integer.parseInt(“464”)



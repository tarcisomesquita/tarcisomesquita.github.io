<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Dica de programador</title>
</head>
<body class=" variant-light">

<div style="background-color: white;">
        
<h3 class="post-title entry-title" itemprop="name">
Programação Orientada a Objetos - Modificadores de Acesso</a>
</h3>
<div class="post-body entry-content" id="post-body-3440418472408819424" itemprop="description articleBody">
<br>
<div style="background-color: white;">
<code class="prettyprint">//exemplo em Java</code><br>
<code class="prettyprint">public class Pessoa {</code><br>
<code class="prettyprint"><br></code>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;private String nome;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;private String rg;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;private String cpf;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;private String endereco;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;private int&nbsp;&nbsp;&nbsp; idade;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;private String dataNascimento;</code><br>
<code class="prettyprint"><br></code>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public String getNome() {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return nome;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public void setNome(String nome) {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.nome = nome;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public String getRg() {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return rg;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public void setRg(String rg) {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.rg = rg;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public String getCpf() {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return cpf;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public void setCpf(String cpf) {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.cpf = cpf;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public String getEndereco() {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return endereco;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public void setEndereco(String endereco) {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.endereco = endereco;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public int getIdade() {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return idade;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public void setIdade(int idade) {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.idade = idade;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public String getDataNascimento() {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return dataNascimento;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public void setDataNascimento(String dataNascimento) {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.dataNascimento = dataNascimento;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">}</code><br>
<code class="prettyprint"><br></code>
<code class="prettyprint">//exemplo em Java</code><br>
<code class="prettyprint">public class Aluno extends Pessoa{</code><br>
<code class="prettyprint">&nbsp;&nbsp; private String ra;</code><br>
<code class="prettyprint"><br></code>
<code class="prettyprint">&nbsp;&nbsp; public void setRa(String ra){</code><br>
<code class="prettyprint">&nbsp; &nbsp; &nbsp;&nbsp; this.ra = ra; </code><br>
<code class="prettyprint">&nbsp;&nbsp; } </code><br>
<code class="prettyprint"><br></code>
<code class="prettyprint">&nbsp;&nbsp; public String getRa(){</code><br>
<code class="prettyprint">&nbsp; &nbsp; &nbsp; return this.ra; </code><br>
<code class="prettyprint">&nbsp;&nbsp; }</code><br>
<code class="prettyprint">}</code></div>
<code class="prettyprint">
</code>
<br>
<br>
Com ele em mãos, vamos poder dar continuidade.<br>
Abaixo vou explicar os principáis modificadores:<br>
<br>
<span style="font-size: large;"><b>*public:</b>&nbsp;</span>  É ele quem dá acesso total ao método, propriedade ou até mesmo classe. Quando  sua classe se tornar um objeto, o objeto passará a ter acesso à esses  métodos ou propriedades. Exemplo:<br>
<br>
<br>
<code class="prettyprint">
</code>
<br>
<div style="background-color: white;">
<code class="prettyprint">//classe Main</code><br>
<code class="prettyprint">public static void main(String[] args){</code><br>
<code class="prettyprint">&nbsp;&nbsp; Aluno aluno = new Aluno();</code><br>
<code class="prettyprint">&nbsp;&nbsp; aluno.setNome("José") ;</code><br>
<code class="prettyprint">&nbsp;&nbsp; // o objeto aluno têm acesso aos métodos e propriedades public.</code><br>
<code class="prettyprint">}</code></div>
<code class="prettyprint">
</code>
<br>
<br>
<span style="font-size: large;"><b>*private:</b> </span>Somente a classe têm acesso aos métodos ou propriedades com esse  modificador. Um bom exemplo é a propria classe Pessoa, onde os métodos  "getNome() " e "setNome() " têm acesso à propriedade "nome". Os métodos  "getNome()" e "setNome() " são "public", mas pertencem a classe Pessoa,  logo têm acesso às propriedades "private".<br>
<br>
<span style="font-size: large;"><b>*protected:</b></span>  ele faz com que as classes que possuam algum tipo de herança possa  acessá - los. Exemplo, se colocássemos que a propriedade "nome" da  classe Pessoa fosse "protected", por estar herdando de Pessoa, a classe  Aluno poderia acessar a propriedade nome.<br>
Exemplo:<br>
<br>
<code class="prettyprint">
</code>
<br>
<div style="background-color: white;">
<code class="prettyprint">//classe Pessoa</code><br>
<code class="prettyprint">&nbsp;&nbsp; protected String nome;</code><br>
<code class="prettyprint">//resto da classe</code><br>
<code class="prettyprint"><br></code>
<code class="prettyprint"><br></code>
<code class="prettyprint">//classe Aluno</code><br>
<code class="prettyprint">&nbsp;&nbsp; //no caso criei esse método para exemplo.</code><br>
<code class="prettyprint">&nbsp;&nbsp; public void setSobrenome(String sobrenome){</code><br>
<code class="prettyprint">&nbsp; &nbsp; &nbsp; this.nome += sobrenome;  </code><br>
<code class="prettyprint">&nbsp;&nbsp; }</code><br>
<code class="prettyprint">//resto da classe Aluno</code><br>
<code class="prettyprint"><br></code></div>
<code class="prettyprint">
</code>
<span style="font-size: large;"><b>*static:</b></span>  o static é um modificador de acesso que pode ser usado em conjunto com  os demais citados acima (exemplo: "public static", "private static",  "protected static"). Ele faz com que o método ou propriedade possa ser  chamado sem instanciar a classe.<br>
Dizemos que os métodos ou propriedades "static" pertencem a classe e não à instância do objeto. Exemplo:<br>
<br>
<br>
<code class="prettyprint">
</code>
<br>
<div style="background-color: white;">
<code class="prettyprint">public class Pessoa {</code><br>
<code class="prettyprint">&nbsp;&nbsp;&nbsp;  </code><br>
<code class="prettyprint">&nbsp;&nbsp;&nbsp; public static String nome;</code><br>
<code class="prettyprint"><br></code>
<code class="prettyprint">&nbsp;&nbsp;&nbsp; private int idade;</code><br>
<code class="prettyprint">&nbsp;&nbsp;&nbsp;  </code><br>
<code class="prettyprint">&nbsp;&nbsp;&nbsp; public int getIdade() {</code><br>
<code class="prettyprint">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; return idade;</code><br>
<code class="prettyprint">&nbsp;&nbsp;&nbsp; }</code><br>
<code class="prettyprint"><br></code>
<code class="prettyprint">&nbsp;&nbsp;&nbsp; public void setIdade(int idade) {</code><br>
<code class="prettyprint">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; this.idade = idade;</code><br>
<code class="prettyprint">&nbsp;&nbsp;&nbsp; }</code><br>
<code class="prettyprint"><br></code>
<code class="prettyprint">&nbsp;&nbsp;&nbsp; public static void main(String[] args){</code><br>
<code class="prettyprint">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Pessoa pessoa1 = new Pessoa();</code><br>
<code class="prettyprint">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; pessoa1.setIdade(10);</code><br>
<code class="prettyprint">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; pessoa1.nome = "Pedrinho";</code><br>
<code class="prettyprint">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;  </code><br>
<code class="prettyprint">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Pessoa pessoa2 = new Pessoa();</code><br>
<code class="prettyprint">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; pessoa2.setIdade(20);&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;  </code><br>
<code class="prettyprint">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; pessoa2.nome = "José";</code><br>
<code class="prettyprint">&nbsp;&nbsp;&nbsp;  </code><br>
<code class="prettyprint">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //não precisei instanciar a classe Pessoa para ter acesso à propriedade nome</code><br>
<code class="prettyprint">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Pessoa.nome = "Ana";</code><br>
<code class="prettyprint">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;  </code><br>
<code class="prettyprint">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; System.out.println("Nome e idade da pessoa1 " + pessoa1.nome + "\t" + pessoa1.getIdade());</code><br>
<code class="prettyprint">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; System.out.println("Nome e idade da pessoa2 " + pessoa2.nome + "\t" + pessoa2.getIdade());</code><br>
<code class="prettyprint">&nbsp;&nbsp;&nbsp; }</code><br>
<code class="prettyprint">}</code></div>
<code class="prettyprint">
</code>
<br>
<br>
Qual será a saída?<br>
<br>
Será:<br>
<i><b>Nome e idade da pessoa1 Ana&nbsp;&nbsp;&nbsp; 10;</b></i><br>
<i><b>Nome e idade da pessoa2 Ana&nbsp;&nbsp;&nbsp; 20;</b></i><br>
<br>
<br>
Mas  porque? Vamos lá, nós criamos 2 objetos em memória que são do tipo  Pessoa, que são referênciados por "pessoa1" e "pessoa2", eles possuem posições em memŕoia  diferentes (exemplo pessoa1 0x00234j e pessoa2&nbsp; 0x00236b).  Colocamos que a pessoa1 tem idade 10 e se chama "Pedrinho" logo após  colocamos que a pessoa2 se chama "José" e tem 20 anos. Ok as idades  apareceram de maneira correta mas os nomes não, isso porque o  modificador "static" estava na propriedade nome, logo os objetos pessoa1  e pessoa2 "compartilhavam" a mesma posição de memória. Se fôssemos usar o  Debug, iríamos perceber que ele atribui à propriedade nome com  "Pedrinho", quando chega na pessoa2 ele substitui por "José" e depois  substitui por "Ana".<br>
<br>
<br>
<b><span style="font-size: large;">*final:</span> </b>Ele  pode ser usado em conjunto com os demais citados acima, excepto o  static (exemplo: "public final, "private final", "protected final"). Ele  é usado pra expressar algum valor constante ou tornar método ou classe  como inalterável
Exemplo:<br>
<br>
<code class="prettyprint">
</code>
<br>
<div style="background-color: white; color: black;">
<div>
<code class="prettyprint">public final class Aluno{</code>
</div>
<div>
<code class="prettyprint">// continuação da classe Aluno</code></div>
<div>
<code class="prettyprint"><br></code></div>
</div>
<div style="color: black;">
<code class="prettyprint">
</code>
</div>
Se  fizéssemos isso, estaríamos dizendo que a classe Aluno é a última de  uma série de hierarquia de herenças e portando ela não pode herdar de  nenhuma outra (ex. não poderia ocorrer AutraClasse extends Aluno).
Para valores constantes segue o exemplo abaixo:<br>
<br>
<div style="background-color: white; color: black;">
<code class="prettyprint">
final int i = 100;<br>
</code>
</div>
<br>
O valor de "i" sempre será 100. Usando o "final" não poderemos mais mudar esse valor, afinal ele é uma constante. Mas e se ele fosse uma variável de referência, o que aconteceria?<br>
<br>
<div style="background-color: white; color: black;">
<code class="prettyprint">
final Pessoal p = new Pessoa();<br>
p.setNome("Mário");<br>
</code>
</div>
<br>
O código acima funciona perfeitamente. Quando usamos o final em uma variável de referência estamos apenas dizendo que a referência não pode ser mudada, ou seja, eu não posso alterá-la, exemplo:<br>
<br>
<div style="background-color: white; color: black;">
<code class="prettyprint">
//continuação do código acima<br>
p = new Pessoa(); <br>
</code>
</div>
<br>
Então concluímos que para variáveis de referência nós podemos alterar o estado do objeto que é criado na sua inicialização, mas não podemos mudar a sua referência. <br>
</div>


<h3 class="post-title entry-title" itemprop="name">
Programação Orientada a Objetos - Herança e Encapsulamento</a>
</h3>
<div class="post-body entry-content" id="post-body-8607960854553931051" itemprop="description articleBody">
um ser vivo herda caracteríticas de seu descendente e possui as próprias. A herença lhe permite abstrair características comuns e centralizá - las em uma "superclasse", para que "subclasses" possam usá - las.<br>
<br>
"Mas o que são <i>superclasses</i> e <i>subclasses</i> ?"<br>
<br>
Simples, a "superclasse" nada mais é que uma classe que centraliza métodos e propriedades comuns a mais de uma classe, e a "subclasse" é a classe que herda de uma "superclasse" e assim possui características próprias mais a da "superclasse". Um bom exemplo está na sua casa, onde sua mãe ou pai são uma "superclasse" e você é uma "subclasse", ou seja você herdou características de seus pais e possui as próprias.<br>
<br>
Aluno herda de Pessoa<br>
<br>
<code class="prettyprint">
</code>
<div style="background-color: white;">
<code class="prettyprint">//exemplo em Java</code><br>
<code class="prettyprint">public class Pessoa {</code><br>
<code class="prettyprint"><br></code>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;private String nome;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;private String rg;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;private String cpf;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;private String endereco;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;private int&nbsp;&nbsp;&nbsp; idade;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;private String dataNascimento;</code><br>
<code class="prettyprint"><br></code>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public String getNome() {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return nome;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public void setNome(String nome) {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.nome = nome;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public String getRg() {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return rg;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public void setRg(String rg) {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.rg = rg;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public String getCpf() {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return cpf;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public void setCpf(String cpf) {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.cpf = cpf;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public String getEndereco() {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return endereco;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public void setEndereco(String endereco) {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.endereco = endereco;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public int getIdade() {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return idade;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public void setIdade(int idade) {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.idade = idade;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public String getDataNascimento() {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return dataNascimento;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public void setDataNascimento(String dataNascimento) {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.dataNascimento = dataNascimento;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">}</code><br>
<code class="prettyprint"><br></code>
<code class="prettyprint">//exemplo em Java</code><br>
<code class="prettyprint">public class Aluno extends Pessoa{</code><br>
<code class="prettyprint">&nbsp;&nbsp; private String ra;</code><br>
<code class="prettyprint"><br></code>
<code class="prettyprint">&nbsp;&nbsp; public void setRa(String ra){</code><br>
<code class="prettyprint">&nbsp; &nbsp; &nbsp;&nbsp; this.ra = ra; </code><br>
<code class="prettyprint">&nbsp;&nbsp; } </code><br>
<code class="prettyprint"><br></code>
<code class="prettyprint">&nbsp;&nbsp; public String getRa(){</code><br>
<code class="prettyprint">&nbsp; &nbsp; &nbsp; return this.ra; </code><br>
<code class="prettyprint">&nbsp;&nbsp; }</code><br>
<code class="prettyprint">}</code><br>
<code class="prettyprint"><br></code></div>
<code class="prettyprint">
</code>
Bom, já que eu disse que quando herdamos de alguma classe, herdamos seus métodos e propriedades (no java quando se quer fazer algum tipo de herença se usa a palavra reservada "extends") podemos fazer isso:<br>
<br>
<code class="prettyprint">
</code>
<div style="background-color: white;">
<code class="prettyprint">//classe Main</code><br>
<code class="prettyprint">public static void main(String[] args){</code><br>
<code class="prettyprint">&nbsp;&nbsp; Aluno aluno = new Aluno();</code><br>
<code class="prettyprint">&nbsp;&nbsp; aluno.nome = "José";</code><br>
<code class="prettyprint">&nbsp;&nbsp; //será que funciona?</code><br>
<code class="prettyprint">}</code><br>
<code class="prettyprint"><br></code></div>
<code class="prettyprint">
</code>
Não, pois a propriedade "nome" está com o modificador de acesso "private". Isso significa dizer que aquele atributo só pode ser acessado pela classe Pessoa. "Aaaaaa, mas então é so eu colocar o public ao invés de private, certo?" Sim, mas isso é errado, afinal você fez o encapsulamento (Gets e Sets) atoa? Você estará ferindo o conceito de encapsulamento, usamos a palavra reservada "private" justamente para que isso não aconteça. O usuário da classe Pessoa, ou qualquer outra que a herde, não poderá ter acesso às suas propriedades.<br>

</div>
          

<h3 class="post-title entry-title" itemprop="name">
Programação Orientada a Objetos - Classes
</h3>
<div class="post-body entry-content" id="post-body-5999975688358543570" itemprop="description articleBody">
Uma Classe é composta de métodos (funções) e propriedades (digamos que "variáveis").<br>
<br>
Vamos criar a Classe Pessoa que possui nome, rg, cpf, endereço, idade, data de nascimento. Representamos isso em código da seguinte forma:<br>
<br>
<code class="prettyprint">
</code>
<div style="background-color: white;">
<code class="prettyprint">//exemplo em Java</code><br>
<code class="prettyprint">public class Pessoa {</code><br>
<code class="prettyprint"><br></code>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;private String nome;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;private String rg;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;private String cpf;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;private String endereco;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;private int&nbsp;&nbsp;&nbsp; idade;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;private String dataNascimento;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public String getNome() {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return nome;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public void setNome(String nome) {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.nome = nome;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public String getRg() {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return rg;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public void setRg(String rg) {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.rg = rg;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public String getCpf() {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return cpf;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public void setCpf(String cpf) {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.cpf = cpf;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public String getEndereco() {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return endereco;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public void setEndereco(String endereco) {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.endereco = endereco;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public int getIdade() {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return idade;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public void setIdade(int idade) {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.idade = idade;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public String getDataNascimento() {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return dataNascimento;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;public void setDataNascimento(String dataNascimento) {</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.dataNascimento = dataNascimento;</code><br>
<code class="prettyprint">&nbsp;&nbsp; &nbsp;}</code><br>
<code class="prettyprint">}</code><br>
<code class="prettyprint"><br></code></div>
<code class="prettyprint">
</code>
Repare que fizemos os atributos idênticos às propriedade e apartir disso fizemos os seus respectivos Gets (sempre retorna algum valor de alguma propriedade) e Sets (insere algum valor a uma propriedade). São eles que serão usados, quando a Classe Pessoa for instânciada, para acessar as propriedades. Isso que acabamos de fazer é mais conhecido como Encapsulamento, que é utilizado quando queremos limitar o acesso do usuário às propriedades do nosso objeto.<br>
<br>
</div>
          


<h3 class="post-title entry-title" itemprop="name">
Olá Mundo em Java
</h3>
<div class="post-body entry-content" id="post-body-674201783418401251" itemprop="description articleBody">
<br>
<br>
criar o arquivo de texto OlaMundo, com&nbsp; a extensão ".java"<br>
<br>
<code class="prettyprint">
<div style="background-color: #ffffff;">
public class OlaMundo{<br>
&nbsp;&nbsp;&nbsp; public static void main (String[] argumentos){<br>
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println("Olá mundo!!!");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(int i = 0; i &lt; argumentos.length; i++){<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(argumentos[i]); <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; }<br>
}<br>
</div>
</code>
<br>
Repare que o nome da nossa classe é idêntico ao do arquivo que vamos gerar. Isso é obrigatório em Java. Também criamos um método chamado "main", que recebe como parâmetro um vetor do tipo "String" (um cojunto de caracteres).<br>
<br>
Sempre que você quiser fazer uma aplicação Java para Desktop, você tem que criar um método "main" que recebe como parâmetro um vetor de Strings. O modificador de acesso "public" é usado quando queremos dar acesso total ao nosso método. A palavra "static" diz que aquele método é da classe e não do objeto, como assim? Vamos la, para acessarmos um método, geralmente precisamos instância - lo (ex. Pessoa pessoa = new Pessoa();) e apartir daí fazemos o acesso ao métodos (ex. pessoa.getNome();). No caso de métodos "static" você não precisa fazer a instância da sua classe, você apenas o chama (ex. OlaMundo.main(new String[5]);).<br>
<br>
"javac OlaMundo.java"<br>
<br>
Repare que ele irá gerar um arquivo com a extensão ".class".<br>
<br>
"java OlaMundo". Deverá exibir apenas o texto "Olá mundo!!!"<br>
<br>
Digite agora mais de um parâmetro na hora de executar o OlaMundo. Esses parâmetros irão se tornar um vetor de Strings que seu método main recebe.<br>
Exemplo: "java OlaMundo A SeuNome Teste 1234".<br>

</div>
</div>

</body></html>

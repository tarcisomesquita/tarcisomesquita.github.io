// Se o servidor web operasse como um processo tradicional com um único thread, ele seria capaz de atender a apenas um cliente de cada vez, e um cliente poderia precisar esperar por muito tempo para ter sua solicitação atendida.

// Um processador de textos pode ter um thread para exibir elementos gráficos, outro para responder ao uso do teclado pelo usuário, e um terceiro para executar a verificação ortográfica e gramatical em background.

// Um thread é uma unidade básica de utilização da CPU; é composto por um ID de thread, um contador de programa, um conjunto de registradores e uma pilha. Um thread compartilha, com outros threads pertencentes ao mesmo processo, sua seção de código, a seção de dados e outros recursos do sistema operacional, como arquivos abertos e sinais.

#include <pthread.h>
#include <stdio.h>
int sum; // esses dados são compartilhados pelo(s) thread(s)
void *runner(void *param); // os threads chamam essa função
int main(int argc, char *argv[]) {
   pthread_t tid; // o identificador do thread
   pthread_attr_t attr; // conjunto de atributos do thread
   if (argc != 2) {
      fprintf(stderr,"usage: a.out <integer value>\n");
      return -1;
   }
   if (atoi(argv[1]) < 0) {
      fprintf(stderr,"%d must be >= 0\n", atoi(argv[1]));
      return -1;
   }
   
   pthread_attr_init(&attr);                     // obtém os atributos default
   pthread_create(&tid, &attr, runner, argv[1]); // cria o thread
   pthread_join(tid,NULL);                       // espera o thread ser encerrado
   printf("sum = %d\n",sum);
}

// O thread assumirá o controle nessa função
void *runner(void *param) {
   int i, upper = atoi(param);
   sum = 0;
   for (i = 1; i <= upper; i++) sum += i;
   pthread_exit(0);
}


Figura 4.10 Código Pthread para o agrupamento de dez threads.

#define NUM_THREADS 10
// um array de threads para o agrupamento
pthread_t workers[NUM THREADS];
for (int i = 0; i < NUM_THREADS; i++)
pthread_join(workers[i], NULL);




#include <windows.h>
#include <stdio.h>
DWORD Sum; // os dados são compartilhados pelo(s) thread(s)
// o thread é executado nessa função separada
DWORD WINAPI Summation(LPVOID Param)
{
DWORD Upper = *(DWORD*)Param;
for (DWORD i = 0; i <= Upper; i++)
Sum += i;
return 0;
}
int main(int argc, char *argv[])
{
DWORD ThreadId;
HANDLE ThreadHandle;
int Param;
if (argc != 2) {
fprintf(stderr,"An integer parameter is required\n");
return -1;
}
Param = atoi(argv[1]);
if (Param < 0) {
fprintf(stderr,"An integer >= 0 is required\n");
return -1;
}
// cria o thread*/
ThreadHandle = CreateThread(
NULL, // atributos default de segurança
0, // tamanho default de pilha
Summation, // função do thread
&Param, // parâmetro para a função do thread
0, // flags default de criação&ThreadId); // retorna o identificador do thread
if (ThreadHandle != NULL) {
// agora espera que o thread seja encerrado
WaitForSingleObject(ThreadHandle,INFINITE);
// fecha o manipulador do thread
CloseHandle(ThreadHandle);
printf("sum = %d\n",Sum);
}
}
Figura 4.11 Programa em C com múltiplos threads usando a API Windows.



class Sum
{
private int sum;
public int getSum() {
return sum;
}
public void setSum(int sum) {this.sum = sum;
}
}
class Summation implements Runnable
{
private int upper;
private Sum sumValue;
public Summation(int upper, Sum sumValue) {
this.upper = upper;
this.sumValue = sumValue;
}
public void run() {
int sum = 0;
for (int i = 0; i <= upper; i++)
sum += i;
sumValue.setSum(sum);
}
}
public class Driver
{
public static void main(String[] args) {
if (args.length > 0) {
if (Integer.parseInt(args[0]) < 0)
System.err.println(args[0] + " must be >= 0.");
else {
Sum sumObject = new Sum();
int upper = Integer.parseInt(args[0]);
Thread thrd = new Thread(new Summation(upper, sumObject));
thrd.start();
try {
thrd.join();
System.out.println
("The sum of "+upper+" is "+sumObject.getSum());
} catch (InterruptedException ie) { }
}
}
else
System.err.println("Usage: Summation <integer value>"); }
}
Figura 4.12 Programa em Java para a soma de inteiros não negativos.


O Linux fornece a chamada de sistema fork ( ) com a funcionalidade tradicional de duplicar um processo, como
descrito no Capítulo 3. O Linux também fornece o recurso para criação de threads com o uso da chamada de
sistema clone ( ). No entanto, o Linux não diferencia processos e threads. Na verdade, o Linux usa o termo tarefa —
em vez de processo ou thread — ao se referir a um fluxo de controle dentro de um programa.
Quando clone ( ) é invocada, recebe um conjunto de flags que determinam o nível de compartilhamento que deve
ocorrer entre as tarefas pai e filha. Alguns desses flags estão listados na Figura 4.15. Por exemplo, suponha que clone () receba os flags CLONE_FS, CLONE_VM, CLONE_SIGHAND e CLONE_FILES. As tarefas pai e filha compartilharão
então as mesmas informações do sistema de arquivos (como o diretório de trabalho corrente), o mesmo espaço de
memória, os mesmos manipuladores de sinais e o mesmo conjunto de arquivos abertos. O uso de clone ( ) dessa
forma é equivalente à criação de um thread como descrito neste capítulo, já que a tarefa pai compartilha a maioria de
seus recursos com sua tarefa filha. No entanto, se nenhum desses flags estiver posicionado quando clone ( ) for
invocada, não ocorrerá compartilhamento, resultando em uma funcionalidade semelhante à fornecida pela chamada de
sistema fork ( ).
flag          significado
CLONE_FS      As informações do sistema de arquivos são compartilhadas.
CLONE_VM      O mesmo espaço de memória é compartilhado.
CLONE_SIGHAND Os manipuladores de sinais são compartilhados.
CLONE_FILES   O conjunto de arquivos abertos é compartilhado.





#include <pthread.h>
#include <stdio.h>
#define NUM_THREADS 5
int main(int argc, char *argv[])
{
int i, policy;
pthread_t tid[NUM_THREADS];
pthread_attr_t attr;
// obtém os atributos default
pthread_attr_init(&attr);
// obtém a política de scheduling corrente
if (pthread_attr_getschedpolicy(&attr, &policy) != 0)
fprintf(stderr, "Unable to get policy.\n");
else {if (policy == SCHED_OTHER)
printf("SCHED_OTHER\n");
else if (policy == SCHED_RR)
printf("SCHED_RR\n");
else if (policy == SCHED_FIFO)
printf("SCHED_FIFO\n");
}
// estabelece a política de scheduling — FIFO, RR ou OTHER
if (pthread_attr_setschedpolicy(&attr, SCHED_FIFO) != 0)
fprintf(stderr, "Unable to set policy.\n");
// cria os threads
for (i = 0; i < NUM_THREADS; i++)
pthread_create(&tid[i],&attr,runner,NULL);
// agora vincula cada um dos threads
for (i = 0; i < NUM_THREADS; i++)
pthread_join(tid[i], NULL);
}
// Cada thread assumirá o controle nessa função
void *runner(void *param)
{
// faz algum trabalho ...
pthread_exit(0);
}
Figura 6.20 API de scheduling de tempo real do POSIX.



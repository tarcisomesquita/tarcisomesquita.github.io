
printf format [arguments ...]

printf formats and prints its arguments, after the first, under control of the format.

The format is a character string which contains three types of objects: plain characters, which are simply copied to standard output, character escape sequences which are converted and copied to the standard output, and format specifications, each of which causes printing of the next successive argument.

The arguments after the first are treated as strings if the corresponding format is either b, c or s; otherwise it is evaluated as a C constant, with the following extensions:

      ÂÂ·   A leading plus or minus sign is allowed.
      ÂÂ·   If the leading character is a single or double quote, the value is the ASCII code of the next character.

The format string is reused as often as necessary to satisfy the arguments.  Any extra format specifications are evaluated with zero or the null string.

Character escape sequences are in backslash notation as defined in ANSI X3.159-1989 ("ANSI C").  The characters and their meanings are as follows:

      \a      Write a <bell> character.

      \b      Write a <backspace> character.

      \f      Write a <form-feed> character.

      \n      Write a <new-line> character.

      \r      Write a <carriage return> character.

      \t      Write a <tab> character.

      \v      Write a <vertical tab> character.

      \\      Write a backslash character.

      \num    Write an 8-bit character whose ASCII value is the
              1-, 2-, or 3-digit octal number num.

Each format specification is introduced by the percent character (''%'').  The remainder of the format specification includes, in the following order:

Zero or more of the following flags:

        #       A '#' character specifying that the value should
                be printed in an ''alternative form''.  For b, c,
                d, and s formats, this option has no effect.  For
                the o format the precision of the number is
                increased to force the first character of the out-
                put string to a zero.  For the x (X) format, a
                non-zero result has the string 0x (0X) prepended
                to it.  For e, E, f, g, and G formats, the result
                will always contain a decimal point, even if no
                digits follow the point (normally, a decimal point
                only appears in the results of those formats if a
                digit follows the decimal point).  For g and G
                formats, trailing zeros are not removed from the
                result as they would otherwise be.

        -       A minus sign '-' which specifies left adjustment
                of the output in the indicated field;

        +       A '+' character specifying that there should
                always be a sign placed before the number when
                using signed formats.

        ' '     A space specifying that a blank should be left
                before a positive number for a signed format.  A
                '+' overrides a space if both are used;

        0       A zero '0' character indicating that zero-padding
                should be used rather than blank-padding.  A '-'
                overrides a '0' if both are used;

Field Width:
        An optional digit string specifying a field width; if the
        output string has fewer characters than the field width it
        will be blank-padded on the left (or right, if the left-
        adjustment indicator has been given) to make up the field
        width (note that a leading zero is a flag, but an embedded
        zero is part of a field width);

Precision:
        An optional period, '.', followed by an optional digit
        string giving a precision which specifies the number of
        digits to appear after the decimal point, for e and f for-
        mats, or the maximum number of characters to be printed
        from a string (b and s formats); if the digit string is
        missing, the precision is treated as zero;

Format:
        A character which indicates the type of format to use (one
        of diouxXfwEgGbcs).

A field width or precision may be '*' instead of a digit string.
In this case an argument supplies the field width or precision.

The format characters and their meanings are:

diouXx      The argument is printed as a signed decimal (d or i),
            unsigned octal, unsigned decimal, or unsigned hexadec-
            imal (X or x), respectively.

f           The argument is printed in the style [-]ddd.ddd where
            the number of d's after the decimal point is equal to
            the precision specification for the argument.  If the
            precision is missing, 6 digits are given; if the pre-
            cision is explicitly 0, no digits and no decimal point
            are printed.

eE          The argument is printed in the style [-]d.dddeÂ±dd
            where there is one digit before the decimal point and
            the number after is equal to the precision specifica-
            tion for the argument; when the precision is missing,
            6 digits are produced.  An upper-case E is used for an
            'E' format.

gG          The argument is printed in style f or in style e (E)
            whichever gives full precision in minimum space.

b           Characters from the string argument are printed with
            backslash-escape sequences expanded.
            The following additional backslash-escape sequences
            are supported:

            \c      Causes sh to ignore any remaining characters
                    in the string operand containing it, any
                    remaining string operands, and any additional
                    characters in the format operand.

            \0num   Write an 8-bit character whose ASCII value is
                    the 1-, 2-, or 3-digit octal number num.

c           The first character of argument is printed.

s           Characters from the string argument are printed until
            the end is reached or until the number of characters
            indicated by the precision specification is reached;
            if the precision is omitted, all characters in the
            string are printed.

%           Print a '%'; no argument is used.

In no case does a non-existent or small field width cause truncation of a field; padding takes place only if the specified field width exceeds the actual width.



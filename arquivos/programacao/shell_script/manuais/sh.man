
Search and Execution

There are three types of commands: shell functions, builtin commands, and normal programs.

     When a shell function is executed, all of the shell positional parameters
     (except $0, which remains unchanged) are set to the arguments of the
     shell function.  The variables which are explicitly placed in the envi-
     ronment of the command (by placing assignments to them before the func-
     tion name) are made local to the function and are set to the values
     given.  Then the command given in the function definition is executed.
     The positional parameters are restored to their original values when the
     command completes.  This all occurs within the current shell.

     Shell builtins are executed internally to the shell, without spawning a
     new process.

     Otherwise, if the command name doesn't match a function or builtin, the
     command is searched for as a normal program in the file system (as
     described in the next section).  When a normal program is executed, the
     shell runs the program, passing the arguments and the environment to the
     program.  If the program is not a normal executable file (i.e., if it
     does not begin with the "magic number" whose ASCII representation is
     "#!", so execve(2) returns ENOEXEC then) the shell will interpret the
     program in a subshell.  The child shell will reinitialize itself in this
     case, so that the effect will be as if a new shell had been invoked to
     handle the ad-hoc shell script, except that the location of hashed com-
     mands located in the parent shell will be remembered by the child.

     Note that previous versions of this document and the source code itself
     misleadingly and sporadically refer to a shell script without a magic
     number as a "shell procedure".

   Path Search
     When locating a command, the shell first looks to see if it has a shell
     function by that name.  Then it looks for a builtin command by that name.
     If a builtin command is not found, one of two things happen:

     1.   Command names containing a slash are simply executed without per-
          forming any searches.

     2.   The shell searches each entry in PATH in turn for the command.  The
          value of the PATH variable should be a series of entries separated
          by colons.  Each entry consists of a directory name.  The current
          directory may be indicated implicitly by an empty directory name, or
          explicitly by a single period.

   Command Exit Status
     Each command has an exit status that can influence the behaviour of other
     shell commands.  The paradigm is that a command exits with zero for nor-
     mal or success, and non-zero for failure, error, or a false indication.
     The man page for each command should indicate the various exit codes and
     what they mean.  Additionally, the builtin commands return exit codes, as
     does an executed shell function.

     If a command consists entirely of variable assignments then the exit sta-
     tus of the command is that of the last command substitution if any, oth-
     erwise 0.

   Complex Commands
     Complex commands are combinations of simple commands with control opera-
     tors or reserved words, together creating a larger complex command.  More
     generally, a command is one of the following:

     ÂÂ·   simple command

     ÂÂ·   pipeline

     ÂÂ·   list or compound-list

     ÂÂ·   compound command

     ÂÂ·   function definition

     Unless otherwise stated, the exit status of a command is that of the last
     simple command executed by the command.

   Pipelines
     A pipeline is a sequence of one or more commands separated by the control
     operator |.  The standard output of all but the last command is connected
     to the standard input of the next command.  The standard output of the
     last command is inherited from the shell, as usual.

     The format for a pipeline is:

           [!] command1 [| command2 ...]

     The standard output of command1 is connected to the standard input of
     command2.  The standard input, standard output, or both of a command is
     considered to be assigned by the pipeline before any redirection speci-
     fied by redirection operators that are part of the command.

     If the pipeline is not in the background (discussed later), the shell
     waits for all commands to complete.

     If the reserved word ! does not precede the pipeline, the exit status is
     the exit status of the last command specified in the pipeline.  Other-
     wise, the exit status is the logical NOT of the exit status of the last
     command.  That is, if the last command returns zero, the exit status is
     1; if the last command returns greater than zero, the exit status is
     zero.

     Because pipeline assignment of standard input or standard output or both
     takes place before redirection, it can be modified by redirection.  For
     example:

           $ command1 2>&1 | command2

     sends both the standard output and standard error of command1 to the
     standard input of command2.

     A ; or <newline> terminator causes the preceding AND-OR-list (described
     next) to be executed sequentially; a & causes asynchronous execution of
     the preceding AND-OR-list.

     Note that unlike some other shells, each process in the pipeline is a
     child of the invoking shell (unless it is a shell builtin, in which case
     it executes in the current shell -- but any effect it has on the environ-
     ment is wiped).

   Background Commands -- &
     If a command is terminated by the control operator ampersand (&), the
     shell executes the command asynchronously -- that is, the shell does not
     wait for the command to finish before executing the next command.

     The format for running a command in background is:

           command1 & [command2 & ...]

     If the shell is not interactive, the standard input of an asynchronous
     command is set to /dev/null.

   Lists -- Generally Speaking
     A list is a sequence of zero or more commands separated by newlines,
     semicolons, or ampersands, and optionally terminated by one of these
     three characters.  The commands in a list are executed in the order they
     are written.  If command is followed by an ampersand, the shell starts
     the command and immediately proceed onto the next command; otherwise it
     waits for the command to terminate before proceeding to the next one.

   Short-Circuit List Operators
     "&&" and "||" are AND-OR list operators.  "&&" executes the first com-
     mand, and then executes the second command iff the exit status of the
     first command is zero.  "||" is similar, but executes the second command
     iff the exit status of the first command is nonzero.  "&&" and "||" both
     have the same priority.

   Flow-Control Constructs -- if, while, for, case
     The syntax of the if command is

           if list
           then list
           [ elif list
           then    list ] ...
           [ else list ]
           fi

     The syntax of the while command is

           while list
           do   list
           done

     The two lists are executed repeatedly while the exit status of the first
     list is zero.  The until command is similar, but has the word until in
     place of while, which causes it to repeat until the exit status of the
     first list is zero.

     The syntax of the for command is

           for variable [ in [ word ... ] ]
           do   list
           done

     The words following in are expanded, and then the list is executed
     repeatedly with the variable set to each word in turn.  do and done may
     be replaced with "{" and "}".  Omitting in word ... is equivalent to in
     "$@".

     The syntax of the break and continue command is

           break [ num ]
           continue [ num ]

     Break terminates the num innermost for or while loops.  Continue contin-
     ues with the next iteration of the innermost loop.  These are implemented
     as builtin commands.

     The syntax of the case command is

           case word in
           pattern) list ;;
           ...
           esac

     The pattern can actually be one or more patterns (see Shell Patterns
     described later), separated by "|" characters.

   Grouping Commands Together
     Commands may be grouped by writing either

           (list)

     or

           { list; }

     The first of these executes the commands in a subshell.  Builtin commands
     grouped into a (list) will not affect the current shell.  The second form
     does not fork another shell so is slightly more efficient.  Grouping com-
     mands together this way allows you to redirect their output as though
     they were one program:

           { printf " hello " ; printf " world\n" ; } > greeting

     Note that "}" must follow a control operator (here, ";") so that it is
     recognized as a reserved word and not as another command argument.

   Functions
     The syntax of a function definition is

           name () command

     A function definition is an executable statement; when executed it
     installs a function named name and returns an exit status of zero.  The
     command is normally a list enclosed between "{" and "}".

     Variables may be declared to be local to a function by using a local com-
     mand.  This should appear as the first statement of a function, and the
     syntax is

           local [variable | -] ...

     Local is implemented as a builtin command.

     When a variable is made local, it inherits the initial value and exported
     and readonly flags from the variable with the same name in the surround-
     ing scope, if there is one.  Otherwise, the variable is initially unset.
     The shell uses dynamic scoping, so that if you make the variable x local
     to function f, which then calls function g, references to the variable x
     made inside g will refer to the variable x declared inside f, not to the
     global variable named x.

     The only special parameter that can be made local is "-".  Making "-"
     local any shell options that are changed via the set command inside the
     function to be restored to their original values when the function
     returns.

     The syntax of the return command is

           return [exitstatus]

     It terminates the currently executing function.  Return is implemented as
     a builtin command.

   Variables and Parameters
     The shell maintains a set of parameters.  A parameter denoted by a name
     is called a variable.  When starting up, the shell turns all the environ-
     ment variables into shell variables.  New variables can be set using the
     form

           name=value

     Variables set by the user must have a name consisting solely of alphabet-
     ics, numerics, and underscores - the first of which must not be numeric.
     A parameter can also be denoted by a number or a special character as
     explained below.

   Positional Parameters
     A positional parameter is a parameter denoted by a number (n > 0).  The
     shell sets these initially to the values of its command line arguments
     that follow the name of the shell script.  The set builtin can also be
     used to set or reset them.

   Special Parameters
     A special parameter is a parameter denoted by one of the following spe-
     cial characters.  The value of the parameter is listed next to its char-
     acter.

     *            Expands to the positional parameters, starting from one.
                  When the expansion occurs within a double-quoted string it
                  expands to a single field with the value of each parameter
                  separated by the first character of the IFS variable, or by
                  a <space> if IFS is unset.

     @            Expands to the positional parameters, starting from one.
                  When the expansion occurs within double-quotes, each posi-
                  tional parameter expands as a separate argument.  If there
                  are no positional parameters, the expansion of @ generates
                  zero arguments, even when @ is double-quoted.  What this
                  basically means, for example, is if $1 is "abc" and $2 is
                  "def ghi", then "$@" expands to the two arguments:

                        "abc" "def ghi"

     #            Expands to the number of positional parameters.

     ?            Expands to the exit status of the most recent pipeline.

     - (Hyphen.)  Expands to the current option flags (the single-letter
                  option names concatenated into a string) as specified on
                  invocation, by the set builtin command, or implicitly by the
                  shell.

     $            Expands to the process ID of the invoked shell.  A subshell
                  retains the same value of $ as its parent.

     !            Expands to the process ID of the most recent background com-
                  mand executed from the current shell.  For a pipeline, the
                  process ID is that of the last command in the pipeline.

     0 (Zero.)    Expands to the name of the shell or shell script.

   Word Expansions
     This clause describes the various expansions that are performed on words.
     Not all expansions are performed on every word, as explained later.

     Tilde expansions, parameter expansions, command substitutions, arithmetic
     expansions, and quote removals that occur within a single word expand to
     a single field.  It is only field splitting or pathname expansion that
     can create multiple fields from a single word.  The single exception to
     this rule is the expansion of the special parameter @ within double-
     quotes, as was described above.

     The order of word expansion is:

     1.   Tilde Expansion, Parameter Expansion, Command Substitution, Arith-
          metic Expansion (these all occur at the same time).

     2.   Field Splitting is performed on fields generated by step (1) unless
          the IFS variable is null.

     3.   Pathname Expansion (unless set -f is in effect).

     4.   Quote Removal.

     The $ character is used to introduce parameter expansion, command substi-
     tution, or arithmetic evaluation.

   Tilde Expansion (substituting a userâ's home directory)
     A word beginning with an unquoted tilde character (~) is subjected to
     tilde expansion.  All the characters up to a slash (/) or the end of the
     word are treated as a username and are replaced with the user's home
     directory.  If the username is missing (as in ~/foobar), the tilde is
     replaced with the value of the HOME variable (the current user's home
     directory).

   Parameter Expansion
     The format for parameter expansion is as follows:

           ${expression}

     where expression consists of all characters until the matching "}".  Any
     "}" escaped by a backslash or within a quoted string, and characters in
     embedded arithmetic expansions, command substitutions, and variable
     expansions, are not examined in determining the matching "}".

     The simplest form for parameter expansion is:

           ${parameter}

     The value, if any, of parameter is substituted.

     The parameter name or symbol can be enclosed in braces, which are
     optional except for positional parameters with more than one digit or
     when parameter is followed by a character that could be interpreted as
     part of the name.  If a parameter expansion occurs inside double-quotes:

     1.   Pathname expansion is not performed on the results of the expansion.

     2.   Field splitting is not performed on the results of the expansion,
          with the exception of @.

     In addition, a parameter expansion can be modified by using one of the
     following formats.

     ${parameter:-word}    Use Default Values.  If parameter is unset or null,
                           the expansion of word is substituted; otherwise,
                           the value of parameter is substituted.

     ${parameter:=word}    Assign Default Values.  If parameter is unset or
                           null, the expansion of word is assigned to parame-
                           ter.  In all cases, the final value of parameter is
                           substituted.  Only variables, not positional param-
                           eters or special parameters, can be assigned in
                           this way.

     ${parameter:?[word]}  Indicate Error if Null or Unset.  If parameter is
                           unset or null, the expansion of word (or a message
                           indicating it is unset if word is omitted) is writ-
                           ten to standard error and the shell exits with a
                           nonzero exit status.  Otherwise, the value of
                           parameter is substituted.  An interactive shell
                           need not exit.

     ${parameter:+word}    Use Alternative Value.  If parameter is unset or
                           null, null is substituted; otherwise, the expansion
                           of word is substituted.

     In the parameter expansions shown previously, use of the colon in the
     format results in a test for a parameter that is unset or null; omission
     of the colon results in a test for a parameter that is only unset.

     ${#parameter}         String Length.  The length in characters of the
                           value of parameter.

     The following four varieties of parameter expansion provide for substring
     processing.  In each case, pattern matching notation (see Shell
     Patterns), rather than regular expression notation, is used to evaluate
     the patterns.  If parameter is * or @, the result of the expansion is
     unspecified.  Enclosing the full parameter expansion string in double-
     quotes does not cause the following four varieties of pattern characters
     to be quoted, whereas quoting characters within the braces has this
     effect.

     ${parameter%word}     Remove Smallest Suffix Pattern.  The word is
                           expanded to produce a pattern.  The parameter
                           expansion then results in parameter, with the
                           smallest portion of the suffix matched by the pat-
                           tern deleted.

     ${parameter%%word}    Remove Largest Suffix Pattern.  The word is
                           expanded to produce a pattern.  The parameter
                           expansion then results in parameter, with the
                           largest portion of the suffix matched by the pat-
                           tern deleted.

     ${parameter#word}     Remove Smallest Prefix Pattern.  The word is
                           expanded to produce a pattern.  The parameter
                           expansion then results in parameter, with the
                           smallest portion of the prefix matched by the pat-
                           tern deleted.

     ${parameter##word}    Remove Largest Prefix Pattern.  The word is
                           expanded to produce a pattern.  The parameter
                           expansion then results in parameter, with the
                           largest portion of the prefix matched by the pat-
                           tern deleted.

   Command Substitution
     Command substitution allows the output of a command to be substituted in
     place of the command name itself.  Command substitution occurs when the
     command is enclosed as follows:

           $(command)

     or ("backquoted" version):

           'command'

     The shell expands the command substitution by executing command in a sub-
     shell environment and replacing the command substitution with the stan-
     dard output of the command, removing sequences of one or more <newline>s
     at the end of the substitution.  (Embedded <newline>s before the end of
     the output are not removed; however, during field splitting, they may be
     translated into <space>s, depending on the value of IFS and quoting that
     is in effect.)

   Arithmetic Expansion
     Arithmetic expansion provides a mechanism for evaluating an arithmetic
     expression and substituting its value.  The format for arithmetic expan-
     sion is as follows:

           $((expression))

     The expression is treated as if it were in double-quotes, except that a
     double-quote inside the expression is not treated specially.  The shell
     expands all tokens in the expression for parameter expansion, command
     substitution, and quote removal.

     Next, the shell treats this as an arithmetic expression and substitutes
     the value of the expression.

   White Space Splitting (Field Splitting)
     After parameter expansion, command substitution, and arithmetic expansion
     the shell scans the results of expansions and substitutions that did not
     occur in double-quotes for field splitting and multiple fields can
     result.

     The shell treats each character of the IFS as a delimiter and uses the
     delimiters to split the results of parameter expansion and command sub-
     stitution into fields.

   Pathname Expansion (File Name Generation)
     Unless the -f flag is set, file name generation is performed after word
     splitting is complete.  Each word is viewed as a series of patterns, sep-
     arated by slashes.  The process of expansion replaces the word with the
     names of all existing files whose names can be formed by replacing each
     pattern with a string that matches the specified pattern.  There are two
     restrictions on this: first, a pattern cannot match a string containing a
     slash, and second, a pattern cannot match a string starting with a period
     unless the first character of the pattern is a period.  The next section
     describes the patterns used for both Pathname Expansion and the case com-
     mand.

   Shell Patterns
     A pattern consists of normal characters, which match themselves, and
     meta-characters.  The meta-characters are "!", "*", "?", and "[".  These
     characters lose their special meanings if they are quoted.  When command
     or variable substitution is performed and the dollar sign or back quotes
     are not double quoted, the value of the variable or the output of the
     command is scanned for these characters and they are turned into meta-
     characters.

     An asterisk ("*") matches any string of characters.  A question mark
     matches any single character.  A left bracket ("[") introduces a charac-
     ter class.  The end of the character class is indicated by a ("]"); if
     the "]" is missing then the "[" matches a "[" rather than introducing a
     character class.  A character class matches any of the characters between
     the square brackets.  A range of characters may be specified using a
     minus sign.  The character class may be complemented by making an excla-
     mation point the first character of the character class.

     To include a "]" in a character class, make it the first character listed
     (after the "!", if any).  To include a minus sign, make it the first or
     last character listed.

   Command Line Editing
     When sh is being used interactively from a terminal, the current command
     and the command history (see fc in Builtins) can be edited using vi-mode
     command-line editing.  This mode uses commands, described below, similar
     to a subset of those described in the vi man page.  The command 'set -o
     vi' enables vi-mode editing and place sh into vi insert mode.  With vi-
     mode enabled, sh can be switched between insert mode and command mode.
     The editor is not described in full here, but will be in a later docu-
     ment.  It's similar to vi: typing <ESC> will throw you into command VI
     command mode.  Hitting <return> while in command mode will pass the line
     to the shell.

EXIT STATUS
     Errors that are detected by the shell, such as a syntax error, will cause
     the shell to exit with a non-zero exit status.  If the shell is not an
     interactive shell, the execution of the shell file will be aborted.  Oth-
     erwise the shell will return the exit status of the last command exe-
     cuted, or if the exit builtin is used with a numeric argument, it will
     return the argument.

ENVIRONMENT
     HOME       Set automatically by login(1) from the user's login directory
                in the password file (passwd(4)).  This environment variable
                also functions as the default argument for the cd builtin.

     PATH       The default search path for executables.  See the above sec-
                tion Path Search.

     CDPATH     The search path used with the cd builtin.

     MAIL       The name of a mail file, that will be checked for the arrival
                of new mail.  Overridden by MAILPATH.

     MAILCHECK  The frequency in seconds that the shell checks for the arrival
                of mail in the files specified by the MAILPATH or the MAIL
                file.  If set to 0, the check will occur at each prompt.

     MAILPATH   A colon ":" separated list of file names, for the shell to
                check for incoming mail.  This environment setting overrides
                the MAIL setting.  There is a maximum of 10 mailboxes that can
                be monitored at once.

     PS1        The primary prompt string, which defaults to "$  ", unless you
                are the superuser, in which case it defaults to "#  ".

     PS2        The secondary prompt string, which defaults to ">  ".

     PS4        Output before each line when execution trace (set -x) is
                enabled, defaults to "+  ".

     IFS        Input Field Separators.  This is normally set to <space>,
                <tab>, and <newline>.  See the White Space Splitting section
                for more details.

     TERM       The default terminal setting for the shell.  This is inherited
                by children of the shell, and is used in the history editing
                modes.

     HISTSIZE   The number of lines in the history buffer for the shell.

     PWD        The logical value of the current working directory.  This is
                set by the cd command.

     OLDPWD     The previous logical value of the current working directory.
                This is set by the cd command.

     PPID       The process ID of the parent process of the shell.

FILES
     $HOME/.profile

     /etc/profile

SEE ALSO
     csh(1), echo(1), getopt(1), ksh(1), login(1), printf(1), test(1),
     getopt(3), passwd(5), environ(7), sysctl(8)


T=$'T\x54T'
echo -n "$T" | hexdump -C
00000000  54 54 54                                          |TTT|

T=$'T\x00T'
echo -n "$T" | hexdump -C
00000000  54                                                |T|

while true; do
   case "$key" in
      $'\x1b\x5b\x32\x7e') # Insert
         echo Insert Key
      ;;
      $'\x1b\x5b\x33\x7e') # Delete
         echo Delete Key
      ;;
   esac
   
   read -s -N1 -p "Press a key: "
   K1="$REPLY"
   read -s -N2 -t 0.001
   K2="$REPLY"
   read -s -N1 -t 0.001
   K3="$REPLY"
   key="$K1$K2$K3"
done

let "bin = 2#111100111001101"
echo "binary number = $bin" # 31181

let "b32 = 32#77"
echo "base-32 number = $b32" # 231

let "b64 = 64#@_"
echo "base-64 number = $b64" # 4031

# This notation only works for a limited range (2 - 64) of ASCII characters.
# 10 digits + 26 lowercase characters + 26 uppercase characters + @ + _

echo
echo $((36#zz)) $((2#10101010)) $((16#AF16)) $((53#1aA))
# 1295 170 44822 3375



$IFS
internal field separator
This variable determines how Bash recognizes fields, or word boundaries, when it interprets character
strings.
$IFS defaults to whitespace (space, tab, and newline), but may be changed, for example, to parse a
comma-separated data file. Note that $* uses the first character held in $IFS.

IFS='\'
echo $var     # '(] {}$"
echo "$var"   # '(]\{}$"

$PATH, a list of directories, separated by colons.


set -- "First one" "second" "third:one" "" "Fifth: :one"
# Setting the script arguments, $1, $2, $3, etc.

c=0
for i in "$@"
do echo "$((c+=1)): [$i]"
done

IFS=:
c=0
for i in $*
do echo "$((c+=1)): [$i]"
done

var="$*"
c=0
for i in $var
do echo "$((c+=1)): [$i]"
done

c=0
for i in $@
do echo "$((c+=1)): [$i]"
done

c=0
for i in "$@"
do echo "$((c+=1)): [$i]"
done


var=$@
c=0
for i in $var
do echo "$((c+=1)): [$i]"
done

var="$@"
c=0
for i in $var
do echo "$((c+=1)): [$i]"
done



declare -a indices
The variable indices will be treated as an array.

declare -f
A declare -f line with no arguments in a script causes a listing of all the functions previously
defined in that script.

declare -i integer
declare -i number

Colors=([0]="purple" [1]="reddish-orange" [2]="light green")

$ echo ${Colors[@]}
purple reddish-orange light green

$ declare | grep Colors

echo ls | sh

ls | paste -d '<>' - - -

exec 2> /dev/null
lsof -a -p $$ -d0,1,2

echo teste | (read; echo ${REPLY//t/G})

shell script in windows
http://sourceware.cygnus.com/cygwin/

utility to create a stripped binary executable from a script
shc -- generic shell script compiler (http://www.datsi.fi.upm.es/~frosal/sources/)


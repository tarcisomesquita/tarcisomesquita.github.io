vi
https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/page_action
https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/user_interface/Page_actions
https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/pageAction (estudar as ações)

ver
https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/user_interface/Popups

A page action is an icon that your extension adds inside the browser's URL bar.
manipulate the button programmatically using the pageAction API (https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/pageAction)

Manifest version: 2 or higher

"page_action": {
  "default_icon": {
    "19": "button/geo-19.png",
    "38": "button/geo-38.png"
  },
  "default_title": "Whereami?",
  "default_popup": "popup/geo.html"
}
The only mandatory key is default_icon.

If you don't supply a popup, then a click event is dispatched to your extension's background scripts.

There are two ways to specify a page action: with or without a popup.
 - Without a popup: When the user clicks the button, an event is dispatched to the extension, which the extension listens for using pageAction.onClicked:
    browser.pageAction.onClicked.addListener(handleClick);
 - With a popup: the click event is not dispatched. Instead, the popup appears when the user clicks the button. The user then interacts with the popup. When the user clicks outside of the popup, it closes automatically. See the Popup article for more details on creating and managing popups.

If an action is only relevant on certain pages, then you should use a page action and display it only on relevant pages. If an action is relevant to all pages or to the browser itself, use a browser action.

While browser actions are displayed by default, page actions are hidden by default. They can be shown for a particular tab by calling pageAction.show(), passing in the tab's id. You can also change this default behavior using the show_matches property.


JavaScript running in the popup gets access to all the same WebExtension APIs as your background scripts.
Not get access to web page content.

The button also has a context menu, and you can add items to this menu with the menus API using the page_action menus.ContextType.
https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/menus


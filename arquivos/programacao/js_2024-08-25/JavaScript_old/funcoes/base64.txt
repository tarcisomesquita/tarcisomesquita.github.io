function utf8ToBase64(str) {
  return window.btoa(unescape(encodeURIComponent(str)));
}

function base64ToUtf8(str) {
  return decodeURIComponent(escape(window.atob(str)));  
}

atob e btoa lidam apenas com caracteres ASCCI e não trata os caracteres +, / e = em URLs

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

let inputFileToLoad = document.createElement('input');
inputFileToLoad.type = 'file';
document.body.appendChild(inputFileToLoad);

inputFileToLoad.addEventListener('change', (event) => {
  const file = event.target.files[0];
  
  if (file) {
    const reader = new FileReader();
    
    reader.onload = (event) => {
      const fileContent = event.target.result;
      console.log(fileContent);
    };
    
    reader.readAsText(file);
  }
});

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

o código abaixo não funciona
Error: URL constructor:  is not a valid URL.
URL do recurso: null

async function carregarArquivoJavaScript(caminhoArquivo) {
  return new Promise(
    (resolve, reject) => {
      const file = new File(
        [""], 
        caminhoArquivo.split('/').pop(), 
        {
          type: "text/javascript"
        }
      );
      
      const fileReader = new FileReader();
      
      fileReader.onload = () => {
        const base64String = fileReader.result.split(',')[1];
        resolve(base64String);
      };
      
      fileReader.onerror = (error) => {
        reject(error);
      };
      
      fileReader.readAsDataURL(file);
    }
  );
}

const caminho = "file:///media/lubuntu/ARQ/downloads/teste.js";

carregarArquivoJavaScript(caminho)
.then(
  base64String => {
    console.log("Conteúdo do arquivo em Base64:", base64String);
  })
  .catch(error => {
    console.error("Erro ao carregar o arquivo:", error);
  }
);


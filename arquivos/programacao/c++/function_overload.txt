In C++, two different functions can have the same name if their parameters are different; either because they have a different number of parameters, or because any of their parameters are of a different type. For example: 

#include <iostream>
using namespace std;

int operate(int a, int b) {
  return (a * b);
}

double operate(double a, double b) {
  return (a / b);
}

int main() {
  int x = 5, y = 2;
  double n = 5.0, m = 2.0;
  cout << operate(x,y) << '\n';
  cout << operate(n,m) << '\n';
  return 0;
}


 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
 
 #include <iostream>
using namespace std;

template <class T>

T sum (T a, T b) {
  T result;
  result = a + b;
  return result;
}

int main() {
  int i = 5, j = 6, k;
  double f = 2.0, g = 0.5, h;
  k = sum<int>(i, j);
  h = sum<double>(f, g);
  cout << k << '\n';
  cout << h << '\n';
  return 0;
}

 = = = = = = = = = = = = = = = = = = = = = = = = = = = =

#include <iostream>
using namespace std;

template <class T, class U>
bool are_equal(T a, U b) {
  return (a == b);
}

int main() {
  if (are_equal(22.0,22)) cout << "x and y are equal\n";
  else cout << "x and y are not equal\n";
  return 0;
}

 = = = = = = = = = = = = = = = = = = = = = = = = = = = =

#include <iostream>

template <class T, int N>
//the second template argument needs to be a constant expression (it cannot be passed a variable).

T fixed_multiply(T val) {
  return val * N;
}

int main() {
  std::cout << fixed_multiply<int,2>(10) << '\n';
  std::cout << fixed_multiply<float,3>(10.5) << '\n';
  
  return 0;
}

 = = = = = = = = = = = = = = = = = = = = = = = = = = = =

// overloading class constructors
#include <iostream>
using namespace std;

class Rectangle {
    int width, height;
  public:
    Rectangle();
    Rectangle(int, int);
    int area(void) {return (width*height);}
};

Rectangle::Rectangle() {
  width = 5;
  height = 5;
}

Rectangle::Rectangle(int a, int b) {
  width = a;
  height = b;
}

int main() {
  Rectangle rect(3,4);
  Rectangle rectb;
  cout << "rect area: " << rect.area() << endl;
  cout << "rectb area: " << rectb.area() << endl;
  return 0;
}

 = = = = = = = = = = = = = = = = = = = = = = = = = = = =

// classes and uniform initialization
#include <iostream>
using namespace std;

class Circle {
    double radius;
  public:
    Circle(double r) { radius = r; }
    double circum() {return 2*radius*3.14159265;}
};

int main() {
  Circle foo(10.0);   // functional form
  Circle bar = 20.0;   // assignment init.
  Circle baz {30.0};   // uniform init.
  Circle qux = {40.0}; // POD-like
  
  cout << "foo's circumference: " << foo.circum() << '\n';
  return 0;
}

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

#include <iostream>
using namespace std;

struct circulo {
  float raio;
  float x;
  float y;
  
  void move(float dx,float dy) {
    x+=dx;
    y+=dy;
  }
  
  void mostra(void) {
    cout << "Raio:"<<raio <<endl;
    cout << "X:"<<x << endl;
    cout << "Y:" <<y<< endl;
    cout << endl;
  }
};

int main() {
  circulo ac;
  
  ac.x=0.0;
  ac.y=0.0;
  ac.raio=10.0;
  ac.mostra();
  
  ac.move(1.0,1.0);
  ac.mostra();
  
  ac.x=100.0;
  ac.mostra();
  
  return 0;
}

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

#include <iostream>
using namespace std;

class ponto {
  float x;
  
  public:
  ponto(float a,float b); // mesmo nome da classe. Usado para iniciar
  
  void mostra(void);	
  void move(float dx,float dy);
  float y;
};

ponto::ponto(float a,float b) {
  x=a;
  y=b;
}

void ponto::mostra(void) {
  cout << "X:" << x << " , Y:" << y << endl << endl;
}

void ponto::move(float dx,float dy) {
  x+=dx;
  y+=dy;
}

int main() {
  ponto ap(0.0,0.0);
  ap.mostra();
  
  ap.move(1.0,1.0);
  ap.mostra();
  
  ap.y=100.0;
  ap.mostra();
  
  return 0;
}

stream  description
cin     standard input
cout    standard output
cerr    standard error
clog    standard logging

cout << "Output sentence"; // prints Output sentence on screen
cout << 120;               // prints number 120 on screen
cout << x;                 // prints the value of x on screen

cout << "I am " << age << " years old and my zipcode is " << zipcode;

#include <iostream>
int main() {
  std::cout << "hello world\n";
  return 0;
}

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

int age;
cin >> age;

string mystring;
cin >> mystring;

cin always considers spaces (whitespaces, tabs, new-line...) as terminating, thus always get a single word, not a phrase.

#include <iostream>
int main() {
  std::string mystring;
  
  std::cout << "Digite uma string: ";
  std::cin >> mystring;
  std::cout << "VocÃª digitou: \"" << mystring << "\"\n";
   
  return 0;
}

#include <iostream>
using namespace std;
int main () {
  string mystr;
  
  cout << "What's your name? ";
  getline(cin, mystr);
  cout << "Hello " << mystr << ".\n";
  
  cout << "What is your favorite team? ";
  getline(cin, mystr);
  cout << "I like " << mystr << " too!\n";
  
  return 0;
}

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

#include <iostream>
using namespace std;
int main() {
  string mystr;
  float price = 0.0;
  int quantity = 0;

  cout << "Enter price: ";
  cin >> price;
  
  cout << "Enter quantity: ";
  cin >> quantity;

  cout << "Total price: " << price * quantity << endl;
  /*
    Enter price: 2.2 3.5
    Enter quantity: Total price: 6.6
  */  
  return 0;
}

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

#include <iostream>
#include <fstream>
using namespace std;

int main() {
  ofstream myfile;
  myfile.open("example.txt");
  myfile << "Writing this to a file.\n";
  myfile.close();
  return 0;
}


ofstream: Stream class to write on files
ifstream: Stream class to read from files
fstream: Stream class to both read and write from/to files.

open(filename, mode);

mode is an optional parameter with a combination of the following flags:
ios::in       Open for input operations.
ios::out      Open for output operations.
ios::binary   Open in binary mode.
ios::ate      Set the initial position at the end of the file.
ios::app      All output operations are performed at the end of the file, appending the content
ios::trunc    If the file is opened for output operations and it already existed, its previous content is deleted and replaced by the new one.

ofstream myfile;
myfile.open ("example.bin", ios::out | ios::app | ios::binary); 

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

#include <iostream>
#include <fstream>
using namespace std;

int main () {
  string line;
  ifstream myfile ("example.txt");
  
  if (myfile.is_open()) {
    while (getline(myfile,line)) {
      cout << line << '\n';
    }
    myfile.close();
  }
  else cout << "Unable to open file\n"; 
  
  return 0;
}

Checking state flags
bad()
    Returns true if a reading or writing operation fails. For example, in the case that we try to write to a file that is not open for writing or if the device where we try to write has no space left.
fail()
    Returns true in the same cases as bad(), but also in the case that a format error happens, like when an alphabetical character is extracted when we are trying to read an integer number.
eof()
    Returns true if a file open for reading has reached the end.
good()
    It is the most generic state flag: it returns false in the same cases in which calling any of the previous functions would return true. Note that good and bad are not exact opposites (good checks more state flags at once).

clear()
  can be used to reset the state flags.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

tellg()
current get position

tellp()
current put position

seekg(position);
seekp(position);
These functions allow to change the location of the get and put positions.

The other form for these functions is:
seekg(offset, direction);
seekp(offset, direction);
position is set to an offset relative to specific point determined by the direction.

directions:
ios::beg	offset counted from the beginning of the stream
ios::cur	offset counted from the current position
ios::end	offset counted from the end of the stream

// obtaining file size
#include <iostream>
#include <fstream>
using namespace std;

int main () {
  streampos begin, end;
  
  ifstream myfile ("example.txt", ios::binary);
  begin = myfile.tellg();
  
  myfile.seekg(0, ios::end);
  end = myfile.tellg();
  
  myfile.close();
  cout << "size is: " << (end-begin) << " bytes.\n";
  return 0;
}

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

write(memory_block, size);
read(memory_block, size);

memory_block is a pointer to char (char *), and represents the address

// reading an entire binary file
#include <iostream>
#include <fstream>
using namespace std;

int main() {
  streampos size;
  char *memblock;
  
  ifstream file ("example.txt", ios::in|ios::binary|ios::ate);
  if (file.is_open()) {
    size = file.tellg();
    memblock = new char [size];
    file.seekg(0, ios::beg);
    file.read(memblock, size);
    file.close();
    
    cout << "the entire file content is in memory\n";
    
    delete[] memblock;
  }
  else cout << "Unable to open file\n";
  return 0;
}

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Buffers and Synchronization

When the file is closed: before closing a file, all buffers are synchronized and all pending data is written or read to the physical medium.

When the buffer is full: Buffers have a certain size. When the buffer is full it is automatically synchronized.

Explicitly, with manipulators: When certain manipulators are used on streams, an explicit synchronization takes place. These manipulators are: flush and endl.

Explicitly, with member function sync(): Calling the stream's member function sync() causes an immediate synchronization. This function returns an int value equal to -1 if the stream has no associated buffer or in case of failure. Otherwise (if the stream buffer was successfully synchronized) it returns 0.

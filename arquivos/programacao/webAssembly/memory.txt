<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>teste</title>
</head>
<body>
<script>
WebAssembly.instantiateStreaming(fetch('teste.wasm'))
.then(obj => {
  const buffer = obj.instance.exports.memory.buffer;
  console.log(new TextDecoder().decode(new Uint8Array(buffer, 16, 12)));
});
</script>
</body>
</html>


(module
  (export "memory" (memory $memory))
  (memory $memory 1)
  (data $d0 (i32.const 16) "tutu \c3\a9 b\c3\a3e\00")
)

const wasmInstance = new WebAssembly.Instance(wasmModule);
const mem = wasmInstance.exports.memory;
console.log(String.fromCharCode.apply(null, new Uint8Array(mem.buffer, 16, 12)));
console.log(new TextDecoder().decode(new Uint8Array(mem.buffer, 16, 12)));

00000000  00 61 73 6d 01 00 00 00  05 03 01 00 01 07 0a 01  |.asm............|
00000010  06 6d 65 6d 6f 72 79 02  00 0b 13 01 00 41 10 0b  |.memory......A..|
00000020  0d 74 75 74 75 20 c3 a9  20 62 c3 a3 65 00 00 1a  |.tutu .. b..e...|
00000030  04 6e 61 6d 65 02 01 00  06 09 01 00 06 6d 65 6d  |.name........mem|
00000040  6f 72 79 09 05 01 00 02  64 30                    |ory.....d0|

(
echo -n -e \\x00\\x61\\x73\\x6d # WASM_BINARY_MAGIC
echo -n -e \\x01\\x00\\x00\\x00 # WASM_BINARY_VERSION


echo -n -e \\x05 # section memory
echo -n -e \\x03 # section size

echo -n -e \\x01 # num memories
echo -n -e \\x00 # limits: flags
echo -n -e \\x01 # limits: initial


echo -n -e \\x07 # section export
echo -n -e \\x0a # section size

echo -n -e \\x01 # num exports
echo -n -e \\x06 # string length
echo -n -e 'memory' # name
echo -n -e \\x02 # export kind
echo -n -e \\x00 # export memory index


echo -n -e \\x0b # section data
echo -n -e \\x13 # section size

echo -n -e \\x01 # num data segments
echo -n -e \\x00 # segment flags
echo -n -e \\x41 # i32.const
echo -n -e \\x10 # i32 literale
echo -n -e \\x0b # end
echo -n -e \\x0d # data segment size
echo -n -e 'tutu é bãe'\\x00 # data segment data
) > teste.wasm

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

unsigned char p_string[] = "primeira string";
unsigned char s_string[] = "segunda string";
char array[3] = {0x54,0x55,0x56};

(module
 (table 0 anyfunc)
 (memory $0 1)
 (data (i32.const 16) "primeira string\00")
 (data (i32.const 32) "segunda string\00")
 (data (i32.const 48) "TUV")
 (export "memory" (memory $0))
)

00000000  00 61 73 6d 01 00 00 00  04 84 80 80 80 00 01 70  |.asm...........p|
00000010  00 00 05 83 80 80 80 00  01 00 01 06 81 80 80 80  |................|
00000020  00 00 07 8a 80 80 80 00  01 06 6d 65 6d 6f 72 79  |..........memory|
00000030  02 00 0b b2 80 80 80 00  03 00 41 10 0b 10 70 72  |..........A...pr|
00000040  69 6d 65 69 72 61 20 73  74 72 69 6e 67 00 00 41  |imeira string..A|
00000050  20 0b 0f 73 65 67 75 6e  64 61 20 73 74 72 69 6e  | ..segunda strin|
00000060  67 00 00 41 30 0b 03 54  55 56                    |g..A0..TUV|
0000006a

(
echo -n -e \\x00\\x61\\x73\\x6d # WASM_BINARY_MAGIC
echo -n -e \\x01\\x00\\x00\\x00 # WASM_BINARY_VERSION


echo -n -e \\x04 # section table
echo -n -e \\x84 # section size


echo -n -e \\x05 # section memory
echo -n -e \\x03 # section size

echo -n -e \\x01 # num memories
echo -n -e \\x00 # limits: flags
echo -n -e \\x01 # limits: initial



00000050  20 0b 0f 73 65 67 75 6e  64 61 20 73 74 72 69 6e  | ..segunda strin|
00000060  67 00 00 41 30 0b 03 54  55 56                    |g..A0..TUV|

echo -n -e \\x0b # section data
echo -n -e \\x0f # section size

echo -n -e \\x01 # num data segments
echo -n -e \\x00 # segment flags
echo -n -e \\x41 # i32.const
echo -n -e \\x10 # i32 literale
echo -n -e \\x0b # end
echo -n -e \\x03 # segment size
echo -n -e 'TUV' # segment data

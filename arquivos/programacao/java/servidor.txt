
5.1. Programação cliente-servidor

O retorno desse método é um objeto da classe Socket que estabelece a conexão com a aplicação
cliente.
Esse exemplo mostra o código para um servidor que responde a qualquer solicitação com uma
mensagem fixa, cujo conteúdo é a seqüência de bytes que compõe um endereço URL:

import java.io.*;
import java.net.*;
import java.util.*;
public class TCPServer1 {
public static void main(String[] args) {
ServerSocket ss = null;
Socket cliente = null;
OutputStream os = null;
try {
ss = new ServerSocket(0);
System.out.println("Server: Aguardando na porta " +
ss.getLocalPort());
while (true) {
cliente = ss.accept();
os = cliente.getOutputStream();
System.out.println("Server: " +
"Processando solicitacao de " +
cliente.getInetAddress().getHostName());
String data =
"http://www.dca.fee.unicamp.br/cursos/PooJava/";
byte[] buffer = data.getBytes();
System.out.println("Server: Enviando \"" +
new String(buffer) + "\"");
os.write(buffer);
os.flush();
}
}
catch (Exception e) {
System.err.println(e);
}
finally {
try {
os.close();
cliente.close();
ss.close();
}
catch (Exception e) {
e.printStackTrace();
}
}
c 2001 FEEC/UNICAMP

77

Programação orientada a objetos com Java

41
42

5.1. Programação cliente-servidor

}
}

Uso de múltiplas threads
Tipicamente, por razões de eficiência, um servidor TCP é implementado como um processo
multithreaded. Um dos possíveis problemas na execução de aplicações segundo o modelo clienteservidor está associado com o tempo de atendimento a uma solicitação pelo servidor. Se o servidor
for um processo monolítico, ele estará indisponível para receber novas requisições enquanto a solicitação não for completamente atendida. A solução para este problema depende da possibilidade de
se estabelecer um processamento independente para o atendimento de cada solicitação ao servidor,
liberando tão cedo quanto possível o servidor para receber novas solicitações.
O conceito de processamento independente é parte integrante da linguagem Java, através de multithreading. Todo processamento em Java está associado a alguma thread, sendo que novas threads
de execução podem ser criadas a partir de qualquer thread. A criação de novas threads é em geral
associada a classes que implementam a interface Runnable do pacote java.lang. Essa interface especifica o método run(), os quais são utlizados para criar objetos da classe Thread, com
métodos start() e stop(), entre outros.
Com as facilidades suportadas pela linguagem, torna-se atrativo implementar servidores multithreaded, cujo corpo principal de processamento resume-se a um laço eterno para aceitar solicitações
na porta especificada e criar um objeto thread para atender à solicitação recebida. A funcionalidade
do serviço que será executado pela thread é definida no corpo do método run() que implementa a
interface Runnable associada à thread criada. Cada thread criada existe exclusivamente durante o
tempo necessário para atender à solicitação.
O seguinte exemplo revisita o servidor TCP anteriormente apresentado usando o mecanismo de
múltiplas threads de execução:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18

import java.io.*;
import java.net.*;
import java.util.*;
class DataProvider implements Runnable {
Socket client;
OutputStream os = null;
public DataProvider(Socket s) throws IOException {
client = s;
os = client.getOutputStream();
}
public void run() {
String data =
"http://www.dca.fee.unicamp.br/courses/PooJava/";
byte[] buffer = data.getBytes();
try {
os.write(buffer);
os.flush();
os.close();

c 2001 FEEC/UNICAMP

78

Programação orientada a objetos com Java

19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55

5.1. Programação cliente-servidor

client.close();
}
catch (Exception e) {
System.err.println(e);
}
}
}
public class TCPServer2 {
public static void main(String[] args) {
ServerSocket ss = null;
Socket cliente = null;
try {
ss = new ServerSocket(0);
System.out.println("Server: Aguardando na porta " +
ss.getLocalPort());
while (true) {
cliente = ss.accept();
System.out.println("Server: " +
"Processando solicitacao de " +
cliente.getInetAddress().getHostName());
DataProvider dp = new DataProvider(cliente);
new Thread(dp).start();
}
}
catch (Exception e) {
System.err.println(e);
}
finally {
try {
ss.close();
}
catch (Exception e) {
System.err.println(e);
}
}
}
}






Criando um servidor

import java.net.*;
import java.io.*;
public class Server {
public static void main (String args []) {
Socket client;
ServerSocket server;
try {
server = new ServerSocket (5000);
while (true) {
System.out.println ("Esperando conexão de cliente!");
client = server.accept();
System.out.println ("Cliente se conectando.");
InputStream in = client.getInputStream (); // obtendo stream de
entrada
BufferedReader entrada = new BufferedReader (new
InputStreamReader (in));
boolean done = false;
while (!done) {
String str = entrada.readLine();
if (str==null || str.equals("BYE")) {
30

Programação Avançada em Java

Patrícia Augustin Jaques

done = true; // conexão foi finalizada pelo cliente
System.out.println ("Conexão finalizada.");
}
else System.out.println ("Recebeu: "+str);
}
client.close ();
}
}
catch (IOException ioe) { System.out.println ("Erro ao aceitar conexao cliente.
Erro: "+ioe); }
}
} // class




4.2.8

Reading from and Writing to a URLConnection

A classe URLConnection contém muitos métodos que podem ser usados para a
comunicação com a URL através da rede Internet. URLConnection é uma classe voltada para
conexões HTTP, por isso, muitos dos métodos disponibilizados nesta classe só podem ser usados para
trabalhar com URLs HTTP. A maioria dos protocolos permite que se possa ler e escrever na conexão.
Reading from a URLConnection
O programa que mostraremos como exemplo tem a mesma função que o programa
URLReader, visto anteriormente. Entretanto, ao invés de ler de uma stream de entrada diretamente
da URL, este programa explicitamente abre uma conexão e pega uma stream de entrada da conexão.
Os comandos em negrito realçam a diferença entre este programa e o URLReader.
import java.net.*;
import java.io.*;
public class URLConnectionReader {
public static void main(String[] args) throws Exception {
URL yahoo = new URL("http://www.yahoo.com/");
URLConnection yc = yahoo.openConnection();
BufferedReader in = new BufferedReader(
new InputStreamReader(
yc.getInputStream()));
String inputLine;
while ((inputLine = in.readLine()) != null)
System.out.println(inputLine);
in.close();
}
}

36

Programação Avançada em Java

Patrícia Augustin Jaques

A saída deste programa é idêntica a saída do programa que abre uma stream diretamente da
URL. Você pode usar qualquer um dos dois para ler de uma URL. Entretanto, ler de uma
URLConnection ao invés de ler diretamente de uma URL pode ser mais útil. Isto porque se pode
utilizar o objeto URLConnection para outras tarefas (como escrever em uma URL) ao mesmo
tempo.
Escrevendo em uma URLConnection
Muitas páginas HTML contêm formulários ( forms) – campos de texto e outros objetos de
interface - que permitem a entrada de dados para envio de informações ao servidor. Após você digitar
as informações necessárias e submetê-las (geralmente clicando no botão submit), o browser envia os
dados pela rede que são recebidos em um script cgi-bin no servidor Web. O programa cgi-bin
recebe os dados, os processa e envia uma resposta, geralmente, uma nova página HTML.
Um programa Java também pode enviar dados para um script cgi-bin no servidor.
Para tanto ele deve:
Criar uma URL.
Abrir uma conexão a uma URL.
Determinar as funcionalidades de saída no URLConnection.
Obter uma stream de saída da conexão.
Escrever na stream de saída.
Fechar a stream de saída.
Para testar o envio de informações através de uma conexão URL, nós vamos utilizar um cgi
chamado backwards
que se encontra na página http://java.sun.com/cgibin/backwards. Este script lê uma string de sua entrada padrão, inverte as ordens dos caracteres
da string e escreve o resultado na sua saída padrão.
O programa a seguir envia a string através da URL para o script backwards através de um
objeto URLConnection:
import java.io.*;
import java.net.*;
public class Reverse {
public static void main(String[] args) throws Exception {
if (args.length != 1) {
System.err.println("Usage:
System.exit(1);
}

java Reverse string_to_reverse");

String stringToReverse = URLEncoder.encode(args[0]);
URL url = new URL("http://java.sun.com/cgi-bin/backwards");
URLConnection connection = url.openConnection();
connection.setDoOutput(true);
PrintWriter out = new PrintWriter(connection.getOutputStream());
out.println("string=" + stringToReverse);
out.close();
BufferedReader in = new BufferedReader(
new InputStreamReader(
connection.getInputStream()));
String inputLine;
37

Programação Avançada em Java

Patrícia Augustin Jaques

while ((inputLine = in.readLine()) != null)
System.out.println(inputLine);
in.close();
}
}






WPA_SUPPLICANT(8)

wpa_supplicant implements WPA key negotiation with a WPA Authenticator and EAP authentication with Authentication Server.

SYNOPSIS
       wpa_supplicant [ -BddfhKLqqtuvW ] [ -iifname ] [ -cconfig file ] [ -Ddriver ] [ -PPID_file ] [ -foutput file ]


OVERVIEW
       Link-layer encryption: IEEE 802.11 -> WEP. IEEE 802.11i -> CCMP (based on algorithm AES).

       Steps used when associating with an AP using WPA:
       · wpa_supplicant requests the kernel driver to scan neighboring BSSes
       · wpa_supplicant selects a BSS based on its configuration
       · wpa_supplicant requests the kernel driver to associate with the chosen BSS
       · If WPA-EAP: completes EAP authentication with the authentication server
       · If WPA-EAP: master key is received from the IEEE 802.1X Supplicant
       · If WPA-PSK: wpa_supplicant uses PSK as the master session key
       · wpa_supplicant completes WPA 4-Way Handshake and Group Key Handshake with the Authenticator (AP)
       · wpa_supplicant configures encryption keys for unicast and broadcast
       · normal data packets can be transmitted and received

SUPPORTED FEATURES
       Supported WPA/IEEE 802.11i features:
       · WPA-PSK ("WPA-Personal")
       · WPA  with EAP (e.g., with RADIUS authentication server) ("WPA-Enterprise") Following authentication methods are supported with an integrate IEEE
         802.1X Supplicant:
         · EAP-TLS
         · EAP-PEAP/MSCHAPv2 (both PEAPv0 and PEAPv1)
         · EAP-PEAP/TLS (both PEAPv0 and PEAPv1)
         · EAP-PEAP/GTC (both PEAPv0 and PEAPv1)
         · EAP-PEAP/OTP (both PEAPv0 and PEAPv1)
         · EAP-PEAP/MD5-Challenge (both PEAPv0 and PEAPv1)
         · EAP-TTLS/EAP-MD5-Challenge
         · EAP-TTLS/EAP-GTC
         · EAP-TTLS/EAP-OTP

         · EAP-TTLS/EAP-MSCHAPv2

         · EAP-TTLS/EAP-TLS

         · EAP-TTLS/MSCHAPv2

         · EAP-TTLS/MSCHAP

         · EAP-TTLS/PAP

         · EAP-TTLS/CHAP

         · EAP-SIM

         · EAP-AKA

         · EAP-PSK

         · EAP-PAX

         · LEAP (note: requires special support from the driver for IEEE 802.11 authentication)

         · (following methods are supported, but since they do not generate keying material, they cannot be used with WPA or IEEE 802.1X WEP keying)

         · EAP-MD5-Challenge

         · EAP-MSCHAPv2

         · EAP-GTC

         · EAP-OTP

       · key management for CCMP, TKIP, WEP104, WEP40

       · RSN/WPA2 (IEEE 802.11i)

         · pre-authentication

         · PMKSA caching

AVAILABLE DRIVERS
       A summary of available driver backends is below. Support for each of the driver backends is chosen at wpa_supplicant compile time. For a  list  of
       supported driver backends that may be used with the -D option on your system, refer to the help output of wpa_supplicant (wpa_supplicant -h).

       hostap (default) Host AP driver (Intersil Prism2/2.5/3).  (this can also be used with Linuxant DriverLoader).

       hermes Agere Systems Inc. driver (Hermes-I/Hermes-II).

       madwifi
              MADWIFI 802.11 support (Atheros, etc.).

       atmel  ATMEL AT76C5XXx (USB, PCMCIA).

       wext   Linux wireless extensions (generic).

       ndiswrapper
              Linux ndiswrapper.

       broadcom
              Broadcom wl.o driver.

       ipw    Intel ipw2100/2200 driver.

       wired  wpa_supplicant wired Ethernet driver

       roboswitch
              wpa_supplicant Broadcom switch driver

       bsd    BSD 802.11 support (Atheros, etc.).

       ndis   Windows NDIS driver.

COMMAND LINE OPTIONS
       Most  command  line  options have global scope. Some are given per interface, and are only valid if at least one -i option is specified, otherwise
       they’re ignored. Option groups for different interfaces must be separated by -N option.

       -b br_ifname
              Optional bridge interface name. (Per interface)

       -B     Run daemon in the background.

       -c filename
              Path to configuration file. (Per interface)

       -C ctrl_interface
              Path to ctrl_interface socket (Per interface. Only used if -c is not).

       -i ifname
              Interface to listen on. Multiple instances of this option can be present, one per interface, separated by -N option (see below).

       -d     Increase debugging verbosity (-dd even more).

       -D driver
              Driver to use. (Per interface, see the available options below.)

       -f output file
              Log output to specified file instead of stdout.

       -g global ctrl_interface
              Path to global ctrl_interface socket. If specified, interface definitions may be omitted.

       -K     Include keys (passwords, etc.) in debug output.

       -t     Include timestamp in debug messages.

       -h     Help.  Show a usage message.

       -L     Show license (GPL and BSD).

       -p     Driver parameters. (Per interface)

       -P PID_file
              Path to PID file.

       -q     Decrease debugging verbosity (-qq even less).

       -u     Enabled DBus control interface. If enabled, interface definitions may be omitted.

       -v     Show version.

       -W     Wait for a control interface monitor before starting.

       -N     Start describing new interface.

EXAMPLES
       In most common cases, wpa_supplicant is started with:


              wpa_supplicant -B -c/etc/wpa_supplicant.conf -iwlan0

       This makes the process fork into background.

       The easiest way to debug problems, and to get debug log for bug reports, is to start wpa_supplicant on foreground with debugging enabled:


              wpa_supplicant -c/etc/wpa_supplicant.conf -iwlan0 -d

       wpa_supplicant can control multiple interfaces (radios) either by running one process for each interface separately or by running just one process
       and list of options at command line. Each interface is separated with -N argument. As an example, following command would start wpa_supplicant for
       two interfaces:


              wpa_supplicant \
                   -c wpa1.conf -i wlan0 -D hostap -N \
                   -c wpa2.conf -i ath0 -D madwifi

SUPPORTED DRIVERS
       Host AP driver for Prism2/2.5/3 (development snapshot/v0.2.x)
              (http://hostap.epitest.fi/) Driver needs to be set in Managed mode (iwconfig wlan0 mode managed).  Please note that station  firmware  ver‐
              sion needs to be 1.7.0 or newer to work in WPA mode.

       Linuxant DriverLoader
              (http://www.linuxant.com/driverloader/) with Windows NDIS driver for your wlan card supporting WPA.

       Agere Systems Inc. Linux Driver
              (http://www.agere.com/support/drivers/)  Please  note  that the driver interface file (driver_hermes.c) and hardware specific include files
              are not included in the wpa_supplicant distribution. You will need to copy these from the source package of the Agere driver.

       madwifi driver for cards based on Atheros chip set (ar521x)
              (http://sourceforge.net/projects/madwifi/) Please note that you will need to modify the wpa_supplicant .config file to use the correct path
              for the madwifi driver root directory (CFLAGS += -I../madwifi/wpa line in example defconfig).

       ATMEL AT76C5XXx driver for USB and PCMCIA cards
              (http://atmelwlandriver.sourceforge.net/).

       Linux ndiswrapper
              (http://ndiswrapper.sourceforge.net/) with Windows NDIS driver.

       Broadcom wl.o driver
              This  is a generic Linux driver for Broadcom IEEE 802.11a/g cards.  However, it is proprietary driver that is not publicly available except
              for couple of exceptions, mainly Broadcom-based APs/wireless routers that use Linux. The  driver  binary  can  be  downloaded,  e.g.,  from
              Linksys  support  site  (http://www.linksys.com/support/gpl.asp) for Linksys WRT54G. The GPL tarball includes cross-compiler and the needed
              header file, wlioctl.h, for compiling wpa_supplicant.  This driver support in wpa_supplicant is expected to work also  with  other  devices
              based on Broadcom driver (assuming the driver includes client mode support).

        Intel ipw2100 driver
              (http://sourceforge.net/projects/ipw2100/)

       Intel ipw2200 driver
              (http://sourceforge.net/projects/ipw2200/)

       Linux wireless extensions
              In  theory,  any driver that supports Linux wireless extensions can be used with IEEE 802.1X (i.e., not WPA) when using ap_scan=0 option in
              configuration file.

       Wired Ethernet drivers
              Use ap_scan=0.

       BSD net80211 layer (e.g., Atheros driver)
              At the moment, this is for FreeBSD 6-CURRENT branch.

       Windows NDIS
              The current Windows port requires WinPcap (http://winpcap.polito.it/).  See README-Windows.txt for more information.

       wpa_supplicant was designed to be portable for different drivers and operating systems. Hopefully, support for more wlan cards and  OSes  will  be
       added  in  the future. See developer.txt for more information about the design of wpa_supplicant and porting to other drivers. One main goal is to
       add full WPA/WPA2 support to Linux wireless extensions to allow new drivers to be supported without having to implement new driver-specific inter‐
       face code in wpa_supplicant.

ARCHITECTURE
       The wpa_supplicant system consists of the following components:

       wpa_supplicant.conf
              the configuration file describing all networks that the user wants the computer to connect to.

       wpa_supplicant
              the program that directly interacts with the network interface.

       wpa_cli
              the client program that provides a high-level interface to the functionality of the daemon.

       wpa_passphrase
              a utility needed to construct wpa_supplicant.conf files that include encrypted passwords.

QUICK START
       Edit /etc/wpa_supplicant.conf, that describes the networks you are interested in.
       Test whether the configuration works
              wpa_supplicant -iwlan0 -c/etc/wpa_supplicant.conf -d
       Start wpa_supplicant on background without debugging:
              wpa_supplicant -iwlan0 -c/etc/wpa_supplicant.conf -B

SEE ALSO
       wpa_background(8) wpa_supplicant.conf(5) wpa_cli(8) wpa_passphrase(8)

09 April 2009


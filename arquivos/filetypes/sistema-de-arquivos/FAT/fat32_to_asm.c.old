// gcc -Wall -Werror fat32_to_asm.c -o fat32_to_asm.elf && ./fat32_to_asm.elf fat32.bin


// #include<linux/msdos_fs.h>

#define SECTOR_SIZE 512 // sector size (bytes)
#define SECTOR_BITS 9 // log2(SECTOR_SIZE)
#define MSDOS_DPB (MSDOS_DPS) // dir entries per block
#define MSDOS_DPB_BITS 4 // log2(MSDOS_DPB)
#define MSDOS_DPS (SECTOR_SIZE / sizeof(struct msdos_dir_entry))
#define MSDOS_DPS_BITS 4 // log2(MSDOS_DPS)
#define MSDOS_LONGNAME 256 // maximum name length

#define MSDOS_ROOT_INO 1 // The root inode number
#define MSDOS_FSINFO_INO 2 // Used for managing the FSINFO block

#define MSDOS_DIR_BITS 5 // log2(sizeof(struct msdos_dir_entry))

// directory limit
#define FAT_MAX_DIR_ENTRIES (65536)
#define FAT_MAX_DIR_SIZE (FAT_MAX_DIR_ENTRIES << MSDOS_DIR_BITS)

#define ATTR_NONE 0 // no attribute bits
#define ATTR_RO 1 // read-only
#define ATTR_HIDDEN 2 // hidden
#define ATTR_SYS 4 // system
#define ATTR_VOLUME 8 // volume label
#define ATTR_DIR 16 // directory
#define ATTR_ARCH 32 // archived

// attribute bits that are copied "as is"
#define ATTR_UNUSED (ATTR_VOLUME | ATTR_ARCH | ATTR_SYS | ATTR_HIDDEN)
// bits that are used by the Windows 95/Windows NT extended FAT
#define ATTR_EXT (ATTR_RO | ATTR_HIDDEN | ATTR_SYS | ATTR_VOLUME)

#define CASE_LOWER_BASE 8 // base is lower case
#define CASE_LOWER_EXT 16 // extension is lower case

#define DELETED_FLAG 0xe5 // marks file as deleted when in name[0]
#define IS_FREE(n) (!*(n) || *(n) == DELETED_FLAG)

#define FAT_LFN_LEN 255 // maximum long name length
#define MSDOS_NAME 11 // maximum name length
#define MSDOS_SLOTS 21 // max # of slots for short and long names
#define MSDOS_DOT ".          " // ".", padded to MSDOS_NAME chars
#define MSDOS_DOTDOT "..         " // "..", padded to MSDOS_NAME chars

#define FAT_FIRST_ENT(s,x) ((MSDOS_SB(s)->fat_bits == 32 ? 0x0FFFFF00 :  MSDOS_SB(s)->fat_bits == 16 ? 0xFF00 :  0xF00) | (x))


// start of data cluster's entry (number of reserved clusters)
#define FAT_START_ENT 2

// maximum number of clusters
#define MAX_FAT32 0x0FFFFFF6

// bad cluster mark
#define BAD_FAT32 0x0FFFFFF7

// standard EOF
#define EOF_FAT32 0x0FFFFFFF

#define FAT_ENT_FREE (0)
#define FAT_ENT_BAD (BAD_FAT32)
#define FAT_ENT_EOF (EOF_FAT32)

#define FAT_FSINFO_SIG1 0x41615252
#define FAT_FSINFO_SIG2 0x61417272
#define IS_FSINFO(x) (le32_to_cpu((x)->signature1) == FAT_FSINFO_SIG1 && le32_to_cpu((x)->signature2) == FAT_FSINFO_SIG2)


#define FAT_STATE_DIRTY 0x01

struct fat_boot_sector {
   unsigned char  ignored[3];        // Boot strap short or near jump
   unsigned char  system_id[8];      // Name - can be used to special case partition manager volumes
   unsigned char  sector_size[2];    // bytes per logical sector
   unsigned char  sec_per_clus;      // sectors/cluster
   unsigned short reserved;          // reserved sectors
   unsigned char  fats;              // number of FATs
   unsigned char  dir_entries[2];    // root directory entries
   unsigned char  sectors[2];        // number of sectors
   unsigned char  media;             // media code
   unsigned short fat_length;        // sectors/FAT
   unsigned short secs_track;        // sectors per track
   unsigned short heads;             // number of heads
   unsigned int   hidden;            // hidden sectors (unused)
   unsigned int   total_sect;        // number of sectors (if sectors == 0)
   
   // only used by FAT32
   struct {
      unsigned int   length;         // sectors/FAT
      unsigned short flags;          // bit 8:  fat mirroring, low 4:  active fat
      unsigned char  version[2];     // major, minor filesystem version
      unsigned int   root_cluster;   // first cluster in root directory
      unsigned short info_sector;    // filesystem info sector
      unsigned short backup_boot;    // backup boot sector
      unsigned short reserved2[6];   // Unused
      // Extended BPB Fields for FAT32
      unsigned char  drive_number;   // Physical drive number
      unsigned char  state;          // undocumented, but used for mount state.
      unsigned char  signature;      // extended boot signature
      unsigned char  vol_id[4];      // volume ID
      unsigned char  vol_label[11];  // volume label
      unsigned char  fs_type[8];     // file system type
      // other fiealds are not added here
   } fat32;
};

struct fat_boot_fsinfo {
   unsigned int   signature1;        // 0x41615252L
   unsigned int   reserved1[120];    // Nothing as far as I can tell
   unsigned int   signature2;        // 0x61417272L
   unsigned int   free_clusters;     // Free cluster count.  -1 if unknown
   unsigned int   next_cluster;      // Most recently allocated cluster
   unsigned int   reserved2[4];
};

struct msdos_dir_entry {
   unsigned char  name[11];          // maximum name length];// name and extension
   unsigned char  attr;              // attribute bits
   unsigned char  lcase;             // Case for base and extension
   unsigned char  ctime_cs;          // Creation time, centiseconds (0-199)
   unsigned short ctime;             // Creation time
   unsigned short cdate;             // Creation date
   unsigned short adate;             // Last access date
   unsigned short starthi;           // High 16 bits of cluster in FAT32
   unsigned short time,date,start;   // time, date and first cluster
   unsigned int   size;              // file size (in bytes)
};

// Up to 13 characters of the name
struct msdos_dir_slot {
   unsigned char  id;                // sequence number for slot
   unsigned char  name0_4[10];       // first 5 characters in name
   unsigned char  attr;              // attribute byte
   unsigned char  reserved;          // always 0
   unsigned char  alias_checksum;    // checksum for 8.3 alias
   unsigned char  name5_10[12];      // 6 more characters in name
   unsigned short start;             // starting cluster number, 0 in long slots
   unsigned char  name11_12[4];      // last 2 characters in name
};

// #include<fcntl.h> // = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
extern int open(const char *file, int oflag, ...);

// #include<bits/fcntl.h> // = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
#define O_RDONLY           00

// #include<unistd.h> // = = = = = = = = = = = = = = = = = = = = = = = = = =
extern int read (int fd, void *buf, unsigned long int nbytes);
extern int close (int fd);

//#include<stdio.h>
struct _IO_FILE;
typedef struct _IO_FILE FILE;
extern struct _IO_FILE *stdout;	

extern int setvbuf(FILE *stream, char *buf, int modes, long unsigned intn);
#define _IOFBF 0 // Fully buffered.
#define _IOLBF 1 // Line buffered.
#define _IONBF 2 // No buffering.

extern int printf(char *, ...);

//  #include<string.h> // = = = = = = = = = = = = = = = = = = = = = = = = = =
extern long unsigned int strlen(char *);

int main(int argc, char **argv, char **argenv) {
   unsigned char cache[512], *db;
   short *dw;
   int i, n, fd, offset;
   struct fat_boot_sector *boot;
   struct fat_boot_fsinfo *fsinfo;
   
   setvbuf(stdout, 0, _IONBF, 0);
   printf("\033[2J\033[0;0H");   // clear
   
   fd = open(argv[1], O_RDONLY);
   if (fd < 0) {
      printf("\n");
      printf("ERRO:  NÃ£o foi possivel abrir o ARQUIVO \"%s\"\n", argv[1]);
      printf("\n");
      return 1;
   }
   
   n = read(fd, (void *)cache, 512);
   
   if (n != 512) {
      printf("\nERRO na leitura do arquivo %s\n\n", argv[1]);
      close(fd);
      return 1;
   }
   
   if ((cache[510] != 0x55) || (cache[511] != 0xAA)) {
      printf("\nERRO na signatura do setor de boot\n\n");
      close(fd);
      return 1;
   }
   
   boot = (struct fat_boot_sector *)&cache[0];
   
   offset = 0;
   printf("\n; = = = = = = = = = = sector 0:  Boot Sector = = = = = = = = = =\n\n");
   printf("ignored:       db 0x%02X, 0x%02X, 0x%02X   ; 0x%08X   Boot strap short or near jump\n", 
          boot->ignored[0], boot->ignored[1], boot->ignored[2], offset);
   offset = offset + 3;
   
   printf("system_id:     db \"%8.8s\"         ; 0x%08X   Created by this softwares\n", &boot->system_id[0], offset);
   offset = offset + 8;
   
   dw = (short *)&boot->sector_size[0];
   printf("sector_size:   dw 0x%04X             ; 0x%08X   bytes per logical sector",   *dw, offset);
   offset = offset + 2;
   if (*dw != 0x0200) return 1;
   else  printf(" . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [\033[32mOK\033[m]\n");
   
   printf("sec_per_clus:  db \033[33m0x%02X\033[m               ; 0x%08X   sectors per cluster. 1, 2, 4, 8, 16, 32, 64, 128.\n",
           boot->sec_per_clus, offset);
   offset = offset + 1;
   
   printf("reserved:      dw 0x%04X             ; 0x%08X   reserved sectors (sectors before the first FAT)",   boot->reserved, offset);
   offset = offset + 2;
   if (boot->reserved != 0x20) return 1;
   else  printf("  . . . . . . . . . . . . . . . . . . . [\033[32mOK\033[m]\n");
   
   printf("fats:          db 0x%02X               ; 0x%08X   number of FATs (copy)",   boot->fats, offset);
   offset = offset + 1;
   if (boot->fats != 0x02) return 1;
   else  printf("  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [\033[32mOK\033[m]\n");
   
   dw = (short *)&boot->dir_entries[0];
   printf("dir_entries:   dw 0x%04X             ; 0x%08X   root directory entries (shold be 0 on fat32)", *dw, offset);
   offset = offset + 2;
   if (*dw != 0x0000) return 1;
   else  printf(" . . . . . . . . . . . . . . . . . . . . . [\033[32mOK\033[m]\n");
   
   dw = (short *)&boot->sectors[0];
   printf("sectors:       dw \033[33m0x%04X\033[m             ; 0x%08X   number of sectors (if zero, use 4 byte value at offset 0x20)\n",
           *dw, offset);
   offset = offset + 2;
   
   printf("media:         db 0x%02X               ; 0x%08X   media code. 0xF8 == Fixed disk (i.e. Hard disk)",   boot->media, offset);
   offset = offset + 1;
   if (boot->media != 0xF8) return 1;
   else  printf("  . . . . . . . . . . . . . . . . . . . [\033[32mOK\033[m]\n");
   
   printf("fat_length:    dw 0x%04X             ; 0x%08X   sectors/FAT (shold be 0 on fat32. See length at 0x24)",   boot->fat_length, offset);
   offset = offset + 2;
   if (boot->fat_length != 0x0000) return 1;
   else  printf("  . . . . . . . . . . . . . . . . [\033[32mOK\033[m]\n");
   
   printf("secs_track:    dw 0x%04X             ; 0x%08X   sectors per track",   boot->secs_track, offset);
   offset = offset + 2;
   if (boot->secs_track != 0x0020) return 1;
   else  printf("  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [\033[32mOK\033[m]\n");
   
   printf("heads:         dw 0x%04X             ; 0x%08X   number of heads",   boot->heads, offset);
   offset = offset + 2;
   if (boot->heads != 0x0040) return 1;
   else  printf("  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [\033[32mOK\033[m]\n");
   
   printf("hidden:        dd 0x%08X         ; 0x%08X   sectors on disk before the partition (unused)\n",   boot->hidden, offset);
   offset = offset + 4;
   
   printf("total_sect:    dd \033[33m0x%08X\033[m         ; 0x%08X   number of sectors (if sectors == 0)\n",   boot->total_sect, offset);
   offset = offset + 4;
   
   printf("\n");
   
   printf("length:        dd \033[33m0x%08X\033[m         ; 0x%08X   sectors/FAT\n",   boot->fat32.length, offset);
   offset = offset + 4;
   
   printf("flags:         dw 0x%04X             ; 0x%08X   all zero",   boot->fat32.flags, offset);
   offset = offset + 2;
   if (boot->fat32.flags != 0x0000) return 1;
   else  printf(" . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [\033[32mOK\033[m]\n");
/*
0x28 	FAT Flags (Only used during a conversion from a FAT12/16 volume.)
                   Bits 0-3   -- Zero-based number of active FAT. Only valid
                                 if mirroring is disabled.
                   Bits 4-6   -- Reserved.
                   Bit  7     -- 0 means the FAT is mirrored at runtime into
                                 all FATs.
                              -- 1 means only one FAT is active; it is the one
                                 referenced inÂ bits 0-3.
                   Bits 8-15  -- Reserved.
*/   

   dw = (short *)&boot->fat32.version[0];
   printf("version:       dw 0x%04X             ; 0x%08X   major, minor filesystem version", *dw, offset);
   offset = offset + 2;
   if (*dw != 0x0000) return 1;
   else  printf("  . . . . . . . . . . . . . . . . . . . . . . . . . . . [\033[32mOK\033[m]\n");
   
   printf("root_cluster:  dd 0x%08X         ; 0x%08X   first cluster of the root directory",   boot->fat32.root_cluster, offset);
   offset = offset + 4;
   if (boot->fat32.root_cluster != 0x00000002) return 1;
   else  printf("  . . . . . . . . . . . . . . . . . . . . . . . . . [\033[32mOK\033[m]\n");
   
   printf("info_sector:   dw 0x%04X             ; 0x%08X   filesystem info sector",   boot->fat32.info_sector, offset);
   offset = offset + 2;
   if (boot->fat32.info_sector != 0x0001) return 1;
   else  printf(" . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [\033[32mOK\033[m]\n");
   
   printf("backup_boot:   dw 0x%04X             ; 0x%08X   backup boot sector",   boot->fat32.backup_boot, offset);
   offset = offset + 2;
   if (boot->fat32.backup_boot != 0x0006) return 1;
   else  printf(" . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [\033[32mOK\033[m]\n");
   
   printf("reserved2:     dw 0x%04X, 0x%04X, 0x%04X, 0x%04X, 0x%04X, 0x%04X             ; 0x%08X   Unused\n", boot->fat32.reserved2[0],       
          boot->fat32.reserved2[1], boot->fat32.reserved2[2], boot->fat32.reserved2[3], boot->fat32.reserved2[4], boot->fat32.reserved2[5], offset);
   offset = offset + 6*2;
   
   printf("\n; Extended BPB Fields for FAT32\n");
   
   printf("drive_number:  db 0x%02X               ; 0x%08X   Physical drive number\n",   boot->fat32.drive_number, offset);
   offset = offset + 1;
   
   printf("state:         db 0x%02X               ; 0x%08X   mount state. 1 == mounted\n",   boot->fat32.state, offset);
   offset = offset + 1;
   
   printf("signature:     db 0x%02X               ; 0x%08X   0x29 == Extended BIOS Parameter Block with the following 3 entries exists.\n", 
           boot->fat32.signature, offset);
   offset = offset + 1;
   
   printf("vol_id:        dd 0x%02X%02X%02X%02X         ; 0x%08X   volume ID\n",   
           boot->fat32.vol_id[0], boot->fat32.vol_id[1], boot->fat32.vol_id[2], boot->fat32.vol_id[3], offset);
   offset = offset + 4;
   
   printf("vol_label:     db \"%11.11s\"      ; 0x%08X   volume label\n", &boot->fat32.vol_label[0], offset);
   offset = offset + 11;
   
   printf("fs_type:       db \"%8.8s\"         ; 0x%08X   file system type\n", &boot->fat32.fs_type[0], offset);
   offset = offset + 8;
/*
0x005A inicia o cÃ³digo do bootloader
0x01FE Boot sector signature (0x55 0xAA)

the reserved sectors include a File System Information Sector at sector 1 and a Backup Boot Sector at Sector 6
*/   
   printf("\n\n; = = = = = = sector 1:  File System Information Sector = = = = = = = = = = = = = = = = = =\n\n");
   
   n = read(fd, (void *)cache, 512);
   
   if (n != 512) {
      printf("\nERRO na leitura do arquivo %s\n\n", argv[1]);
      close(fd);
      return 1;
   }
   
   fsinfo = (struct fat_boot_fsinfo *)&cache[0];
   
   offset = 0x200;
   printf("signature1:    dd 0x%08X         ; 0x%08X   0x41615252", fsinfo->signature1, offset);
   offset = offset + 4;
   if (fsinfo->signature1 != 0x41615252) return 1;
   else  printf(" . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [\033[32mOK\033[m]\n");
   
   printf("reserved1:   times 120 dd 0x00000000 ; 0x%08X" , offset);
   offset = offset + 120*4;
   db = (unsigned char *)&fsinfo->reserved1;
   for (i=0; i < (120*4);i++) {
      if (*db != 0x00) return 1;
      db++;
   } 
   printf("  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [\033[32mOK\033[m]\n");
   
   printf("signature2:    dd 0x%08X         ; 0x%08X   0x61417272", fsinfo->signature2, offset);
   offset = offset + 4;
   if (fsinfo->signature2 != 0x61417272) return 1;
   else  printf(" . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [\033[32mOK\033[m]\n");
   
   printf("free_clusters: dd 0x%08X         ; 0x%08X   Free cluster count.  -1 if unknown\n", fsinfo->free_clusters, offset);
   offset = offset + 4;                      // 0xFFFFFFFF == free count is unknown
   
   printf("next_cluster:  dd 0x%08X         ; 0x%08X   Most recently allocated cluster\n", fsinfo->next_cluster, offset);
   offset = offset + 4;                      //  0xFFFFFFFF == recently allocated cluster is unknown
   
   printf("reserved2:   times 3 dd 0x00000000   ; 0x%08X" , offset);
   offset = offset + 3*4;
   db = (unsigned char *)&fsinfo->reserved2;
   for (i=0; i < (3*4);i++) {
      if (*db != 0x00) return 1;
      db++;
   } 
   printf("  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [\033[32mOK\033[m]\n");
/*
   unsigned int   reserved2[4];
};

*/   
   close(fd);
   
   return 0;
}


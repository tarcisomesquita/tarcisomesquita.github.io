#!/usr/bin/python3
# SPDX-License-Identifier: BSD-2-Clause

import os
import re
import sys
import time
import signal
import subprocess
import threading
import struct
import zlib
import base64
import fcntl
from collections import namedtuple

# Local imports
from utils import * # pylint: disable=unused-wildcard-import

# Runtime-generated constants
r_notInBase64Char = re.compile(r'[^A-Za-z0-9+/=]')

# Runtime-generated types
TestParamsType = namedtuple(
   'TestParamsType', ['type', 'name', 'timeout']
)

# Other constants
INIT_PATH = '/initrd/bin/init'
DEVSHELL_PATH = '/initrd/usr/bin/devshell'
KERNEL_HELLO_MSG = 'Hello from Tilck!'
KERNEL_DUMP_GCDA_STR = '** GCOV gcda files **'
FATPART_FILE = '@CMAKE_BINARY_DIR@/fatpart'
GEN_KCOV_REPORT = '@CMAKE_BINARY_DIR@/scripts/generate_kernel_coverage_report'

# Environment config variables
VM_MEMORY_SIZE_IN_MB = int(os.environ.get('TILCK_VM_MEM', '128'))

# Global variables

# Controlled by command line
g_params:TestParamsType = None

# Internal state
g_output = ""
g_process = None
g_fail_reason = Fail.success
g_hello_msg_found = False
g_shell_exit_code = -1
g_dumping_gcda_files = False
g_gcda_buf = None
g_gcda_file = None

def set_once_shell_exit_code(val: int):

   global g_shell_exit_code

   if g_shell_exit_code == -1:
      g_shell_exit_code = val

def set_once_fail_reason(reason: Fail):
   global g_fail_reason
   assert(g_fail_reason == Fail.success)
   g_fail_reason = reason

def set_once_qemu_process(p):
   global g_process
   assert(g_process is None)
   g_process = p

def append_to_output(s: str):
   global g_output
   g_output += s

def write_gcda_file():

   global g_gcda_file, g_gcda_buf

   try:

      orig_gcda_buf = g_gcda_buf
      g_gcda_buf = base64.b64decode(g_gcda_buf)
      g_gcda_buf = zlib.decompress(g_gcda_buf)

      with open(g_gcda_file, 'wb') as fh:
         fh.write(g_gcda_buf)

   except Exception as e:
      set_once_fail_reason(Fail.gcov_error)
      msg_print("")
      msg_print(
         "While working on gcda file '{}', "
         "got exception: {}".format(g_gcda_file, str(e))
      )
      raw_print("g_gcda_buf:\n<<{}>>\n".format(orig_gcda_buf))
      g_process.send_signal(signal.SIGINT)

   finally:
      g_gcda_file = None
      g_gcda_buf = None

def handle_hello_msg(line: str):

   global g_hello_msg_found

   if not g_hello_msg_found:
      g_hello_msg_found = True
      raw_print(line)
      return

   # Bad case
   msg_print("")
   msg_print("Detected TWICE the kernel hello msg: the machine rebooted.")
   msg_print("KILLING the VM.")

   set_once_fail_reason(Fail.reboot)
   g_process.send_signal(signal.SIGINT)

def process_line(line: str):

   global g_dumping_gcda_files
   global g_gcda_buf
   global g_gcda_file

   stripped = line.rstrip()
   #raw_print(stripped)

   if stripped and stripped[0] == '[' and stripped.startswith('[init]'):

      m = re.search(
         r'the shell with pid ([0-9]+) exited with status: ([0-9]+)',
         stripped
      )

      if m:
         set_once_shell_exit_code(int(m.group(2)))
         g_dumping_gcda_files = False
         raw_print(stripped)
         return

   if stripped.find(KERNEL_HELLO_MSG) != -1:
      handle_hello_msg(stripped)
      return

   # NOTE: we could kill the VM immediately after a kernel panic, but we'll
   # loose the backtrace. TODO: detect kernel panic here, but kill the VM after
   # a some timeout (e.g. 1 sec).
   #
   # if stripped.find("KERNEL PANIC") != -1:
   #    raw_print("[system test runner] Detected kernel panic: KILLING the VM.")
   #    set_once_fail_reason(Fail.panic)
   #    g_process.send_signal(signal.SIGINT)

   if not g_dumping_gcda_files:

      append_to_output(stripped + "\n")
      raw_print(stripped)

      if stripped.find(KERNEL_DUMP_GCDA_STR) != -1:
         g_dumping_gcda_files = True

      return

   # Dumping gcda file

   if not stripped:
      return

   if r_notInBase64Char.search(stripped[0]):

      if g_gcda_file:
         write_gcda_file()

      g_dumping_gcda_files = False
      raw_print(stripped)
      return

   m = re.search(r'file: (.+)', stripped)

   if m:

      if g_gcda_file:
         write_gcda_file()

      g_gcda_file = m.group(1)
      g_gcda_buf = ''

   else:
      g_gcda_buf += stripped

def process_text(text: str):

   # python's split always leaves an empty element in case of a trailing
   # delimiter. For example:
   #
   #     "a,b,c,".split(",")
   #
   # produces
   #
   #     ["a", "b", "c", ""]
   #
   # Therefore, it's always OK to discard the last line and return it, to
   # be used for the next (which will be appended to it).

   lines = text.split("\n")

   for ln in lines[:-1]:
      process_line(ln)

   return lines[-1]

def run_the_vm():

   global g_dumping_gcda_files
   global g_gcda_buf
   global g_gcda_file

   args = ['qemu-system-i386',
           '-m', str(VM_MEMORY_SIZE_IN_MB),
           '-kernel', KERNEL_FILE,
           '-nographic', '-device',
           'isa-debug-exit,iobase=0xf4,iosize=0x04']

   if is_kvm_installed():
      args.append('-enable-kvm')

   kernel_cmdline = '-sercon '
   cmdline = DEVSHELL_PATH
   init_opts = '-ns -nr'

   if dump_coverage:
      cmdline += ' -dcov'
      init_opts += ' -q'

   if in_any_ci:
      kernel_cmdline += ' -sat' # enable sched alive (debug) thread

   if g_params.type == 'shellcmd':

      raw_print(
         "Running the VM with shell command '{}'...".format(g_params.name)
      )
      cmdline += ' -c ' + g_params.name

   elif g_params.type == 'selftest':

      raw_print("Running the VM with selftest '{}'...".format(g_params.name))
      cmdline += ' -c selftest ' + g_params.name

   else:
      sys.exit(Fail.invalid_args.value)

   kernel_cmdline += ' -cmd {} {} -- {}'.format(INIT_PATH, init_opts, cmdline)
   args += ['-initrd', FATPART_FILE, '-append', kernel_cmdline]

   if verbose:
      raw_print(" ".join(args))

   raw_print('-' * 80)
   raw_print("")

   # Run the QEMU process by using a PIPE for its stdout
   p = subprocess.Popen(args, stdout=subprocess.PIPE)
   set_once_qemu_process(p)

   # Get the current flags for the `stdout` file descriptor
   fl = fcntl.fcntl(g_process.stdout.fileno(), fcntl.F_GETFL)

   # Make the `stdout` file descriptor non-blocking
   fcntl.fcntl(g_process.stdout.fileno(), fcntl.F_SETFL, fl | os.O_NONBLOCK)

   read_anything = False
   start_time = time.time()
   incomplete_line = ''

   while True:

      text = g_process.stdout.read()

      # In python 3, read() will return None when there's nothing to read on
      # a non-blocking stream. On python 2 instead, it used to throw an IOError
      # and return None only in case of EOF. Now, apprently, there's no way to
      # detect the EOF case. Therefore, g_process.poll() is used. It returns
      # process' exit-code if the process terminated, otherwise None.
      if not text:

         if g_process.poll() is not None:

            if incomplete_line:
               process_line(incomplete_line)

            break # The process exited, we have to stop reading

         if not read_anything:
            time.sleep(0.1)
            continue

         curr_time = time.time()
         e = curr_time - start_time

         if e >= 1.0:
            msg_print("WARNING: got nothing in {:.2f} sec".format(e))
            start_time = curr_time

         time.sleep(0.1)
         continue

      if not read_anything:
         elapsed = time.time() - start_time
         read_anything = True
         msg_print("First output after {:.2f} s".format(elapsed))

      start_time = time.time()
      text = incomplete_line + text.decode('latin-1')
      incomplete_line = process_text(text)

   raw_print('-' * 80)

def show_help_and_exit():
   raw_print("Syntax: ")
   raw_print("  single_test_run selftest <name> <timeout>")
   raw_print("  single_test_run shellcmd <name> <timeout>")
   sys.exit(Fail.invalid_args.value)

def generate_coverage_if_enabled():

   if not dump_coverage or not report_coverage:
      return # Just do nothing

   try:

      subprocess.check_output([GEN_KCOV_REPORT, '--acc'])

   except Exception as e:

      msg_print(
         "{} generated the exception: {}".format(GEN_KCOV_REPORT, str(e))
      )
      msg_print("Output of {} --acc:".format(GEN_KCOV_REPORT))
      raw_print(getattr(e, 'output', '<no output>'))
      msg_print("--- end output ---")
      sys.exit(Fail.gcov_error.value)

###############################################################################

def main():

   global g_params

   if len(sys.argv) < 4:
      show_help_and_exit()

   if sys.argv[1] not in test_types:
      show_help_and_exit()

   g_params = TestParamsType(sys.argv[1], sys.argv[2], int(sys.argv[3]))

   if len(sys.argv) >= 5 and len(sys.argv[4]) > 0:
      set_qemu_kvm_version(sys.argv[4])
      raw_print("Assumed qemu-kvm version: {}".format(get_qemu_kvm_version()))
   else:
      detect_kvm()

   thread = threading.Thread(target = run_the_vm)
   thread.start()
   thread.join(g_params.timeout)

   if thread.is_alive():

      # If we get here, after `g_params.timeout`, the test is still running

      if g_dumping_gcda_files:
         # If we're just dumping the GCDA file, wait a little more
         thread.join(30)

      if thread.is_alive():

         # If it's still alive, we have to fail with timeout
         set_once_fail_reason(Fail.timeout)

         msg_print(
            "The VM is alive after the timeout "
            "of {} seconds. KILLING IT.".format(g_params.timeout)
         )

         g_process.send_signal(signal.SIGINT)
         thread.join()

   if g_gcda_file:
      write_gcda_file()

   if g_output.find("KERNEL PANIC") != -1:
      set_once_fail_reason(Fail.panic)

   if g_fail_reason == Fail.success and g_shell_exit_code != 0:

      if g_shell_exit_code != -1:
         msg_print("Shell exited with code {}.".format(g_shell_exit_code))
         set_once_fail_reason(Fail.shell_no_zero_exit)
      else:
         msg_print("UNKNOWN shell exit code")
         set_once_fail_reason(Fail.shell_unknown_exit_code)

   if g_fail_reason == Fail.success:
      generate_coverage_if_enabled()

   sys.exit(g_fail_reason.value)

###############################
if __name__ == '__main__':
   main()


When the bzImage (for an i386 image) is invoked, you begin at 

/arch/i386/boot/head.S:start()
/arch/i386/boot/compressed/head.S:startup_32()
/arch/i386/boot/compressed/misc.c:decompress_kernel()
/arch/i386/kernel/head.S:startup_32()
/init/main.c:start_kernel() # setup interrupts, memory management, device initialization, drivers, etc.
/init/main.c:cpu_idle()

? boot loader call start_kernel()

With the call to start_kernel, a long list of initialization functions are called to set up interrupts, perform further memory configuration, and load the initial RAM disk. In the end, a call is made to kernel_thread (in arch/i386/kernel/process.c) to start the init function, which is the first user-space process.


= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

init/main.c:init()                         # performs a large amount of subsystem initialization.
  init/do_mounts.c:prepare_namespace()     # mount the dev file system, devices
    init/do_mounts_initrd.c:initrd_load()  # Load the initrd
      init/do_mounts_rd.c:rd_load_image()  
        init/do_mounts_rd.c:identify_ramdisk_image()  # checks if image is a gzip, bzip2, LZMA, XZ and LZO.
          init/do_mounts_rd.c:crd_load()   # allocates space for the RAM disk
            lib/inflate.c:gunzip()         # 
    init/do_mounts.c:mount_root()
      init/do_mounts.c:mount_block_root()
         init/do_mounts.c:do_mount_root()
           fs/namespace.c:sys_mount()      # mount the root file system (initrd) and then chdir to it
  init/main.c:run_init_process()
    execve()



for Linux kernel 2.6.25.6
The early kernel start-up for the Intel architecture is in file arch/x86/boot/header.S.
Nowadays this boot sector, if executed, only prints a “bugger_off_msg” to the user and reboots.
Modern boot loaders ignore this legacy code.
After the boot sector code we have the first 15 bytes of the real-mode kernel header; these two pieces together add up to 512 bytes.
After these 512 bytes, at offset 0×200, we find the very first instruction that runs as part of the Linux kernel: the real-mode entry point.
It’s in header.S:110 and it is a 2-byte jump written directly in machine code as 0x3aeb.
The boot loader jumps into this location when it is finished, which in turn jumps to header.S:229 where we have a regular assembly routine called start_of_setup.
This short routine sets up a stack, zeroes the bss segment (the area that contains static variables, so they start with zero values) for the real-mode kernel and then jumps to good old C code at arch/x86/boot/main.c:122.
main() detect memory layout, set a video mode, etc. It then calls go_to_protected_mode().
in protected mode the location of the interrupt vector table is stored in aCPU register called IDTR.
go_to_protected_mode() calls setup_idt() and setup_gdt()

At this point we’re running with paging disabled;

The routine then calls the 32-bit kernel entry point, which is startup_32 for compressed kernels.
This routine does some basic register initializations and calls decompress_kernel().

the uncompressed contents also start at 1MB. decompress_kernel() then prints “done.” and the comforting “Booting the kernel.” By “Booting” it means a jump to the final entry point, which is the protected-mode kernel entry point at the start of the second megabyte of RAM (0×100000).
That location contains a routine called, startup_32.
It clears the bss segment for the protected-mode kernel, sets up the final global descriptor table for memory, builds page tables so that paging can be turned on, enables paging, initializes a stack, creates the final interrupt descriptor table, and finally jumps to to the architecture-independent kernel start-up, start_kernel().

The function is a long list of calls to initializations of the various kernel subsystems and data structures.
These include the scheduler, memory zones, time keeping, and so on.
start_kernel() then calls rest_init().
rest_init() creates a kernel thread passing another function, kernel_init(), as the entry point.
rest_init() then calls schedule() to kickstart task scheduling and goes to sleep by calling cpu_idle(), which is the idle thread for the Linux kernel. cpu_idle() runs forever and so does process zero, which hosts it. This idle loop is the end of the long thread we followed since boot.

At this point, the kernel thread started previously is ready to kick in, displacing process 0 and its idle thread. And so it does, at which point kernel_init() starts running since it was given as the thread entry point.
kernel_init() is responsible for initializing the remaining CPUs in the system, which have been halted since boot. All of the code we’ve seen sofar has been executed in a single CPU, called the boot processor. As the other CPUs, called application processors, are started they come up in real-mode and must run through several initializations as well. Many of the code paths are common, as you can see in the code for startup_32
Finally, kernel_init() calls init_post(), which tries to execute a user-mode process in the following order: /sbin/init, /etc/init, /bin/init, and /bin/sh. 
If all fail, the kernel will panic.
init is usually there, and starts running as PID 1.
It checks its configuration file to figure out which processes to launch, which might include X11 Windows, programs for logging in on the console, network daemons, and so on.


; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	c:\Documents and Settings\Michael\Desktop\bte_lighter\Demos\Demo_8_new\SysCore\Kernel\DebugDisplay.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?tbuf@@3PADA					; tbuf
PUBLIC	?video_memory@@3PAGA				; video_memory
PUBLIC	?cursor_x@@3EA					; cursor_x
PUBLIC	?cursor_y@@3EA					; cursor_y
PUBLIC	?_color@@3EA					; _color
PUBLIC	?bchars@@3PADA					; bchars
_BSS	SEGMENT
?tbuf@@3PADA DB	020H DUP (?)				; tbuf
?cursor_x@@3EA DB 01H DUP (?)				; cursor_x
	ALIGN	4

?cursor_y@@3EA DB 01H DUP (?)				; cursor_y
	ALIGN	4

?_color@@3EA DB	01H DUP (?)				; _color
_BSS	ENDS
_DATA	SEGMENT
?video_memory@@3PAGA DD 0b8000H				; video_memory
?bchars@@3PADA DB 030H					; bchars
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
_DATA	ENDS
PUBLIC	?DebugPutc@@YAXE@Z				; DebugPutc
; Function compile flags: /Ogtpy
; File c:\documents and settings\michael\desktop\bte_lighter\demos\demo_8_new\syscore\kernel\debugdisplay.cpp
_TEXT	SEGMENT
_c$ = 8							; size = 1
?DebugPutc@@YAXE@Z PROC					; DebugPutc

; 60   : 
; 61   :     uint16_t attribute = _color << 8;

	xor	eax, eax
	mov	ah, BYTE PTR ?_color@@3EA		; _color
	movzx	ecx, ax

; 62   : 
; 63   :     //! backspace character
; 64   :     if (c == 0x08 && cursor_x)

	mov	al, BYTE PTR _c$[esp-4]
	cmp	al, 8
	jne	SHORT $LN10@DebugPutc
	mov	al, BYTE PTR ?cursor_x@@3EA		; cursor_x
	test	al, al
	je	SHORT $LN2@DebugPutc

; 65   :         cursor_x--;

	add	al, 255					; 000000ffH
	mov	BYTE PTR ?cursor_x@@3EA, al		; cursor_x
	jmp	SHORT $LN2@DebugPutc
$LN10@DebugPutc:

; 66   : 
; 67   :     //! tab character
; 68   :     else if (c == 0x09)

	cmp	al, 9
	jne	SHORT $LN8@DebugPutc

; 69   :         cursor_x = (cursor_x+8) & ~(8-1);

	mov	al, BYTE PTR ?cursor_x@@3EA		; cursor_x
	add	al, 8
	and	al, 248					; 000000f8H
	mov	BYTE PTR ?cursor_x@@3EA, al		; cursor_x
	jmp	SHORT $LN2@DebugPutc
$LN8@DebugPutc:

; 70   : 
; 71   :     //! carriage return
; 72   :     else if (c == '\r')

	cmp	al, 13					; 0000000dH

; 73   :         cursor_x = 0;

	je	SHORT $LN14@DebugPutc

; 74   : 
; 75   :     //! new line
; 76   : 	else if (c == '\n') {

	cmp	al, 10					; 0000000aH

; 77   :         cursor_x = 0;
; 78   :         cursor_y++;

	je	SHORT $LN15@DebugPutc

; 79   : 	}
; 80   : 
; 81   :     //! printable characters
; 82   :     else if(c >= ' ') {

	cmp	al, 32					; 00000020H
	jb	SHORT $LN13@DebugPutc

; 83   : 
; 84   : 		//! display character on screen
; 85   :         uint16_t* location = video_memory + (cursor_y*80 + cursor_x);
; 86   :         *location = c | attribute;

	movzx	dx, al
	movzx	eax, BYTE PTR ?cursor_y@@3EA		; cursor_y
	or	dx, cx
	movzx	ecx, BYTE PTR ?cursor_x@@3EA		; cursor_x
	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 4
	add	eax, ecx
	mov	ecx, DWORD PTR ?video_memory@@3PAGA	; video_memory
	mov	WORD PTR [ecx+eax*2], dx

; 87   :         cursor_x++;

	mov	al, BYTE PTR ?cursor_x@@3EA		; cursor_x
	add	al, 1
	mov	BYTE PTR ?cursor_x@@3EA, al		; cursor_x
	jmp	SHORT $LN2@DebugPutc
$LN13@DebugPutc:
	mov	al, BYTE PTR ?cursor_x@@3EA		; cursor_x
$LN2@DebugPutc:

; 88   :     }
; 89   : 
; 90   :     //! if we are at edge of row, go to new line
; 91   :     if (cursor_x >= 80) {

	cmp	al, 80					; 00000050H
	jb	SHORT $LN1@DebugPutc
$LN15@DebugPutc:

; 94   :         cursor_y++;

	add	BYTE PTR ?cursor_y@@3EA, 1		; cursor_y
$LN14@DebugPutc:

; 92   : 
; 93   :         cursor_x = 0;

	mov	BYTE PTR ?cursor_x@@3EA, 0		; cursor_x
$LN1@DebugPutc:

; 95   :     }
; 96   : }

	ret	0
?DebugPutc@@YAXE@Z ENDP					; DebugPutc
_TEXT	ENDS
PUBLIC	?itoa@@YAXIIPAD@Z				; itoa
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_i$ = 8							; size = 4
_base$ = 12						; size = 4
_buf$ = 16						; size = 4
?itoa@@YAXIIPAD@Z PROC					; itoa

; 103  :    int pos = 0;
; 104  :    int opos = 0;
; 105  :    int top = 0;
; 106  : 
; 107  :    if (i == 0 || base > 16) {

	mov	eax, DWORD PTR _i$[esp-4]
	xor	ecx, ecx
	test	eax, eax
	push	esi
	je	SHORT $LN6@itoa
	mov	esi, DWORD PTR _base$[esp]
	cmp	esi, 16					; 00000010H
	ja	SHORT $LN6@itoa
$LL5@itoa:

; 110  :       return;
; 111  :    }
; 112  : 
; 113  :    while (i != 0) {
; 114  :       tbuf[pos] = bchars[i % base];

	xor	edx, edx
	div	esi

; 115  :       pos++;

	add	ecx, 1
	test	eax, eax
	mov	dl, BYTE PTR ?bchars@@3PADA[edx]
	mov	BYTE PTR ?tbuf@@3PADA[ecx-1], dl
	jne	SHORT $LL5@itoa

; 116  :       i /= base;
; 117  :    }
; 118  :    top=pos--;

	mov	esi, ecx
	sub	ecx, 1

; 119  :    for (opos=0; opos<top; pos--,opos++) {

	test	esi, esi
	push	edi
	mov	edi, DWORD PTR _buf$[esp+4]
	jle	SHORT $LN1@itoa

; 116  :       i /= base;
; 117  :    }
; 118  :    top=pos--;

	lea	ecx, DWORD PTR ?tbuf@@3PADA[ecx]
	npad	1
$LL3@itoa:

; 120  :       buf[opos] = tbuf[pos];

	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+edi], dl
	add	eax, 1
	sub	ecx, 1
	cmp	eax, esi
	jl	SHORT $LL3@itoa
$LN1@itoa:

; 121  :    }
; 122  :    buf[opos] = 0;

	mov	BYTE PTR [eax+edi], 0
	pop	edi
	pop	esi

; 123  : }

	ret	0
$LN6@itoa:

; 108  :       buf[0] = '0';

	mov	eax, DWORD PTR _buf$[esp]
	mov	BYTE PTR [eax], 48			; 00000030H

; 109  :       buf[1] = '\0';

	mov	BYTE PTR [eax+1], cl
	pop	esi

; 123  : }

	ret	0
?itoa@@YAXIIPAD@Z ENDP					; itoa
_TEXT	ENDS
PUBLIC	?itoa_s@@YAXHIPAD@Z				; itoa_s
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_i$ = 8							; size = 4
_base$ = 12						; size = 4
_buf$ = 16						; size = 4
?itoa_s@@YAXHIPAD@Z PROC				; itoa_s

; 126  :    if (base > 16) return;

	mov	edx, DWORD PTR _base$[esp-4]
	cmp	edx, 16					; 00000010H
	ja	SHORT $LN3@itoa_s

; 127  :    if (i < 0) {

	mov	eax, DWORD PTR _i$[esp-4]
	test	eax, eax

; 128  :       *buf++ = '-';

	mov	ecx, DWORD PTR _buf$[esp-4]
	jge	SHORT $LN1@itoa_s
	mov	BYTE PTR [ecx], 45			; 0000002dH
	add	ecx, 1

; 129  :       i *= -1;

	neg	eax
$LN1@itoa_s:

; 130  :    }
; 131  :    itoa(i,base,buf);

	mov	DWORD PTR _buf$[esp-4], ecx
	mov	DWORD PTR _base$[esp-4], edx
	mov	DWORD PTR _i$[esp-4], eax
	jmp	?itoa@@YAXIIPAD@Z			; itoa
$LN3@itoa_s:

; 132  : }

	ret	0
?itoa_s@@YAXHIPAD@Z ENDP				; itoa_s
_TEXT	ENDS
PUBLIC	?DebugSetColor@@YAII@Z				; DebugSetColor
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_c$ = 8							; size = 4
?DebugSetColor@@YAII@Z PROC				; DebugSetColor

; 140  : 
; 141  : 	unsigned t=_color;
; 142  : 	_color=c;

	mov	cl, BYTE PTR _c$[esp-4]
	movzx	eax, BYTE PTR ?_color@@3EA		; _color
	mov	BYTE PTR ?_color@@3EA, cl		; _color

; 143  : 	return t;
; 144  : }

	ret	0
?DebugSetColor@@YAII@Z ENDP				; DebugSetColor
_TEXT	ENDS
PUBLIC	?DebugGotoXY@@YAXII@Z				; DebugGotoXY
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?DebugGotoXY@@YAXII@Z PROC				; DebugGotoXY

; 148  : 
; 149  : 	if (cursor_x <= 80)

	cmp	BYTE PTR ?cursor_x@@3EA, 80		; cursor_x, 00000050H
	ja	SHORT $LN2@DebugGotoX

; 150  : 	    cursor_x = x;

	mov	al, BYTE PTR _x$[esp-4]
	mov	BYTE PTR ?cursor_x@@3EA, al		; cursor_x
$LN2@DebugGotoX:

; 151  : 
; 152  : 	if (cursor_y <= 25)

	cmp	BYTE PTR ?cursor_y@@3EA, 25		; cursor_y, 00000019H
	ja	SHORT $LN1@DebugGotoX

; 153  : 	    cursor_y = y;

	mov	cl, BYTE PTR _y$[esp-4]
	mov	BYTE PTR ?cursor_y@@3EA, cl		; cursor_y
$LN1@DebugGotoX:

; 154  : }

	ret	0
?DebugGotoXY@@YAXII@Z ENDP				; DebugGotoXY
_TEXT	ENDS
PUBLIC	?DebugClrScr@@YAXE@Z				; DebugClrScr
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_c$ = 8							; size = 1
?DebugClrScr@@YAXE@Z PROC				; DebugClrScr

; 158  : 
; 159  : 	//! clear video memory by writing space characters to it
; 160  : 	for (int i = 0; i < 80*25; i++)

	xor	ecx, ecx
	mov	ch, BYTE PTR _c$[esp-4]
	xor	edx, edx
	push	esi
	or	ecx, 32					; 00000020H
	xor	eax, eax
	npad	2
$LL3@DebugClrSc:

; 161  :         video_memory[i] = ' ' | (c << 8);

	mov	esi, DWORD PTR ?video_memory@@3PAGA	; video_memory
	mov	WORD PTR [eax+esi], cx
	add	eax, 2
	cmp	eax, 4000				; 00000fa0H
	jl	SHORT $LL3@DebugClrSc

; 162  : 
; 163  :     //! move position back to start
; 164  :     DebugGotoXY (0,0);

	cmp	BYTE PTR ?cursor_x@@3EA, 80		; cursor_x, 00000050H
	pop	esi
	ja	SHORT $LN7@DebugClrSc
	mov	BYTE PTR ?cursor_x@@3EA, dl		; cursor_x
$LN7@DebugClrSc:
	cmp	BYTE PTR ?cursor_y@@3EA, 25		; cursor_y, 00000019H
	ja	SHORT $LN6@DebugClrSc
	mov	BYTE PTR ?cursor_y@@3EA, dl		; cursor_y
$LN6@DebugClrSc:

; 165  : }

	ret	0
?DebugClrScr@@YAXE@Z ENDP				; DebugClrScr
_TEXT	ENDS
PUBLIC	?DebugPuts@@YAXPAD@Z				; DebugPuts
EXTRN	?strlen@@YAIPBD@Z:PROC				; strlen
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_str$ = 8						; size = 4
?DebugPuts@@YAXPAD@Z PROC				; DebugPuts

; 168  : void DebugPuts (char* str) {

	push	edi

; 169  : 
; 170  : 	if (!str)

	mov	edi, DWORD PTR _str$[esp]
	test	edi, edi
	je	SHORT $LN1@DebugPuts
	push	esi

; 171  : 		return;
; 172  : 
; 173  : 	//! err... displays a string
; 174  :     for (unsigned int i=0; i<strlen(str); i++)

	push	edi
	xor	esi, esi
	call	?strlen@@YAIPBD@Z			; strlen
	add	esp, 4
	test	eax, eax
	jbe	SHORT $LN9@DebugPuts
	npad	7
$LL3@DebugPuts:

; 175  :         DebugPutc (str[i]);

	movzx	eax, BYTE PTR [esi+edi]
	push	eax
	call	?DebugPutc@@YAXE@Z			; DebugPutc
	push	edi
	add	esi, 1
	call	?strlen@@YAIPBD@Z			; strlen
	add	esp, 8
	cmp	esi, eax
	jb	SHORT $LL3@DebugPuts
$LN9@DebugPuts:
	pop	esi
$LN1@DebugPuts:
	pop	edi

; 176  : }

	ret	0
?DebugPuts@@YAXPAD@Z ENDP				; DebugPuts
_TEXT	ENDS
PUBLIC	?DebugPrintf@@YAHPBDZZ				; DebugPrintf
EXTRN	?strcpy@@YAPADPADPBD@Z:PROC			; strcpy
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_str$2746 = -64						; size = 32
_str$2736 = -64						; size = 32
_str$2725 = -64						; size = 64
_str$ = 8						; size = 4
?DebugPrintf@@YAHPBDZZ PROC				; DebugPrintf

; 179  : int DebugPrintf (const char* str, ...) {

	sub	esp, 64					; 00000040H
	push	ebx
	push	ebp

; 180  : 
; 181  : 	if(!str)

	mov	ebp, DWORD PTR _str$[esp+68]
	xor	ebx, ebx
	cmp	ebp, ebx
	jne	SHORT $LN15@DebugPrint
	pop	ebp

; 182  : 		return 0;

	xor	eax, eax
	pop	ebx

; 251  : }

	add	esp, 64					; 00000040H
	ret	0
$LN15@DebugPrint:
	push	esi
	push	edi

; 186  : 	size_t i;
; 187  : 	for (i=0; i<strlen(str);i++) {

	push	ebp
	xor	edi, edi
	call	?strlen@@YAIPBD@Z			; strlen
	add	esp, 4
	test	eax, eax
	jbe	$LN12@DebugPrint

; 183  : 
; 184  : 	va_list		args;
; 185  : 	va_start (args, str);

	lea	esi, DWORD PTR _str$[esp+76]
$LL14@DebugPrint:

; 188  : 
; 189  : 		switch (str[i]) {

	movzx	eax, BYTE PTR [edi+ebp]
	cmp	al, 37					; 00000025H
	je	SHORT $LN9@DebugPrint

; 238  : 				}
; 239  : 
; 240  : 				break;
; 241  : 
; 242  : 			default:
; 243  : 				DebugPutc (str[i]);

	push	eax
	call	?DebugPutc@@YAXE@Z			; DebugPutc
	add	esp, 4

; 244  : 				break;

	jmp	$LN13@DebugPrint
$LN9@DebugPrint:

; 190  : 
; 191  : 			case '%':
; 192  : 
; 193  : 				switch (str[i+1]) {

	movsx	eax, BYTE PTR [edi+ebp+1]
	add	eax, -88				; ffffffa8H
	cmp	eax, 32					; 00000020H
	ja	$LN2@DebugPrint
	movzx	eax, BYTE PTR $LN28@DebugPrint[eax]
	jmp	DWORD PTR $LN33@DebugPrint[eax*4]
$LN6@DebugPrint:

; 194  : 
; 195  : 					/*** characters ***/
; 196  : 					case 'c': {
; 197  : 						char c = va_arg (args, char);
; 198  : 						DebugPutc (c);

	movzx	ecx, BYTE PTR [esi+4]
	add	esi, 4
	push	ecx
	call	?DebugPutc@@YAXE@Z			; DebugPutc
	add	esp, 4

; 199  : 						i++;		// go to next character
; 200  : 						break;

	jmp	$LN31@DebugPrint
$LN5@DebugPrint:

; 201  : 					}
; 202  : 
; 203  : 					/*** address of ***/
; 204  : 					case 's': {
; 205  : 						int c = (int&) va_arg (args, char);
; 206  : 						char str[64];
; 207  : 						strcpy (str,(const char*)c);

	mov	edx, DWORD PTR [esi+4]
	add	esi, 4
	push	edx
	lea	eax, DWORD PTR _str$2725[esp+84]
	push	eax
	call	?strcpy@@YAPADPADPBD@Z			; strcpy

; 208  : 						DebugPuts (str);

	lea	ecx, DWORD PTR _str$2725[esp+88]
	push	ecx
	call	?DebugPuts@@YAXPAD@Z			; DebugPuts
	add	esp, 12					; 0000000cH

; 209  : 						i++;		// go to next character
; 210  : 						break;

	jmp	$LN31@DebugPrint
$LN4@DebugPrint:

; 211  : 					}
; 212  : 
; 213  : 					/*** integers ***/
; 214  : 					case 'd':
; 215  : 					case 'i': {
; 216  : 						int c = va_arg (args, int);
; 217  : 						char str[32]={0};

	xor	eax, eax
	add	esi, 4
	mov	DWORD PTR _str$2736[esp+81], eax
	mov	DWORD PTR _str$2736[esp+85], eax
	mov	DWORD PTR _str$2736[esp+89], eax
	mov	DWORD PTR _str$2736[esp+93], eax
	mov	DWORD PTR _str$2736[esp+97], eax
	mov	DWORD PTR _str$2736[esp+101], eax
	mov	DWORD PTR _str$2736[esp+105], eax
	mov	WORD PTR _str$2736[esp+109], ax
	mov	BYTE PTR _str$2736[esp+111], al

; 218  : 						itoa_s (c, 10, str);

	mov	eax, DWORD PTR [esi]
	cmp	eax, ebx
	mov	BYTE PTR _str$2736[esp+80], bl
	lea	ecx, DWORD PTR _str$2736[esp+80]
	jge	SHORT $LN18@DebugPrint
	mov	BYTE PTR _str$2736[esp+80], 45		; 0000002dH
	lea	ecx, DWORD PTR _str$2736[esp+81]
	neg	eax
$LN18@DebugPrint:
	push	ecx
	push	10					; 0000000aH
	push	eax
	call	?itoa@@YAXIIPAD@Z			; itoa

; 219  : 						DebugPuts (str);

	lea	edx, DWORD PTR _str$2736[esp+92]
	push	edx

; 220  : 						i++;		// go to next character
; 221  : 						break;

	jmp	SHORT $LN32@DebugPrint
$LN3@DebugPrint:

; 222  : 					}
; 223  : 
; 224  : 					/*** display in hex ***/
; 225  : 					case 'X':
; 226  : 					case 'x': {
; 227  : 						int c = va_arg (args, int);
; 228  : 						char str[32]={0};

	xor	eax, eax
	add	esi, 4
	mov	DWORD PTR _str$2746[esp+81], eax
	mov	DWORD PTR _str$2746[esp+85], eax
	mov	DWORD PTR _str$2746[esp+89], eax
	mov	DWORD PTR _str$2746[esp+93], eax
	mov	DWORD PTR _str$2746[esp+97], eax
	mov	DWORD PTR _str$2746[esp+101], eax
	mov	DWORD PTR _str$2746[esp+105], eax
	mov	WORD PTR _str$2746[esp+109], ax
	mov	BYTE PTR _str$2746[esp+111], al

; 229  : 						itoa_s (c,16,str);

	mov	eax, DWORD PTR [esi]
	cmp	eax, ebx
	mov	BYTE PTR _str$2746[esp+80], bl
	lea	ecx, DWORD PTR _str$2746[esp+80]
	jge	SHORT $LN22@DebugPrint
	mov	BYTE PTR _str$2746[esp+80], 45		; 0000002dH
	lea	ecx, DWORD PTR _str$2746[esp+81]
	neg	eax
$LN22@DebugPrint:
	push	ecx
	push	16					; 00000010H
	push	eax
	call	?itoa@@YAXIIPAD@Z			; itoa

; 230  : 						DebugPuts (str);

	lea	eax, DWORD PTR _str$2746[esp+92]
	push	eax
$LN32@DebugPrint:
	call	?DebugPuts@@YAXPAD@Z			; DebugPuts
	add	esp, 16					; 00000010H
$LN31@DebugPrint:

; 231  : 						i++;		// go to next character

	add	edi, 1
$LN13@DebugPrint:

; 186  : 	size_t i;
; 187  : 	for (i=0; i<strlen(str);i++) {

	push	ebp
	add	edi, 1
	call	?strlen@@YAIPBD@Z			; strlen
	add	esp, 4
	cmp	edi, eax
	jb	$LL14@DebugPrint
$LN12@DebugPrint:

; 245  : 		}
; 246  : 
; 247  : 	}
; 248  : 
; 249  : 	va_end (args);
; 250  : 	return i;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 251  : }

	add	esp, 64					; 00000040H
	ret	0
$LN2@DebugPrint:
	pop	edi
	pop	esi
	pop	ebp

; 232  : 						break;
; 233  : 					}
; 234  : 
; 235  : 					default:
; 236  : 						va_end (args);
; 237  : 						return 1;

	mov	eax, 1
	pop	ebx

; 251  : }

	add	esp, 64					; 00000040H
	ret	0
	npad	1
$LN33@DebugPrint:
	DD	$LN3@DebugPrint
	DD	$LN6@DebugPrint
	DD	$LN4@DebugPrint
	DD	$LN5@DebugPrint
	DD	$LN2@DebugPrint
$LN28@DebugPrint:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	DB	4
	DB	4
	DB	4
	DB	4
	DB	0
?DebugPrintf@@YAHPBDZZ ENDP				; DebugPrintf
_TEXT	ENDS
END

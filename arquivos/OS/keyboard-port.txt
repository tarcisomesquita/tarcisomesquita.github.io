To send a command to the keyboard encoder, write the command byte to port 0x60. Before doing this however, you need to insure that bit 0 (output buffer full) of the keyboard controller status register is 0 to insure it is safe. If bit 1 (input buffer full) of the keyboard controller status register is 1 then data is in the input buffer ready to be read. Reading from port 0x60 will allow you to get this data from the keyboard encoder. The data read from the keyboard encoder will normally come from the keyboard. however you can also reprogram the microcontroller to return specific values as well.

Writing a value to port 0x64 will allow you to send a command byte to the onboard keyboard controller. Reading from port 0x64 will allow you to get the status byte of the keyboard controller

Status Register
Bit 0: Output Buffer Status
0: Output buffer empty, dont read yet
1: Output buffer full, please read me :)
Bit 1: Input Buffer Status
0: Input buffer empty, can be written
1: Input buffer full, dont write yet
Bit 2: System flag
0: Set after power on reset
1: Set after successfull completion of the keyboard controllers self-test (Basic Assurance Test, BAT)
Bit 3: Command Data
0: Last write to input buffer was data (via port 0x60)
1: Last write to input buffer was a command (via port 0x64)
Bit 4: Keyboard Locked
0: Locked
1: Not locked
Bit 5: Auxiliary Output buffer full
PS/2 Systems:
0: Determins if read from port 0x60 is valid If valid, 0=Keyboard data
1: Mouse data, only if you can read from port 0x60
AT Systems:
0: OK flag
1: Timeout on transmission from keyboard controller to keyboard. This may indicate no keyboard is present.
Bit 6: Timeout
0: OK flag
1: Timeout
PS/2:
General Timeout
AT:
Timeout on transmission from keyboard to keyboard controller. Possibly parity error (In which case both bits 6 and 7 are set)
Bit 7: Parity error
0: OK flag, no error
1: Parity error with last byte

